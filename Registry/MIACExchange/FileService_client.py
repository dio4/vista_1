##################################################
# file: FileService_client.py
#
# client stubs generated by "ZSI.generate.wsdl2python.WriteServiceModule"
#     C:\pydev\Python25\wsdl2py.bat -s http://172.24.61.2:8000/StattalonFileService.svc?wsdl
#
##################################################

from FileService_types import *
from ZSI import client
from ZSI.schema import GED

# Locator
class FileServiceLocator:
    BasicHttpBinding_IFileService_address = "http://172.24.61.2:8000/StattalonFileService.svc"
    def getBasicHttpBinding_IFileServiceAddress(self):
        return FileServiceLocator.BasicHttpBinding_IFileService_address
    def getBasicHttpBinding_IFileService(self, url=None, **kw):
        return BasicHttpBinding_IFileServiceSOAP(url or FileServiceLocator.BasicHttpBinding_IFileService_address, **kw)

# Methods
class BasicHttpBinding_IFileServiceSOAP:
    def __init__(self, url, **kw):
        kw.setdefault("readerclass", None)
        kw.setdefault("writerclass", None)
        # no resource properties
        self.binding = client.Binding(url=url, **kw)
        # no ws-addressing

    # op: ServiceReady
    def ServiceReady(self, request, **kw):
        if isinstance(request, IFileService_ServiceReady_InputMessage) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="http://tempuri.org/IFileService/ServiceReady", **kw)
        # no output wsaction
        response = self.binding.Receive(IFileService_ServiceReady_OutputMessage.typecode)
        return response

    # op: Testing
    def Testing(self, request, **kw):
        if isinstance(request, IFileService_Testing_InputMessage) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="http://tempuri.org/IFileService/Testing", **kw)
        # no output wsaction
        response = self.binding.Receive(IFileService_Testing_OutputMessage.typecode)
        return response

    # op: FileUpload
    def FileUpload(self, request, soapheaders=(), **kw):
        if isinstance(request, UploadFileData) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="http://tempuri.org/IFileService/FileUpload", soapheaders=soapheaders, **kw)
        #check for soap, assume soap:fault
        if self.binding.IsSOAP(): self.binding.Receive(None, **kw)

IFileService_ServiceReady_InputMessage = GED("http://tempuri.org/", "ServiceReady").pyclass

IFileService_ServiceReady_OutputMessage = GED("http://tempuri.org/", "ServiceReadyResponse").pyclass

IFileService_Testing_InputMessage = GED("http://tempuri.org/", "Testing").pyclass

IFileService_Testing_OutputMessage = GED("http://tempuri.org/", "TestingResponse").pyclass

UploadFileData = GED("http://tempuri.org/", "UploadFileData").pyclass
