##################################################
# file: XMLSchema_xsd_types.py
#
# schema types generated by "ZSI.generate.wsdl2python.WriteServiceModule"
#    D:\py-dev\Python25\Scripts\wsdl2py --complexType --schema XMLSchema.xsd
#
##################################################

import ZSI
import ZSI.TCcompound
from ZSI.schema import LocalElementDeclaration, ElementDeclaration, TypeDefinition, GTD, GED
from ZSI.generate.pyclass import pyclass_type

##############################
# targetNamespace
# http://portal.zdrav/_layouts/projects/dd/myXSD/2008-07-16T06:56:43
##############################

class ns0:
    targetNamespace = "http://portal.zdrav/_layouts/projects/dd/myXSD/2008-07-16T06:56:43"

    class requiredString_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://portal.zdrav/_layouts/projects/dd/myXSD/2008-07-16T06:56:43"
        type = (schema, "requiredString")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class requiredAnyURI_Def(ZSI.TC.URI, TypeDefinition):
        schema = "http://portal.zdrav/_layouts/projects/dd/myXSD/2008-07-16T06:56:43"
        type = (schema, "requiredAnyURI")
        def __init__(self, pname, **kw):
            ZSI.TC.URI.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class requiredBase64Binary_Def(ZSI.TC.Base64String, TypeDefinition):
        schema = "http://portal.zdrav/_layouts/projects/dd/myXSD/2008-07-16T06:56:43"
        type = (schema, "requiredBase64Binary")
        def __init__(self, pname, **kw):
            ZSI.TC.Base64String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class form_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "form"
        schema = "http://portal.zdrav/_layouts/projects/dd/myXSD/2008-07-16T06:56:43"
        def __init__(self, **kw):
            ns = ns0.form_Dec.schema
            TClist = [GED("http://portal.zdrav/_layouts/projects/dd/myXSD/2008-07-16T06:56:43","LPU",lazy=False, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), GED("http://portal.zdrav/_layouts/projects/dd/myXSD/2008-07-16T06:56:43","data",lazy=False, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://portal.zdrav/_layouts/projects/dd/myXSD/2008-07-16T06:56:43","form")
            kw["aname"] = "_form"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            # attribute handling code
            self.attribute_typecode_dict[("http://portal.zdrav/_layouts/projects/dd/myXSD/2008-07-16T06:56:43","name")] = ZSI.TC.String()
            self.attribute_typecode_dict[("http://portal.zdrav/_layouts/projects/dd/myXSD/2008-07-16T06:56:43","project")] = ZSI.TC.String()
            self.attribute_typecode_dict[("http://portal.zdrav/_layouts/projects/dd/myXSD/2008-07-16T06:56:43","version")] = ZSI.TCnumbers.FPdouble()
            self.attribute_typecode_dict[("http://www.w3.org/2001/XMLSchema","anyAttribute")] = ZSI.TC.AnyElement()
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._LPU = None
                    self._data = None
                    return
            Holder.__name__ = "form_Holder"
            self.pyclass = Holder

    class LPU_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "LPU"
        schema = "http://portal.zdrav/_layouts/projects/dd/myXSD/2008-07-16T06:56:43"
        def __init__(self, **kw):
            ns = ns0.LPU_Dec.schema
            TClist = []
            kw["pname"] = ("http://portal.zdrav/_layouts/projects/dd/myXSD/2008-07-16T06:56:43","LPU")
            kw["aname"] = "_LPU"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            # attribute handling code
            self.attribute_typecode_dict[("http://portal.zdrav/_layouts/projects/dd/myXSD/2008-07-16T06:56:43","lpu_id")] = ZSI.TCnumbers.Iinteger()
            self.attribute_typecode_dict[("http://portal.zdrav/_layouts/projects/dd/myXSD/2008-07-16T06:56:43","email")] = ZSI.TC.String()
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "LPU_Holder"
            self.pyclass = Holder

    class data_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "data"
        schema = "http://portal.zdrav/_layouts/projects/dd/myXSD/2008-07-16T06:56:43"
        def __init__(self, **kw):
            ns = ns0.data_Dec.schema
            TClist = [GED("http://portal.zdrav/_layouts/projects/dd/myXSD/2008-07-16T06:56:43","DD1000",lazy=False, isref=True)(minOccurs=0, maxOccurs="unbounded", nillable=False, encoded=kw.get("encoded")), GED("http://portal.zdrav/_layouts/projects/dd/myXSD/2008-07-16T06:56:43","DD2000",lazy=False, isref=True)(minOccurs=0, maxOccurs="unbounded", nillable=False, encoded=kw.get("encoded")), GED("http://portal.zdrav/_layouts/projects/dd/myXSD/2008-07-16T06:56:43","DD3000",lazy=False, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://portal.zdrav/_layouts/projects/dd/myXSD/2008-07-16T06:56:43","data")
            kw["aname"] = "_data"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            # attribute handling code
            self.attribute_typecode_dict[("http://portal.zdrav/_layouts/projects/dd/myXSD/2008-07-16T06:56:43","period")] = ns0.requiredString_Def(None)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._DD1000 = None
                    self._DD2000 = None
                    self._DD3000 = None
                    return
            Holder.__name__ = "data_Holder"
            self.pyclass = Holder

    class DD1000_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "DD1000"
        schema = "http://portal.zdrav/_layouts/projects/dd/myXSD/2008-07-16T06:56:43"
        def __init__(self, **kw):
            ns = ns0.DD1000_Dec.schema
            TClist = [GED("http://portal.zdrav/_layouts/projects/dd/myXSD/2008-07-16T06:56:43","Complete",lazy=False, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), GED("http://portal.zdrav/_layouts/projects/dd/myXSD/2008-07-16T06:56:43","NotComplete",lazy=False, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), GED("http://portal.zdrav/_layouts/projects/dd/myXSD/2008-07-16T06:56:43","ORDER_DD",lazy=False, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), GED("http://portal.zdrav/_layouts/projects/dd/myXSD/2008-07-16T06:56:43","AttachedOrgs",lazy=False, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), GED("http://portal.zdrav/_layouts/projects/dd/myXSD/2008-07-16T06:56:43","Summary",lazy=False, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://portal.zdrav/_layouts/projects/dd/myXSD/2008-07-16T06:56:43","DD1000")
            kw["aname"] = "_DD1000"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Complete = None
                    self._NotComplete = None
                    self._ORDER_DD = None
                    self._AttachedOrgs = None
                    self._Summary = None
                    return
            Holder.__name__ = "DD1000_Holder"
            self.pyclass = Holder

    class Complete_Dec(ZSI.TCnumbers.Iinteger, ElementDeclaration):
        literal = "Complete"
        schema = "http://portal.zdrav/_layouts/projects/dd/myXSD/2008-07-16T06:56:43"
        def __init__(self, **kw):
            kw["pname"] = ("http://portal.zdrav/_layouts/projects/dd/myXSD/2008-07-16T06:56:43","Complete")
            kw["aname"] = "_Complete"
            class IHolder(int): typecode=self
            kw["pyclass"] = IHolder
            IHolder.__name__ = "_Complete_immutable_holder"
            ZSI.TCnumbers.Iinteger.__init__(self, **kw)

    class NotComplete_Dec(ZSI.TCnumbers.Iinteger, ElementDeclaration):
        literal = "NotComplete"
        schema = "http://portal.zdrav/_layouts/projects/dd/myXSD/2008-07-16T06:56:43"
        def __init__(self, **kw):
            kw["pname"] = ("http://portal.zdrav/_layouts/projects/dd/myXSD/2008-07-16T06:56:43","NotComplete")
            kw["aname"] = "_NotComplete"
            class IHolder(int): typecode=self
            kw["pyclass"] = IHolder
            IHolder.__name__ = "_NotComplete_immutable_holder"
            ZSI.TCnumbers.Iinteger.__init__(self, **kw)

    class ORDER_DD_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ORDER_DD"
        schema = "http://portal.zdrav/_layouts/projects/dd/myXSD/2008-07-16T06:56:43"
        def __init__(self, **kw):
            ns = ns0.ORDER_DD_Dec.schema
            TClist = [GED("http://portal.zdrav/_layouts/projects/dd/myXSD/2008-07-16T06:56:43","NoEquipment",lazy=False, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), GED("http://portal.zdrav/_layouts/projects/dd/myXSD/2008-07-16T06:56:43","NoExpert",lazy=False, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), GED("http://portal.zdrav/_layouts/projects/dd/myXSD/2008-07-16T06:56:43","NoEqNEx",lazy=False, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://portal.zdrav/_layouts/projects/dd/myXSD/2008-07-16T06:56:43","ORDER_DD")
            kw["aname"] = "_ORDER_DD"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._NoEquipment = None
                    self._NoExpert = None
                    self._NoEqNEx = None
                    return
            Holder.__name__ = "ORDER_DD_Holder"
            self.pyclass = Holder

    class NoEquipment_Dec(ZSI.TCnumbers.Iinteger, ElementDeclaration):
        literal = "NoEquipment"
        schema = "http://portal.zdrav/_layouts/projects/dd/myXSD/2008-07-16T06:56:43"
        def __init__(self, **kw):
            kw["pname"] = ("http://portal.zdrav/_layouts/projects/dd/myXSD/2008-07-16T06:56:43","NoEquipment")
            kw["aname"] = "_NoEquipment"
            class IHolder(int): typecode=self
            kw["pyclass"] = IHolder
            IHolder.__name__ = "_NoEquipment_immutable_holder"
            ZSI.TCnumbers.Iinteger.__init__(self, **kw)

    class NoExpert_Dec(ZSI.TCnumbers.Iinteger, ElementDeclaration):
        literal = "NoExpert"
        schema = "http://portal.zdrav/_layouts/projects/dd/myXSD/2008-07-16T06:56:43"
        def __init__(self, **kw):
            kw["pname"] = ("http://portal.zdrav/_layouts/projects/dd/myXSD/2008-07-16T06:56:43","NoExpert")
            kw["aname"] = "_NoExpert"
            class IHolder(int): typecode=self
            kw["pyclass"] = IHolder
            IHolder.__name__ = "_NoExpert_immutable_holder"
            ZSI.TCnumbers.Iinteger.__init__(self, **kw)

    class NoEqNEx_Dec(ZSI.TCnumbers.Iinteger, ElementDeclaration):
        literal = "NoEqNEx"
        schema = "http://portal.zdrav/_layouts/projects/dd/myXSD/2008-07-16T06:56:43"
        def __init__(self, **kw):
            kw["pname"] = ("http://portal.zdrav/_layouts/projects/dd/myXSD/2008-07-16T06:56:43","NoEqNEx")
            kw["aname"] = "_NoEqNEx"
            class IHolder(int): typecode=self
            kw["pyclass"] = IHolder
            IHolder.__name__ = "_NoEqNEx_immutable_holder"
            ZSI.TCnumbers.Iinteger.__init__(self, **kw)

    class AttachedOrgs_Dec(ZSI.TCnumbers.Iinteger, ElementDeclaration):
        literal = "AttachedOrgs"
        schema = "http://portal.zdrav/_layouts/projects/dd/myXSD/2008-07-16T06:56:43"
        def __init__(self, **kw):
            kw["pname"] = ("http://portal.zdrav/_layouts/projects/dd/myXSD/2008-07-16T06:56:43","AttachedOrgs")
            kw["aname"] = "_AttachedOrgs"
            class IHolder(int): typecode=self
            kw["pyclass"] = IHolder
            IHolder.__name__ = "_AttachedOrgs_immutable_holder"
            ZSI.TCnumbers.Iinteger.__init__(self, **kw)

    class Summary_Dec(ZSI.TCnumbers.FPdouble, ElementDeclaration):
        literal = "Summary"
        schema = "http://portal.zdrav/_layouts/projects/dd/myXSD/2008-07-16T06:56:43"
        def __init__(self, **kw):
            kw["pname"] = ("http://portal.zdrav/_layouts/projects/dd/myXSD/2008-07-16T06:56:43","Summary")
            kw["aname"] = "_Summary"
            class IHolder(float): typecode=self
            kw["pyclass"] = IHolder
            IHolder.__name__ = "_Summary_immutable_holder"
            ZSI.TCnumbers.FPdouble.__init__(self, **kw)

    class DD2000_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "DD2000"
        schema = "http://portal.zdrav/_layouts/projects/dd/myXSD/2008-07-16T06:56:43"
        def __init__(self, **kw):
            ns = ns0.DD2000_Dec.schema
            TClist = [GED("http://portal.zdrav/_layouts/projects/dd/myXSD/2008-07-16T06:56:43","citizen",lazy=False, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), GED("http://portal.zdrav/_layouts/projects/dd/myXSD/2008-07-16T06:56:43","groups",lazy=False, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://portal.zdrav/_layouts/projects/dd/myXSD/2008-07-16T06:56:43","DD2000")
            kw["aname"] = "_DD2000"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._citizen = None
                    self._groups = None
                    return
            Holder.__name__ = "DD2000_Holder"
            self.pyclass = Holder

    class citizen_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "citizen"
        schema = "http://portal.zdrav/_layouts/projects/dd/myXSD/2008-07-16T06:56:43"
        def __init__(self, **kw):
            ns = ns0.citizen_Dec.schema
            TClist = [GED("http://portal.zdrav/_layouts/projects/dd/myXSD/2008-07-16T06:56:43","observable",lazy=False, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), GED("http://portal.zdrav/_layouts/projects/dd/myXSD/2008-07-16T06:56:43","observated_complete",lazy=False, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), GED("http://portal.zdrav/_layouts/projects/dd/myXSD/2008-07-16T06:56:43","observated_incomplete",lazy=False, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://portal.zdrav/_layouts/projects/dd/myXSD/2008-07-16T06:56:43","citizen")
            kw["aname"] = "_citizen"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._observable = None
                    self._observated_complete = None
                    self._observated_incomplete = None
                    return
            Holder.__name__ = "citizen_Holder"
            self.pyclass = Holder

    class observable_Dec(ZSI.TCnumbers.Iinteger, ElementDeclaration):
        literal = "observable"
        schema = "http://portal.zdrav/_layouts/projects/dd/myXSD/2008-07-16T06:56:43"
        def __init__(self, **kw):
            kw["pname"] = ("http://portal.zdrav/_layouts/projects/dd/myXSD/2008-07-16T06:56:43","observable")
            kw["aname"] = "_observable"
            class IHolder(int): typecode=self
            kw["pyclass"] = IHolder
            IHolder.__name__ = "_observable_immutable_holder"
            ZSI.TCnumbers.Iinteger.__init__(self, **kw)

    class observated_complete_Dec(ZSI.TCnumbers.Iinteger, ElementDeclaration):
        literal = "observated_complete"
        schema = "http://portal.zdrav/_layouts/projects/dd/myXSD/2008-07-16T06:56:43"
        def __init__(self, **kw):
            kw["pname"] = ("http://portal.zdrav/_layouts/projects/dd/myXSD/2008-07-16T06:56:43","observated_complete")
            kw["aname"] = "_observated_complete"
            class IHolder(int): typecode=self
            kw["pyclass"] = IHolder
            IHolder.__name__ = "_observated_complete_immutable_holder"
            ZSI.TCnumbers.Iinteger.__init__(self, **kw)

    class observated_incomplete_Dec(ZSI.TCnumbers.Iinteger, ElementDeclaration):
        literal = "observated_incomplete"
        schema = "http://portal.zdrav/_layouts/projects/dd/myXSD/2008-07-16T06:56:43"
        def __init__(self, **kw):
            kw["pname"] = ("http://portal.zdrav/_layouts/projects/dd/myXSD/2008-07-16T06:56:43","observated_incomplete")
            kw["aname"] = "_observated_incomplete"
            class IHolder(int): typecode=self
            kw["pyclass"] = IHolder
            IHolder.__name__ = "_observated_incomplete_immutable_holder"
            ZSI.TCnumbers.Iinteger.__init__(self, **kw)

    class groups_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "groups"
        schema = "http://portal.zdrav/_layouts/projects/dd/myXSD/2008-07-16T06:56:43"
        def __init__(self, **kw):
            ns = ns0.groups_Dec.schema
            TClist = [GED("http://portal.zdrav/_layouts/projects/dd/myXSD/2008-07-16T06:56:43","healthy",lazy=False, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), GED("http://portal.zdrav/_layouts/projects/dd/myXSD/2008-07-16T06:56:43","risk_II",lazy=False, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), GED("http://portal.zdrav/_layouts/projects/dd/myXSD/2008-07-16T06:56:43","risk_III",lazy=False, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), GED("http://portal.zdrav/_layouts/projects/dd/myXSD/2008-07-16T06:56:43","risk_VI",lazy=False, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), GED("http://portal.zdrav/_layouts/projects/dd/myXSD/2008-07-16T06:56:43","risk_V",lazy=False, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://portal.zdrav/_layouts/projects/dd/myXSD/2008-07-16T06:56:43","groups")
            kw["aname"] = "_groups"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._healthy = None
                    self._risk_II = None
                    self._risk_III = None
                    self._risk_VI = None
                    self._risk_V = None
                    return
            Holder.__name__ = "groups_Holder"
            self.pyclass = Holder

    class healthy_Dec(ZSI.TCnumbers.Iinteger, ElementDeclaration):
        literal = "healthy"
        schema = "http://portal.zdrav/_layouts/projects/dd/myXSD/2008-07-16T06:56:43"
        def __init__(self, **kw):
            kw["pname"] = ("http://portal.zdrav/_layouts/projects/dd/myXSD/2008-07-16T06:56:43","healthy")
            kw["aname"] = "_healthy"
            class IHolder(int): typecode=self
            kw["pyclass"] = IHolder
            IHolder.__name__ = "_healthy_immutable_holder"
            ZSI.TCnumbers.Iinteger.__init__(self, **kw)

    class risk_II_Dec(ZSI.TCnumbers.Iinteger, ElementDeclaration):
        literal = "risk_II"
        schema = "http://portal.zdrav/_layouts/projects/dd/myXSD/2008-07-16T06:56:43"
        def __init__(self, **kw):
            kw["pname"] = ("http://portal.zdrav/_layouts/projects/dd/myXSD/2008-07-16T06:56:43","risk_II")
            kw["aname"] = "_risk_II"
            class IHolder(int): typecode=self
            kw["pyclass"] = IHolder
            IHolder.__name__ = "_risk_II_immutable_holder"
            ZSI.TCnumbers.Iinteger.__init__(self, **kw)

    class risk_III_Dec(ZSI.TCnumbers.Iinteger, ElementDeclaration):
        literal = "risk_III"
        schema = "http://portal.zdrav/_layouts/projects/dd/myXSD/2008-07-16T06:56:43"
        def __init__(self, **kw):
            kw["pname"] = ("http://portal.zdrav/_layouts/projects/dd/myXSD/2008-07-16T06:56:43","risk_III")
            kw["aname"] = "_risk_III"
            class IHolder(int): typecode=self
            kw["pyclass"] = IHolder
            IHolder.__name__ = "_risk_III_immutable_holder"
            ZSI.TCnumbers.Iinteger.__init__(self, **kw)

    class risk_VI_Dec(ZSI.TCnumbers.Iinteger, ElementDeclaration):
        literal = "risk_VI"
        schema = "http://portal.zdrav/_layouts/projects/dd/myXSD/2008-07-16T06:56:43"
        def __init__(self, **kw):
            kw["pname"] = ("http://portal.zdrav/_layouts/projects/dd/myXSD/2008-07-16T06:56:43","risk_VI")
            kw["aname"] = "_risk_VI"
            class IHolder(int): typecode=self
            kw["pyclass"] = IHolder
            IHolder.__name__ = "_risk_VI_immutable_holder"
            ZSI.TCnumbers.Iinteger.__init__(self, **kw)

    class risk_V_Dec(ZSI.TCnumbers.Iinteger, ElementDeclaration):
        literal = "risk_V"
        schema = "http://portal.zdrav/_layouts/projects/dd/myXSD/2008-07-16T06:56:43"
        def __init__(self, **kw):
            kw["pname"] = ("http://portal.zdrav/_layouts/projects/dd/myXSD/2008-07-16T06:56:43","risk_V")
            kw["aname"] = "_risk_V"
            class IHolder(int): typecode=self
            kw["pyclass"] = IHolder
            IHolder.__name__ = "_risk_V_immutable_holder"
            ZSI.TCnumbers.Iinteger.__init__(self, **kw)

    class DD3000_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "DD3000"
        schema = "http://portal.zdrav/_layouts/projects/dd/myXSD/2008-07-16T06:56:43"
        def __init__(self, **kw):
            ns = ns0.DD3000_Dec.schema
            TClist = [GED("http://portal.zdrav/_layouts/projects/dd/myXSD/2008-07-16T06:56:43","A15-A19",lazy=False, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), GED("http://portal.zdrav/_layouts/projects/dd/myXSD/2008-07-16T06:56:43","malignant",lazy=False, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://portal.zdrav/_layouts/projects/dd/myXSD/2008-07-16T06:56:43","DD3000")
            kw["aname"] = "_DD3000"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._A15_A19 = None
                    self._malignant = None
                    return
            Holder.__name__ = "DD3000_Holder"
            self.pyclass = Holder

    class A15_A19_Dec(ZSI.TCnumbers.Iinteger, ElementDeclaration):
        literal = "A15-A19"
        schema = "http://portal.zdrav/_layouts/projects/dd/myXSD/2008-07-16T06:56:43"
        def __init__(self, **kw):
            kw["pname"] = ("http://portal.zdrav/_layouts/projects/dd/myXSD/2008-07-16T06:56:43","A15-A19")
            kw["aname"] = "_A15_A19"
            class IHolder(int): typecode=self
            kw["pyclass"] = IHolder
            IHolder.__name__ = "_A15_A19_immutable_holder"
            ZSI.TCnumbers.Iinteger.__init__(self, **kw)

    class malignant_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "malignant"
        schema = "http://portal.zdrav/_layouts/projects/dd/myXSD/2008-07-16T06:56:43"
        def __init__(self, **kw):
            ns = ns0.malignant_Dec.schema
            TClist = [GED("http://portal.zdrav/_layouts/projects/dd/myXSD/2008-07-16T06:56:43","C15-C26",lazy=False, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), GED("http://portal.zdrav/_layouts/projects/dd/myXSD/2008-07-16T06:56:43","C33-C34",lazy=False, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), GED("http://portal.zdrav/_layouts/projects/dd/myXSD/2008-07-16T06:56:43","C43-C44",lazy=False, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), GED("http://portal.zdrav/_layouts/projects/dd/myXSD/2008-07-16T06:56:43","C50",lazy=False, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), GED("http://portal.zdrav/_layouts/projects/dd/myXSD/2008-07-16T06:56:43","C50-C58",lazy=False, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), GED("http://portal.zdrav/_layouts/projects/dd/myXSD/2008-07-16T06:56:43","C61",lazy=False, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), GED("http://portal.zdrav/_layouts/projects/dd/myXSD/2008-07-16T06:56:43","C81",lazy=False, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), GED("http://portal.zdrav/_layouts/projects/dd/myXSD/2008-07-16T06:56:43","D50-D64",lazy=False, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), GED("http://portal.zdrav/_layouts/projects/dd/myXSD/2008-07-16T06:56:43","E10-E14",lazy=False, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), GED("http://portal.zdrav/_layouts/projects/dd/myXSD/2008-07-16T06:56:43","E66",lazy=False, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), GED("http://portal.zdrav/_layouts/projects/dd/myXSD/2008-07-16T06:56:43","E78",lazy=False, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), GED("http://portal.zdrav/_layouts/projects/dd/myXSD/2008-07-16T06:56:43","I10-I15",lazy=False, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), GED("http://portal.zdrav/_layouts/projects/dd/myXSD/2008-07-16T06:56:43","I20-I25",lazy=False, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), GED("http://portal.zdrav/_layouts/projects/dd/myXSD/2008-07-16T06:56:43","R73",lazy=False, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), GED("http://portal.zdrav/_layouts/projects/dd/myXSD/2008-07-16T06:56:43","R91",lazy=False, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), GED("http://portal.zdrav/_layouts/projects/dd/myXSD/2008-07-16T06:56:43","R92",lazy=False, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), GED("http://portal.zdrav/_layouts/projects/dd/myXSD/2008-07-16T06:56:43","R94.3",lazy=False, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://portal.zdrav/_layouts/projects/dd/myXSD/2008-07-16T06:56:43","malignant")
            kw["aname"] = "_malignant"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._C15_C26 = None
                    self._C33_C34 = None
                    self._C43_C44 = None
                    self._C50 = None
                    self._C50_C58 = None
                    self._C61 = None
                    self._C81 = None
                    self._D50_D64 = None
                    self._E10_E14 = None
                    self._E66 = None
                    self._E78 = None
                    self._I10_I15 = None
                    self._I20_I25 = None
                    self._R73 = None
                    self._R91 = None
                    self._R92 = None
                    self._R94_3 = None
                    return
            Holder.__name__ = "malignant_Holder"
            self.pyclass = Holder

    class C15_C26_Dec(ZSI.TCnumbers.Iinteger, ElementDeclaration):
        literal = "C15-C26"
        schema = "http://portal.zdrav/_layouts/projects/dd/myXSD/2008-07-16T06:56:43"
        def __init__(self, **kw):
            kw["pname"] = ("http://portal.zdrav/_layouts/projects/dd/myXSD/2008-07-16T06:56:43","C15-C26")
            kw["aname"] = "_C15_C26"
            class IHolder(int): typecode=self
            kw["pyclass"] = IHolder
            IHolder.__name__ = "_C15_C26_immutable_holder"
            ZSI.TCnumbers.Iinteger.__init__(self, **kw)

    class C33_C34_Dec(ZSI.TCnumbers.Iinteger, ElementDeclaration):
        literal = "C33-C34"
        schema = "http://portal.zdrav/_layouts/projects/dd/myXSD/2008-07-16T06:56:43"
        def __init__(self, **kw):
            kw["pname"] = ("http://portal.zdrav/_layouts/projects/dd/myXSD/2008-07-16T06:56:43","C33-C34")
            kw["aname"] = "_C33_C34"
            class IHolder(int): typecode=self
            kw["pyclass"] = IHolder
            IHolder.__name__ = "_C33_C34_immutable_holder"
            ZSI.TCnumbers.Iinteger.__init__(self, **kw)

    class C43_C44_Dec(ZSI.TCnumbers.Iinteger, ElementDeclaration):
        literal = "C43-C44"
        schema = "http://portal.zdrav/_layouts/projects/dd/myXSD/2008-07-16T06:56:43"
        def __init__(self, **kw):
            kw["pname"] = ("http://portal.zdrav/_layouts/projects/dd/myXSD/2008-07-16T06:56:43","C43-C44")
            kw["aname"] = "_C43_C44"
            class IHolder(int): typecode=self
            kw["pyclass"] = IHolder
            IHolder.__name__ = "_C43_C44_immutable_holder"
            ZSI.TCnumbers.Iinteger.__init__(self, **kw)

    class C50_Dec(ZSI.TCnumbers.Iinteger, ElementDeclaration):
        literal = "C50"
        schema = "http://portal.zdrav/_layouts/projects/dd/myXSD/2008-07-16T06:56:43"
        def __init__(self, **kw):
            kw["pname"] = ("http://portal.zdrav/_layouts/projects/dd/myXSD/2008-07-16T06:56:43","C50")
            kw["aname"] = "_C50"
            class IHolder(int): typecode=self
            kw["pyclass"] = IHolder
            IHolder.__name__ = "_C50_immutable_holder"
            ZSI.TCnumbers.Iinteger.__init__(self, **kw)

    class C50_C58_Dec(ZSI.TCnumbers.Iinteger, ElementDeclaration):
        literal = "C50-C58"
        schema = "http://portal.zdrav/_layouts/projects/dd/myXSD/2008-07-16T06:56:43"
        def __init__(self, **kw):
            kw["pname"] = ("http://portal.zdrav/_layouts/projects/dd/myXSD/2008-07-16T06:56:43","C50-C58")
            kw["aname"] = "_C50_C58"
            class IHolder(int): typecode=self
            kw["pyclass"] = IHolder
            IHolder.__name__ = "_C50_C58_immutable_holder"
            ZSI.TCnumbers.Iinteger.__init__(self, **kw)

    class C61_Dec(ZSI.TCnumbers.Iinteger, ElementDeclaration):
        literal = "C61"
        schema = "http://portal.zdrav/_layouts/projects/dd/myXSD/2008-07-16T06:56:43"
        def __init__(self, **kw):
            kw["pname"] = ("http://portal.zdrav/_layouts/projects/dd/myXSD/2008-07-16T06:56:43","C61")
            kw["aname"] = "_C61"
            class IHolder(int): typecode=self
            kw["pyclass"] = IHolder
            IHolder.__name__ = "_C61_immutable_holder"
            ZSI.TCnumbers.Iinteger.__init__(self, **kw)

    class C81_Dec(ZSI.TCnumbers.Iinteger, ElementDeclaration):
        literal = "C81"
        schema = "http://portal.zdrav/_layouts/projects/dd/myXSD/2008-07-16T06:56:43"
        def __init__(self, **kw):
            kw["pname"] = ("http://portal.zdrav/_layouts/projects/dd/myXSD/2008-07-16T06:56:43","C81")
            kw["aname"] = "_C81"
            class IHolder(int): typecode=self
            kw["pyclass"] = IHolder
            IHolder.__name__ = "_C81_immutable_holder"
            ZSI.TCnumbers.Iinteger.__init__(self, **kw)

    class D50_D64_Dec(ZSI.TCnumbers.Iinteger, ElementDeclaration):
        literal = "D50-D64"
        schema = "http://portal.zdrav/_layouts/projects/dd/myXSD/2008-07-16T06:56:43"
        def __init__(self, **kw):
            kw["pname"] = ("http://portal.zdrav/_layouts/projects/dd/myXSD/2008-07-16T06:56:43","D50-D64")
            kw["aname"] = "_D50_D64"
            class IHolder(int): typecode=self
            kw["pyclass"] = IHolder
            IHolder.__name__ = "_D50_D64_immutable_holder"
            ZSI.TCnumbers.Iinteger.__init__(self, **kw)

    class E10_E14_Dec(ZSI.TCnumbers.Iinteger, ElementDeclaration):
        literal = "E10-E14"
        schema = "http://portal.zdrav/_layouts/projects/dd/myXSD/2008-07-16T06:56:43"
        def __init__(self, **kw):
            kw["pname"] = ("http://portal.zdrav/_layouts/projects/dd/myXSD/2008-07-16T06:56:43","E10-E14")
            kw["aname"] = "_E10_E14"
            class IHolder(int): typecode=self
            kw["pyclass"] = IHolder
            IHolder.__name__ = "_E10_E14_immutable_holder"
            ZSI.TCnumbers.Iinteger.__init__(self, **kw)

    class E66_Dec(ZSI.TCnumbers.Iinteger, ElementDeclaration):
        literal = "E66"
        schema = "http://portal.zdrav/_layouts/projects/dd/myXSD/2008-07-16T06:56:43"
        def __init__(self, **kw):
            kw["pname"] = ("http://portal.zdrav/_layouts/projects/dd/myXSD/2008-07-16T06:56:43","E66")
            kw["aname"] = "_E66"
            class IHolder(int): typecode=self
            kw["pyclass"] = IHolder
            IHolder.__name__ = "_E66_immutable_holder"
            ZSI.TCnumbers.Iinteger.__init__(self, **kw)

    class E78_Dec(ZSI.TCnumbers.Iinteger, ElementDeclaration):
        literal = "E78"
        schema = "http://portal.zdrav/_layouts/projects/dd/myXSD/2008-07-16T06:56:43"
        def __init__(self, **kw):
            kw["pname"] = ("http://portal.zdrav/_layouts/projects/dd/myXSD/2008-07-16T06:56:43","E78")
            kw["aname"] = "_E78"
            class IHolder(int): typecode=self
            kw["pyclass"] = IHolder
            IHolder.__name__ = "_E78_immutable_holder"
            ZSI.TCnumbers.Iinteger.__init__(self, **kw)

    class I10_I15_Dec(ZSI.TCnumbers.Iinteger, ElementDeclaration):
        literal = "I10-I15"
        schema = "http://portal.zdrav/_layouts/projects/dd/myXSD/2008-07-16T06:56:43"
        def __init__(self, **kw):
            kw["pname"] = ("http://portal.zdrav/_layouts/projects/dd/myXSD/2008-07-16T06:56:43","I10-I15")
            kw["aname"] = "_I10_I15"
            class IHolder(int): typecode=self
            kw["pyclass"] = IHolder
            IHolder.__name__ = "_I10_I15_immutable_holder"
            ZSI.TCnumbers.Iinteger.__init__(self, **kw)

    class I20_I25_Dec(ZSI.TCnumbers.Iinteger, ElementDeclaration):
        literal = "I20-I25"
        schema = "http://portal.zdrav/_layouts/projects/dd/myXSD/2008-07-16T06:56:43"
        def __init__(self, **kw):
            kw["pname"] = ("http://portal.zdrav/_layouts/projects/dd/myXSD/2008-07-16T06:56:43","I20-I25")
            kw["aname"] = "_I20_I25"
            class IHolder(int): typecode=self
            kw["pyclass"] = IHolder
            IHolder.__name__ = "_I20_I25_immutable_holder"
            ZSI.TCnumbers.Iinteger.__init__(self, **kw)

    class R73_Dec(ZSI.TCnumbers.Iinteger, ElementDeclaration):
        literal = "R73"
        schema = "http://portal.zdrav/_layouts/projects/dd/myXSD/2008-07-16T06:56:43"
        def __init__(self, **kw):
            kw["pname"] = ("http://portal.zdrav/_layouts/projects/dd/myXSD/2008-07-16T06:56:43","R73")
            kw["aname"] = "_R73"
            class IHolder(int): typecode=self
            kw["pyclass"] = IHolder
            IHolder.__name__ = "_R73_immutable_holder"
            ZSI.TCnumbers.Iinteger.__init__(self, **kw)

    class R91_Dec(ZSI.TCnumbers.Iinteger, ElementDeclaration):
        literal = "R91"
        schema = "http://portal.zdrav/_layouts/projects/dd/myXSD/2008-07-16T06:56:43"
        def __init__(self, **kw):
            kw["pname"] = ("http://portal.zdrav/_layouts/projects/dd/myXSD/2008-07-16T06:56:43","R91")
            kw["aname"] = "_R91"
            class IHolder(int): typecode=self
            kw["pyclass"] = IHolder
            IHolder.__name__ = "_R91_immutable_holder"
            ZSI.TCnumbers.Iinteger.__init__(self, **kw)

    class R92_Dec(ZSI.TCnumbers.Iinteger, ElementDeclaration):
        literal = "R92"
        schema = "http://portal.zdrav/_layouts/projects/dd/myXSD/2008-07-16T06:56:43"
        def __init__(self, **kw):
            kw["pname"] = ("http://portal.zdrav/_layouts/projects/dd/myXSD/2008-07-16T06:56:43","R92")
            kw["aname"] = "_R92"
            class IHolder(int): typecode=self
            kw["pyclass"] = IHolder
            IHolder.__name__ = "_R92_immutable_holder"
            ZSI.TCnumbers.Iinteger.__init__(self, **kw)

    class R94_3_Dec(ZSI.TCnumbers.Iinteger, ElementDeclaration):
        literal = "R94.3"
        schema = "http://portal.zdrav/_layouts/projects/dd/myXSD/2008-07-16T06:56:43"
        def __init__(self, **kw):
            kw["pname"] = ("http://portal.zdrav/_layouts/projects/dd/myXSD/2008-07-16T06:56:43","R94.3")
            kw["aname"] = "_R94_3"
            class IHolder(int): typecode=self
            kw["pyclass"] = IHolder
            IHolder.__name__ = "_R94_3_immutable_holder"
            ZSI.TCnumbers.Iinteger.__init__(self, **kw)

# end class ns0 (tns: http://portal.zdrav/_layouts/projects/dd/myXSD/2008-07-16T06:56:43)
