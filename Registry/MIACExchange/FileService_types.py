##################################################
# file: FileService_types.py
#
# schema types generated by "ZSI.generate.wsdl2python.WriteServiceModule"
#    C:\pydev\Python25\wsdl2py.bat -s http://172.24.61.2:8000/StattalonFileService.svc?wsdl
#
##################################################

import ZSI
import ZSI.TCcompound
from ZSI.schema import ElementDeclaration, TypeDefinition, GTD

##############################
# targetNamespace
# http://tempuri.org/
##############################

class empuri_org:
    targetNamespace = "http://tempuri.org/"

    class ServiceReady(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ServiceReady"
        schema = "http://tempuri.org/"
        def __init__(self, **kw):
            ns = empuri_org.ServiceReady.schema
            TClist = []
            kw["pname"] = ("http://tempuri.org/","ServiceReady")
            kw["aname"] = "ServiceReady"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "ServiceReady_Holder"
            self.pyclass = Holder

    class ServiceReadyResponse(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ServiceReadyResponse"
        schema = "http://tempuri.org/"
        def __init__(self, **kw):
            ns = empuri_org.ServiceReadyResponse.schema
            TClist = [ZSI.TC.Boolean(pname=(ns,"ServiceReadyResult"), aname="ServiceReadyResult", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://tempuri.org/","ServiceReadyResponse")
            kw["aname"] = "ServiceReadyResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self.ServiceReadyResult = None
                    return
            Holder.__name__ = "ServiceReadyResponse_Holder"
            self.pyclass = Holder

    class Testing(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "Testing"
        schema = "http://tempuri.org/"
        def __init__(self, **kw):
            ns = empuri_org.Testing.schema
            TClist = [ZSI.TC.String(pname=(ns,"str"), aname="str", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://tempuri.org/","Testing")
            kw["aname"] = "Testing"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self.str = None
                    return
            Holder.__name__ = "Testing_Holder"
            self.pyclass = Holder

    class TestingResponse(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "TestingResponse"
        schema = "http://tempuri.org/"
        def __init__(self, **kw):
            ns = empuri_org.TestingResponse.schema
            TClist = [ZSI.TC.String(pname=(ns,"TestingResult"), aname="TestingResult", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://tempuri.org/","TestingResponse")
            kw["aname"] = "TestingResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self.TestingResult = None
                    return
            Holder.__name__ = "TestingResponse_Holder"
            self.pyclass = Holder

    class UploadFileData(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "UploadFileData"
        schema = "http://tempuri.org/"
        def __init__(self, **kw):
            ns = empuri_org.UploadFileData.schema
            TClist = [GTD("http://schemas.microsoft.com/Message","StreamBody",lazy=False)(pname=(ns,"File"), aname="File", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://tempuri.org/","UploadFileData")
            kw["aname"] = "UploadFileData"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self.File = None
                    return
            Holder.__name__ = "UploadFileData_Holder"
            self.pyclass = Holder

    class Compressed(ZSI.TC.Boolean, ElementDeclaration):
        literal = "Compressed"
        schema = "http://tempuri.org/"
        def __init__(self, **kw):
            kw["pname"] = ("http://tempuri.org/","Compressed")
            kw["aname"] = "Compressed"
            class IHolder(int): typecode=self
            kw["pyclass"] = IHolder
            IHolder.__name__ = "Compressed_immutable_holder"
            ZSI.TC.Boolean.__init__(self, **kw)

    class FileName(ZSI.TC.String, ElementDeclaration):
        literal = "FileName"
        schema = "http://tempuri.org/"
        def __init__(self, **kw):
            kw["pname"] = ("http://tempuri.org/","FileName")
            kw["aname"] = "FileName"
##green            class IHolder(str): typecode=self
            class IHolder(unicode): typecode=self
            kw["pyclass"] = IHolder
            IHolder.__name__ = "FileName_immutable_holder"
            ZSI.TC.String.__init__(self, **kw)

    class PostBoxName(ZSI.TC.String, ElementDeclaration):
        literal = "PostBoxName"
        schema = "http://tempuri.org/"
        def __init__(self, **kw):
            kw["pname"] = ("http://tempuri.org/","PostBoxName")
            kw["aname"] = "PostBoxName"
#green            class IHolder(str): typecode=self
            class IHolder(unicode): typecode=self
            kw["pyclass"] = IHolder
            IHolder.__name__ = "PostBoxName_immutable_holder"
            ZSI.TC.String.__init__(self, **kw)

    class Signed(ZSI.TC.Boolean, ElementDeclaration):
        literal = "Signed"
        schema = "http://tempuri.org/"
        def __init__(self, **kw):
            kw["pname"] = ("http://tempuri.org/","Signed")
            kw["aname"] = "Signed"
            class IHolder(int): typecode=self
            kw["pyclass"] = IHolder
            IHolder.__name__ = "Signed_immutable_holder"
            ZSI.TC.Boolean.__init__(self, **kw)

# end class empuri_org (tns: http://tempuri.org/)

##############################
# targetNamespace
# http://tempuri.org/Imports
##############################

class empuri_org_Imports:
    targetNamespace = "http://tempuri.org/Imports"

# end class empuri_org_Imports (tns: http://tempuri.org/Imports)

##############################
# targetNamespace
# http://schemas.microsoft.com/Message
##############################

class schemas_microsoft_com_Message:
    targetNamespace = "http://schemas.microsoft.com/Message"

    class StreamBody_(ZSI.TC.Base64String, TypeDefinition):
        schema = "http://schemas.microsoft.com/Message"
        type = (schema, "StreamBody")
        def __init__(self, pname, **kw):
            ZSI.TC.Base64String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

# end class schemas_microsoft_com_Message (tns: http://schemas.microsoft.com/Message)

##############################
# targetNamespace
# http://schemas.microsoft.com/2003/10/Serialization/
##############################

class schemas_microsoft_com_2003_10_Serialization:
    targetNamespace = "http://schemas.microsoft.com/2003/10/Serialization/"

    class char_(ZSI.TCnumbers.Iint, TypeDefinition):
        schema = "http://schemas.microsoft.com/2003/10/Serialization/"
        type = (schema, "char")
        def __init__(self, pname, **kw):
            ZSI.TCnumbers.Iint.__init__(self, pname, pyclass=None, **kw)
            class Holder(int):
                typecode = self
            self.pyclass = Holder

    class duration_(ZSI.TCtimes.Duration, TypeDefinition):
        schema = "http://schemas.microsoft.com/2003/10/Serialization/"
        type = (schema, "duration")
        def __init__(self, pname, **kw):
            ZSI.TCtimes.Duration.__init__(self, pname, pyclass=None, **kw)
            class Holder(tuple):
                typecode = self
            self.pyclass = Holder

    class guid_(ZSI.TC.String, TypeDefinition):
        schema = "http://schemas.microsoft.com/2003/10/Serialization/"
        type = (schema, "guid")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class anyType(ZSI.TC.AnyType, ElementDeclaration):
        literal = "anyType"
        schema = "http://schemas.microsoft.com/2003/10/Serialization/"
        def __init__(self, **kw):
            kw["pname"] = ("http://schemas.microsoft.com/2003/10/Serialization/","anyType")
            kw["aname"] = "anyType"
            ZSI.TC.AnyType.__init__(self, **kw)

    class anyURI(ZSI.TC.URI, ElementDeclaration):
        literal = "anyURI"
        schema = "http://schemas.microsoft.com/2003/10/Serialization/"
        def __init__(self, **kw):
            kw["pname"] = ("http://schemas.microsoft.com/2003/10/Serialization/","anyURI")
            kw["aname"] = "anyURI"
            class IHolder(str): typecode=self
            kw["pyclass"] = IHolder
            IHolder.__name__ = "anyURI_immutable_holder"
            ZSI.TC.URI.__init__(self, **kw)

    class base64Binary(ZSI.TC.Base64String, ElementDeclaration):
        literal = "base64Binary"
        schema = "http://schemas.microsoft.com/2003/10/Serialization/"
        def __init__(self, **kw):
            kw["pname"] = ("http://schemas.microsoft.com/2003/10/Serialization/","base64Binary")
            kw["aname"] = "base64Binary"
            class IHolder(str): typecode=self
            kw["pyclass"] = IHolder
            IHolder.__name__ = "base64Binary_immutable_holder"
            ZSI.TC.Base64String.__init__(self, **kw)

    class boolean(ZSI.TC.Boolean, ElementDeclaration):
        literal = "boolean"
        schema = "http://schemas.microsoft.com/2003/10/Serialization/"
        def __init__(self, **kw):
            kw["pname"] = ("http://schemas.microsoft.com/2003/10/Serialization/","boolean")
            kw["aname"] = "boolean"
            class IHolder(int): typecode=self
            kw["pyclass"] = IHolder
            IHolder.__name__ = "boolean_immutable_holder"
            ZSI.TC.Boolean.__init__(self, **kw)

    class byte(ZSI.TCnumbers.Ibyte, ElementDeclaration):
        literal = "byte"
        schema = "http://schemas.microsoft.com/2003/10/Serialization/"
        def __init__(self, **kw):
            kw["pname"] = ("http://schemas.microsoft.com/2003/10/Serialization/","byte")
            kw["aname"] = "byte"
            class IHolder(str): typecode=self
            kw["pyclass"] = IHolder
            IHolder.__name__ = "byte_immutable_holder"
            ZSI.TCnumbers.Ibyte.__init__(self, **kw)

    class dateTime(ZSI.TCtimes.gDateTime, ElementDeclaration):
        literal = "dateTime"
        schema = "http://schemas.microsoft.com/2003/10/Serialization/"
        def __init__(self, **kw):
            kw["pname"] = ("http://schemas.microsoft.com/2003/10/Serialization/","dateTime")
            kw["aname"] = "dateTime"
            class IHolder(tuple): typecode=self
            kw["pyclass"] = IHolder
            IHolder.__name__ = "dateTime_immutable_holder"
            ZSI.TCtimes.gDateTime.__init__(self, **kw)

    class decimal(ZSI.TC.Decimal, ElementDeclaration):
        literal = "decimal"
        schema = "http://schemas.microsoft.com/2003/10/Serialization/"
        def __init__(self, **kw):
            kw["pname"] = ("http://schemas.microsoft.com/2003/10/Serialization/","decimal")
            kw["aname"] = "decimal"
            class IHolder(float): typecode=self
            kw["pyclass"] = IHolder
            IHolder.__name__ = "decimal_immutable_holder"
            ZSI.TC.Decimal.__init__(self, **kw)

    class double(ZSI.TCnumbers.FPdouble, ElementDeclaration):
        literal = "double"
        schema = "http://schemas.microsoft.com/2003/10/Serialization/"
        def __init__(self, **kw):
            kw["pname"] = ("http://schemas.microsoft.com/2003/10/Serialization/","double")
            kw["aname"] = "double"
            class IHolder(float): typecode=self
            kw["pyclass"] = IHolder
            IHolder.__name__ = "double_immutable_holder"
            ZSI.TCnumbers.FPdouble.__init__(self, **kw)

    class float(ZSI.TCnumbers.FPfloat, ElementDeclaration):
        literal = "float"
        schema = "http://schemas.microsoft.com/2003/10/Serialization/"
        def __init__(self, **kw):
            kw["pname"] = ("http://schemas.microsoft.com/2003/10/Serialization/","float")
            kw["aname"] = "float"
            class IHolder(float): typecode=self
            kw["pyclass"] = IHolder
            IHolder.__name__ = "float_immutable_holder"
            ZSI.TCnumbers.FPfloat.__init__(self, **kw)

    class int(ZSI.TCnumbers.Iint, ElementDeclaration):
        literal = "int"
        schema = "http://schemas.microsoft.com/2003/10/Serialization/"
        def __init__(self, **kw):
            kw["pname"] = ("http://schemas.microsoft.com/2003/10/Serialization/","int")
            kw["aname"] = "int"
            class IHolder(int): typecode=self
            kw["pyclass"] = IHolder
            IHolder.__name__ = "int_immutable_holder"
            ZSI.TCnumbers.Iint.__init__(self, **kw)

    class long(ZSI.TCnumbers.Ilong, ElementDeclaration):
        literal = "long"
        schema = "http://schemas.microsoft.com/2003/10/Serialization/"
        def __init__(self, **kw):
            kw["pname"] = ("http://schemas.microsoft.com/2003/10/Serialization/","long")
            kw["aname"] = "long"
            class IHolder(int): typecode=self
            kw["pyclass"] = IHolder
            IHolder.__name__ = "long_immutable_holder"
            ZSI.TCnumbers.Ilong.__init__(self, **kw)

    class QName(ZSI.TC.QName, ElementDeclaration):
        literal = "QName"
        schema = "http://schemas.microsoft.com/2003/10/Serialization/"
        def __init__(self, **kw):
            kw["pname"] = ("http://schemas.microsoft.com/2003/10/Serialization/","QName")
            kw["aname"] = "QName"
            class IHolder(tuple): typecode=self
            kw["pyclass"] = IHolder
            IHolder.__name__ = "QName_immutable_holder"
            ZSI.TC.QName.__init__(self, **kw)

    class short(ZSI.TCnumbers.Ishort, ElementDeclaration):
        literal = "short"
        schema = "http://schemas.microsoft.com/2003/10/Serialization/"
        def __init__(self, **kw):
            kw["pname"] = ("http://schemas.microsoft.com/2003/10/Serialization/","short")
            kw["aname"] = "short"
            class IHolder(int): typecode=self
            kw["pyclass"] = IHolder
            IHolder.__name__ = "short_immutable_holder"
            ZSI.TCnumbers.Ishort.__init__(self, **kw)

    class string(ZSI.TC.String, ElementDeclaration):
        literal = "string"
        schema = "http://schemas.microsoft.com/2003/10/Serialization/"
        def __init__(self, **kw):
            kw["pname"] = ("http://schemas.microsoft.com/2003/10/Serialization/","string")
            kw["aname"] = "string"
            class IHolder(str): typecode=self
            kw["pyclass"] = IHolder
            IHolder.__name__ = "string_immutable_holder"
            ZSI.TC.String.__init__(self, **kw)

    class unsignedByte(ZSI.TCnumbers.IunsignedByte, ElementDeclaration):
        literal = "unsignedByte"
        schema = "http://schemas.microsoft.com/2003/10/Serialization/"
        def __init__(self, **kw):
            kw["pname"] = ("http://schemas.microsoft.com/2003/10/Serialization/","unsignedByte")
            kw["aname"] = "unsignedByte"
            class IHolder(str): typecode=self
            kw["pyclass"] = IHolder
            IHolder.__name__ = "unsignedByte_immutable_holder"
            ZSI.TCnumbers.IunsignedByte.__init__(self, **kw)

    class unsignedInt(ZSI.TCnumbers.IunsignedInt, ElementDeclaration):
        literal = "unsignedInt"
        schema = "http://schemas.microsoft.com/2003/10/Serialization/"
        def __init__(self, **kw):
            kw["pname"] = ("http://schemas.microsoft.com/2003/10/Serialization/","unsignedInt")
            kw["aname"] = "unsignedInt"
            class IHolder(str): typecode=self
            kw["pyclass"] = IHolder
            IHolder.__name__ = "unsignedInt_immutable_holder"
            ZSI.TCnumbers.IunsignedInt.__init__(self, **kw)

    class unsignedLong(ZSI.TCnumbers.IunsignedLong, ElementDeclaration):
        literal = "unsignedLong"
        schema = "http://schemas.microsoft.com/2003/10/Serialization/"
        def __init__(self, **kw):
            kw["pname"] = ("http://schemas.microsoft.com/2003/10/Serialization/","unsignedLong")
            kw["aname"] = "unsignedLong"
            class IHolder(str): typecode=self
            kw["pyclass"] = IHolder
            IHolder.__name__ = "unsignedLong_immutable_holder"
            ZSI.TCnumbers.IunsignedLong.__init__(self, **kw)

    class unsignedShort(ZSI.TCnumbers.IunsignedShort, ElementDeclaration):
        literal = "unsignedShort"
        schema = "http://schemas.microsoft.com/2003/10/Serialization/"
        def __init__(self, **kw):
            kw["pname"] = ("http://schemas.microsoft.com/2003/10/Serialization/","unsignedShort")
            kw["aname"] = "unsignedShort"
            class IHolder(str): typecode=self
            kw["pyclass"] = IHolder
            IHolder.__name__ = "unsignedShort_immutable_holder"
            ZSI.TCnumbers.IunsignedShort.__init__(self, **kw)

    class char(ElementDeclaration):
        literal = "char"
        schema = "http://schemas.microsoft.com/2003/10/Serialization/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://schemas.microsoft.com/2003/10/Serialization/","char")
            kw["aname"] = "char"
            if schemas_microsoft_com_2003_10_Serialization.char_ not in schemas_microsoft_com_2003_10_Serialization.char.__bases__:
                bases = list(schemas_microsoft_com_2003_10_Serialization.char.__bases__)
                bases.insert(0, schemas_microsoft_com_2003_10_Serialization.char_)
                schemas_microsoft_com_2003_10_Serialization.char.__bases__ = tuple(bases)

            schemas_microsoft_com_2003_10_Serialization.char_.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "char_Holder"

    class duration(ElementDeclaration):
        literal = "duration"
        schema = "http://schemas.microsoft.com/2003/10/Serialization/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://schemas.microsoft.com/2003/10/Serialization/","duration")
            kw["aname"] = "duration"
            if schemas_microsoft_com_2003_10_Serialization.duration_ not in schemas_microsoft_com_2003_10_Serialization.duration.__bases__:
                bases = list(schemas_microsoft_com_2003_10_Serialization.duration.__bases__)
                bases.insert(0, schemas_microsoft_com_2003_10_Serialization.duration_)
                schemas_microsoft_com_2003_10_Serialization.duration.__bases__ = tuple(bases)

            schemas_microsoft_com_2003_10_Serialization.duration_.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "duration_Holder"

    class guid(ElementDeclaration):
        literal = "guid"
        schema = "http://schemas.microsoft.com/2003/10/Serialization/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://schemas.microsoft.com/2003/10/Serialization/","guid")
            kw["aname"] = "guid"
            if schemas_microsoft_com_2003_10_Serialization.guid_ not in schemas_microsoft_com_2003_10_Serialization.guid.__bases__:
                bases = list(schemas_microsoft_com_2003_10_Serialization.guid.__bases__)
                bases.insert(0, schemas_microsoft_com_2003_10_Serialization.guid_)
                schemas_microsoft_com_2003_10_Serialization.guid.__bases__ = tuple(bases)

            schemas_microsoft_com_2003_10_Serialization.guid_.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "guid_Holder"

# end class schemas_microsoft_com_2003_10_Serialization (tns: http://schemas.microsoft.com/2003/10/Serialization/)
