##################################################
# file: EMSRNExchange_types.py
#
# schema types generated by "ZSI.generate.wsdl2python.WriteServiceModule"
#    C:\pydev\Python25\wsdl2py.bat -b https://webservice.ktsz.spb.ru:4443/EMSRNExchange.asmx?WSDL
#
##################################################

import ZSI
import ZSI.TCcompound
from ZSI.schema import LocalElementDeclaration, ElementDeclaration
from ZSI.generate.pyclass import pyclass_type

##############################
# targetNamespace
# http://webservice.ktsz.spb.ru/
##############################

class ns0:
    targetNamespace = "http://webservice.ktsz.spb.ru/"

    class MessageList_XML_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "MessageList_XML"
        schema = "http://webservice.ktsz.spb.ru/"
        def __init__(self, **kw):
            ns = ns0.MessageList_XML_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"User"), aname="_User", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Password"), aname="_Password", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://webservice.ktsz.spb.ru/","MessageList_XML")
            kw["aname"] = "_MessageList_XML"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._User = None
                    self._Password = None
                    return
            Holder.__name__ = "MessageList_XML_Holder"
            self.pyclass = Holder

    class MessageList_XMLResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "MessageList_XMLResponse"
        schema = "http://webservice.ktsz.spb.ru/"
        def __init__(self, **kw):
            ns = ns0.MessageList_XMLResponse_Dec.schema
            TClist = [self.__class__.MessageList_XMLResult_Dec(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://webservice.ktsz.spb.ru/","MessageList_XMLResponse")
            kw["aname"] = "_MessageList_XMLResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._MessageList_XMLResult = None
                    return
            Holder.__name__ = "MessageList_XMLResponse_Holder"
            self.pyclass = Holder


        class MessageList_XMLResult_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "MessageList_XMLResult"
            schema = "http://webservice.ktsz.spb.ru/"
            def __init__(self, **kw):
                ns = ns0.MessageList_XMLResponse_Dec.MessageList_XMLResult_Dec.schema
                TClist = [ZSI.TC.AnyElement(aname="_any", minOccurs=1, maxOccurs=1, nillable=False, processContents="strict")]
                kw["pname"] = ("http://webservice.ktsz.spb.ru/","MessageList_XMLResult")
                kw["aname"] = "_MessageList_XMLResult"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._any = None
                        return
                Holder.__name__ = "MessageList_XMLResult_Holder"
                self.pyclass = Holder




    class Message_XML_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "Message_XML"
        schema = "http://webservice.ktsz.spb.ru/"
        def __init__(self, **kw):
            ns = ns0.Message_XML_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"User"), aname="_User", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Password"), aname="_Password", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"MessageID"), aname="_MessageID", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://webservice.ktsz.spb.ru/","Message_XML")
            kw["aname"] = "_Message_XML"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._User = None
                    self._Password = None
                    self._MessageID = None
                    return
            Holder.__name__ = "Message_XML_Holder"
            self.pyclass = Holder

    class Message_XMLResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "Message_XMLResponse"
        schema = "http://webservice.ktsz.spb.ru/"
        def __init__(self, **kw):
            ns = ns0.Message_XMLResponse_Dec.schema
            TClist = [self.__class__.Message_XMLResult_Dec(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://webservice.ktsz.spb.ru/","Message_XMLResponse")
            kw["aname"] = "_Message_XMLResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Message_XMLResult = None
                    return
            Holder.__name__ = "Message_XMLResponse_Holder"
            self.pyclass = Holder


        class Message_XMLResult_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "Message_XMLResult"
            schema = "http://webservice.ktsz.spb.ru/"
            def __init__(self, **kw):
                ns = ns0.Message_XMLResponse_Dec.Message_XMLResult_Dec.schema
                TClist = [ZSI.TC.AnyElement(aname="_any", minOccurs=1, maxOccurs=1, nillable=False, processContents="strict")]
                kw["pname"] = ("http://webservice.ktsz.spb.ru/","Message_XMLResult")
                kw["aname"] = "_Message_XMLResult"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._any = None
                        return
                Holder.__name__ = "Message_XMLResult_Holder"
                self.pyclass = Holder




    class MessageObtained_XML_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "MessageObtained_XML"
        schema = "http://webservice.ktsz.spb.ru/"
        def __init__(self, **kw):
            ns = ns0.MessageObtained_XML_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"User"), aname="_User", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Password"), aname="_Password", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"MessageID"), aname="_MessageID", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://webservice.ktsz.spb.ru/","MessageObtained_XML")
            kw["aname"] = "_MessageObtained_XML"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._User = None
                    self._Password = None
                    self._MessageID = None
                    return
            Holder.__name__ = "MessageObtained_XML_Holder"
            self.pyclass = Holder

    class MessageObtained_XMLResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "MessageObtained_XMLResponse"
        schema = "http://webservice.ktsz.spb.ru/"
        def __init__(self, **kw):
            ns = ns0.MessageObtained_XMLResponse_Dec.schema
            TClist = [self.__class__.MessageObtained_XMLResult_Dec(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://webservice.ktsz.spb.ru/","MessageObtained_XMLResponse")
            kw["aname"] = "_MessageObtained_XMLResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._MessageObtained_XMLResult = None
                    return
            Holder.__name__ = "MessageObtained_XMLResponse_Holder"
            self.pyclass = Holder


        class MessageObtained_XMLResult_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "MessageObtained_XMLResult"
            schema = "http://webservice.ktsz.spb.ru/"
            def __init__(self, **kw):
                ns = ns0.MessageObtained_XMLResponse_Dec.MessageObtained_XMLResult_Dec.schema
                TClist = [ZSI.TC.AnyElement(aname="_any", minOccurs=1, maxOccurs=1, nillable=False, processContents="strict")]
                kw["pname"] = ("http://webservice.ktsz.spb.ru/","MessageObtained_XMLResult")
                kw["aname"] = "_MessageObtained_XMLResult"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._any = None
                        return
                Holder.__name__ = "MessageObtained_XMLResult_Holder"
                self.pyclass = Holder




    class MessageDeclined_XML_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "MessageDeclined_XML"
        schema = "http://webservice.ktsz.spb.ru/"
        def __init__(self, **kw):
            ns = ns0.MessageDeclined_XML_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"User"), aname="_User", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Password"), aname="_Password", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"MessageID"), aname="_MessageID", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Reason"), aname="_Reason", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://webservice.ktsz.spb.ru/","MessageDeclined_XML")
            kw["aname"] = "_MessageDeclined_XML"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._User = None
                    self._Password = None
                    self._MessageID = None
                    self._Reason = None
                    return
            Holder.__name__ = "MessageDeclined_XML_Holder"
            self.pyclass = Holder

    class MessageDeclined_XMLResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "MessageDeclined_XMLResponse"
        schema = "http://webservice.ktsz.spb.ru/"
        def __init__(self, **kw):
            ns = ns0.MessageDeclined_XMLResponse_Dec.schema
            TClist = [self.__class__.MessageDeclined_XMLResult_Dec(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://webservice.ktsz.spb.ru/","MessageDeclined_XMLResponse")
            kw["aname"] = "_MessageDeclined_XMLResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._MessageDeclined_XMLResult = None
                    return
            Holder.__name__ = "MessageDeclined_XMLResponse_Holder"
            self.pyclass = Holder


        class MessageDeclined_XMLResult_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "MessageDeclined_XMLResult"
            schema = "http://webservice.ktsz.spb.ru/"
            def __init__(self, **kw):
                ns = ns0.MessageDeclined_XMLResponse_Dec.MessageDeclined_XMLResult_Dec.schema
                TClist = [ZSI.TC.AnyElement(aname="_any", minOccurs=1, maxOccurs=1, nillable=False, processContents="strict")]
                kw["pname"] = ("http://webservice.ktsz.spb.ru/","MessageDeclined_XMLResult")
                kw["aname"] = "_MessageDeclined_XMLResult"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._any = None
                        return
                Holder.__name__ = "MessageDeclined_XMLResult_Holder"
                self.pyclass = Holder




    class PersonBenefitCategories_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "PersonBenefitCategories"
        schema = "http://webservice.ktsz.spb.ru/"
        def __init__(self, **kw):
            ns = ns0.PersonBenefitCategories_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"User"), aname="_User", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Password"), aname="_Password", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"LastName"), aname="_LastName", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Name"), aname="_Name", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"PatronymicName"), aname="_PatronymicName", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"SNILS"), aname="_SNILS", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://webservice.ktsz.spb.ru/","PersonBenefitCategories")
            kw["aname"] = "_PersonBenefitCategories"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._User = None
                    self._Password = None
                    self._LastName = None
                    self._Name = None
                    self._PatronymicName = None
                    self._SNILS = None
                    return
            Holder.__name__ = "PersonBenefitCategories_Holder"
            self.pyclass = Holder

    class PersonBenefitCategoriesResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "PersonBenefitCategoriesResponse"
        schema = "http://webservice.ktsz.spb.ru/"
        def __init__(self, **kw):
            ns = ns0.PersonBenefitCategoriesResponse_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"PersonBenefitCategoriesResult"), aname="_PersonBenefitCategoriesResult", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://webservice.ktsz.spb.ru/","PersonBenefitCategoriesResponse")
            kw["aname"] = "_PersonBenefitCategoriesResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._PersonBenefitCategoriesResult = None
                    return
            Holder.__name__ = "PersonBenefitCategoriesResponse_Holder"
            self.pyclass = Holder

# end class ns0 (tns: http://webservice.ktsz.spb.ru/)
