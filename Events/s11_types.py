##################################################
# file: s11_types.py
#
# schema types generated by "ZSI.generate.wsdl2python.WriteServiceModule"
#    wsdl2py.py -b wsdl.xml
#
##################################################

import ZSI
import ZSI.TCcompound
from ZSI.schema import ElementDeclaration, TypeDefinition, GTD
from ZSI.generate.pyclass import pyclass_type

##############################
# targetNamespace
# http://tempuri.org/
##############################

class ns0:
    targetNamespace = "http://tempuri.org/"

    class AgeUnit_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://tempuri.org/"
        type = (schema, "AgeUnit")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class AgeSpec_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://tempuri.org/"
        type = (schema, "AgeSpec")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.AgeSpec_Def.schema
            TClist = [GTD("http://tempuri.org/","AgeUnit",lazy=False)(pname=(ns,"unit"), aname="_unit", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"count"), aname="_count", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._unit = None
                    self._count = None
                    return
            Holder.__name__ = "AgeSpec_Holder"
            self.pyclass = Holder

    class AgeFilter_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://tempuri.org/"
        type = (schema, "AgeFilter")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.AgeFilter_Def.schema
            TClist = [GTD("http://tempuri.org/","AgeSpec",lazy=False)(pname=(ns,"from"), aname="_from", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://tempuri.org/","AgeSpec",lazy=False)(pname=(ns,"to"), aname="_to", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._from = None
                    self._to = None
                    return
            Holder.__name__ = "AgeFilter_Holder"
            self.pyclass = Holder

    class OrgStructureInfo_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://tempuri.org/"
        type = (schema, "OrgStructureInfo")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.OrgStructureInfo_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname=(ns,"id"), aname="_id", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"parentId"), aname="_parentId", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"name"), aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"address"), aname="_address", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"sexFilter"), aname="_sexFilter", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://tempuri.org/","AgeFilter",lazy=False)(pname=(ns,"ageFilter"), aname="_ageFilter", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._id = None
                    self._parentId = None
                    self._name = None
                    self._address = None
                    self._sexFilter = None
                    self._ageFilter = None
                    return
            Holder.__name__ = "OrgStructureInfo_Holder"
            self.pyclass = Holder

    class OrgStructureAddressInfo_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://tempuri.org/"
        type = (schema, "OrgStructureAddressInfo")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.OrgStructureAddressInfo_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname=(ns,"orgStructureId"), aname="_orgStructureId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"pointKLADR"), aname="_pointKLADR", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"streetKLADR"), aname="_streetKLADR", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"number"), aname="_number", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"corpus"), aname="_corpus", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"firstFlat"), aname="_firstFlat", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"lastFlat"), aname="_lastFlat", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._orgStructureId = None
                    self._pointKLADR = None
                    self._streetKLADR = None
                    self._number = None
                    self._corpus = None
                    self._firstFlat = None
                    self._lastFlat = None
                    return
            Holder.__name__ = "OrgStructureAddressInfo_Holder"
            self.pyclass = Holder

    class findOrgStructureByAddressInfo_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://tempuri.org/"
        type = (schema, "findOrgStructureByAddressInfo")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.findOrgStructureByAddressInfo_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"serverId"), aname="_serverId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"orgStructureId"), aname="_orgStructureId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._serverId = None
                    self._orgStructureId = None
                    return
            Holder.__name__ = "findOrgStructureByAddressInfo_Holder"
            self.pyclass = Holder

    class PersonInfo_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://tempuri.org/"
        type = (schema, "PersonInfo")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.PersonInfo_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname=(ns,"orgStructureId"), aname="_orgStructureId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"id"), aname="_id", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"code"), aname="_code", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"lastName"), aname="_lastName", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"firstName"), aname="_firstName", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"patrName"), aname="_patrName", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"office"), aname="_office", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"post"), aname="_post", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"speciality"), aname="_speciality", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"specialityRegionalCode"), aname="_specialityRegionalCode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"specialityOKSOCode"), aname="_specialityOKSOCode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"sexFilter"), aname="_sexFilter", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://tempuri.org/","AgeFilter",lazy=False)(pname=(ns,"ageFilter"), aname="_ageFilter", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._orgStructureId = None
                    self._id = None
                    self._code = None
                    self._lastName = None
                    self._firstName = None
                    self._patrName = None
                    self._office = None
                    self._post = None
                    self._speciality = None
                    self._specialityRegionalCode = None
                    self._specialityOKSOCode = None
                    self._sexFilter = None
                    self._ageFilter = None
                    return
            Holder.__name__ = "PersonInfo_Holder"
            self.pyclass = Holder

    class specialityNotationType_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://tempuri.org/"
        type = (schema, "specialityNotationType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class TicketsAvailabilityInfo_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://tempuri.org/"
        type = (schema, "TicketsAvailabilityInfo")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.TicketsAvailabilityInfo_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname=(ns,"personId"), aname="_personId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDate(pname=(ns,"date"), aname="_date", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"total"), aname="_total", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"free"), aname="_free", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"available"), aname="_available", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._personId = None
                    self._date = None
                    self._total = None
                    self._free = None
                    self._available = None
                    return
            Holder.__name__ = "TicketsAvailabilityInfo_Holder"
            self.pyclass = Holder

    class Ticket_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://tempuri.org/"
        type = (schema, "Ticket")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.Ticket_Def.schema
            TClist = [ZSI.TCtimes.gTime(pname=(ns,"time"), aname="_time", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"free"), aname="_free", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"available"), aname="_available", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._time = None
                    self._free = None
                    self._available = None
                    return
            Holder.__name__ = "Ticket_Holder"
            self.pyclass = Holder

    class AmbInfoEx_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://tempuri.org/"
        type = (schema, "AmbInfoEx")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.AmbInfoEx_Def.schema
            TClist = [ZSI.TCtimes.gTime(pname=(ns,"begTime"), aname="_begTime", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gTime(pname=(ns,"endTime"), aname="_endTime", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"office"), aname="_office", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"plan"), aname="_plan", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://tempuri.org/","Ticket",lazy=False)(pname=(ns,"tickets"), aname="_tickets", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"available"), aname="_available", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._begTime = None
                    self._endTime = None
                    self._office = None
                    self._plan = None
                    self._tickets = []
                    self._available = None
                    return
            Holder.__name__ = "AmbInfoEx_Holder"
            self.pyclass = Holder

    class PatientInfo_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://tempuri.org/"
        type = (schema, "PatientInfo")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.PatientInfo_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"lastName"), aname="_lastName", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"firstName"), aname="_firstName", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"patrName"), aname="_patrName", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDate(pname=(ns,"birthDate"), aname="_birthDate", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"sex"), aname="_sex", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._lastName = None
                    self._firstName = None
                    self._patrName = None
                    self._birthDate = None
                    self._sex = None
                    return
            Holder.__name__ = "PatientInfo_Holder"
            self.pyclass = Holder

    class PatientContactInfo_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://tempuri.org/"
        type = (schema, "PatientContactInfo")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.PatientContactInfo_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"type"), aname="_type", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"code"), aname="_code", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"contact"), aname="_contact", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"note"), aname="_note", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._type = None
                    self._code = None
                    self._contact = None
                    self._note = None
                    return
            Holder.__name__ = "PatientContactInfo_Holder"
            self.pyclass = Holder

    class PatientAddress_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://tempuri.org/"
        type = (schema, "PatientAddress")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.PatientAddress_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"pointKLADR"), aname="_pointKLADR", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"streetKLADR"), aname="_streetKLADR", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"number"), aname="_number", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"corpus"), aname="_corpus", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"flat"), aname="_flat", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"freeInput"), aname="_freeInput", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._pointKLADR = None
                    self._streetKLADR = None
                    self._number = None
                    self._corpus = None
                    self._flat = None
                    self._freeInput = None
                    return
            Holder.__name__ = "PatientAddress_Holder"
            self.pyclass = Holder

    class PatientOrgStructureInfo_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://tempuri.org/"
        type = (schema, "PatientOrgStructureInfo")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.PatientOrgStructureInfo_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname=(ns,"orgStructureId"), aname="_orgStructureId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"attached"), aname="_attached", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"matchRegAddress"), aname="_matchRegAddress", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"matchLocAddress"), aname="_matchLocAddress", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._orgStructureId = None
                    self._attached = None
                    self._matchRegAddress = None
                    self._matchLocAddress = None
                    return
            Holder.__name__ = "PatientOrgStructureInfo_Holder"
            self.pyclass = Holder

    class getPatientQueueInfo_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://tempuri.org/"
        type = (schema, "getPatientQueueInfo")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getPatientQueueInfo_Def.schema
            TClist = [ZSI.TCtimes.gDate(pname=(ns,"date"), aname="_date", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gTime(pname=(ns,"time"), aname="_time", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"index"), aname="_index", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"personId"), aname="_personId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"note"), aname="_note", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"queueId"), aname="_queueId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDate(pname=(ns,"enqueueDate"), aname="_enqueueDate", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gTime(pname=(ns,"enqueueTime"), aname="_enqueueTime", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"enqueuePersonId"), aname="_enqueuePersonId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._date = None
                    self._time = None
                    self._index = None
                    self._personId = None
                    self._note = None
                    self._queueId = None
                    self._enqueueDate = None
                    self._enqueueTime = None
                    self._enqueuePersonId = None
                    return
            Holder.__name__ = "getPatientQueueInfo_Holder"
            self.pyclass = Holder

    class statisticItem_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://tempuri.org/"
        type = (schema, "statisticItem")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.statisticItem_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname=(ns,"orgStructureId"), aname="_orgStructureId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"channel"), aname="_channel", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"queued"), aname="_queued", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"serviced"), aname="_serviced", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._orgStructureId = None
                    self._channel = None
                    self._queued = None
                    self._serviced = None
                    return
            Holder.__name__ = "statisticItem_Holder"
            self.pyclass = Holder

    class testInDoc_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "testInDoc"
        schema = "http://tempuri.org/"
        def __init__(self, **kw):
            ns = ns0.testInDoc_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"serverId"), aname="_serverId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://tempuri.org/","testInDoc")
            kw["aname"] = "_testInDoc"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._serverId = None
                    return
            Holder.__name__ = "testInDoc_Holder"
            self.pyclass = Holder

    class testOutDoc_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "testOutDoc"
        schema = "http://tempuri.org/"
        def __init__(self, **kw):
            ns = ns0.testOutDoc_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"string"), aname="_string", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://tempuri.org/","testOutDoc")
            kw["aname"] = "_testOutDoc"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._string = None
                    return
            Holder.__name__ = "testOutDoc_Holder"
            self.pyclass = Holder

    class organisationInfoInDoc_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "organisationInfoInDoc"
        schema = "http://tempuri.org/"
        def __init__(self, **kw):
            ns = ns0.organisationInfoInDoc_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"serverId"), aname="_serverId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://tempuri.org/","organisationInfoInDoc")
            kw["aname"] = "_organisationInfoInDoc"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._serverId = None
                    return
            Holder.__name__ = "organisationInfoInDoc_Holder"
            self.pyclass = Holder

    class organisationInfoOutDoc_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "organisationInfoOutDoc"
        schema = "http://tempuri.org/"
        def __init__(self, **kw):
            ns = ns0.organisationInfoOutDoc_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"fullName"), aname="_fullName", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"shortName"), aname="_shortName", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"address"), aname="_address", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"infisCode"), aname="_infisCode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://tempuri.org/","organisationInfoOutDoc")
            kw["aname"] = "_organisationInfoOutDoc"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._fullName = None
                    self._shortName = None
                    self._address = None
                    self._infisCode = None
                    return
            Holder.__name__ = "organisationInfoOutDoc_Holder"
            self.pyclass = Holder

    class getOrgStructuresInDoc_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getOrgStructuresInDoc"
        schema = "http://tempuri.org/"
        def __init__(self, **kw):
            ns = ns0.getOrgStructuresInDoc_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"serverId"), aname="_serverId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"parentId"), aname="_parentId", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"recursive"), aname="_recursive", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://tempuri.org/","getOrgStructuresInDoc")
            kw["aname"] = "_getOrgStructuresInDoc"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._serverId = None
                    self._parentId = None
                    self._recursive = None
                    return
            Holder.__name__ = "getOrgStructuresInDoc_Holder"
            self.pyclass = Holder

    class getOrgStructuresOutDoc_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getOrgStructuresOutDoc"
        schema = "http://tempuri.org/"
        def __init__(self, **kw):
            ns = ns0.getOrgStructuresOutDoc_Dec.schema
            TClist = [GTD("http://tempuri.org/","OrgStructureInfo",lazy=False)(pname=(ns,"list"), aname="_list", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://tempuri.org/","getOrgStructuresOutDoc")
            kw["aname"] = "_getOrgStructuresOutDoc"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._list = []
                    return
            Holder.__name__ = "getOrgStructuresOutDoc_Holder"
            self.pyclass = Holder

    class getAddressesInDoc_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getAddressesInDoc"
        schema = "http://tempuri.org/"
        def __init__(self, **kw):
            ns = ns0.getAddressesInDoc_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"serverId"), aname="_serverId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"orgStructureId"), aname="_orgStructureId", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"recursive"), aname="_recursive", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://tempuri.org/","getAddressesInDoc")
            kw["aname"] = "_getAddressesInDoc"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._serverId = None
                    self._orgStructureId = None
                    self._recursive = None
                    return
            Holder.__name__ = "getAddressesInDoc_Holder"
            self.pyclass = Holder

    class getAddressesOutDoc_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getAddressesOutDoc"
        schema = "http://tempuri.org/"
        def __init__(self, **kw):
            ns = ns0.getAddressesOutDoc_Dec.schema
            TClist = [GTD("http://tempuri.org/","OrgStructureAddressInfo",lazy=False)(pname=(ns,"list"), aname="_list", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://tempuri.org/","getAddressesOutDoc")
            kw["aname"] = "_getAddressesOutDoc"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._list = []
                    return
            Holder.__name__ = "getAddressesOutDoc_Holder"
            self.pyclass = Holder

    class findOrgStructureByAddressInDoc_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "findOrgStructureByAddressInDoc"
        schema = "http://tempuri.org/"
        def __init__(self, **kw):
            ns = ns0.findOrgStructureByAddressInDoc_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"serverId"), aname="_serverId", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"pointKLADR"), aname="_pointKLADR", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"streetKLADR"), aname="_streetKLADR", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"number"), aname="_number", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"corpus"), aname="_corpus", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"flat"), aname="_flat", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://tempuri.org/","findOrgStructureByAddressInDoc")
            kw["aname"] = "_findOrgStructureByAddressInDoc"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._serverId = None
                    self._pointKLADR = None
                    self._streetKLADR = None
                    self._number = None
                    self._corpus = None
                    self._flat = None
                    return
            Holder.__name__ = "findOrgStructureByAddressInDoc_Holder"
            self.pyclass = Holder

    class findOrgStructureByAddressOutDoc_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "findOrgStructureByAddressOutDoc"
        schema = "http://tempuri.org/"
        def __init__(self, **kw):
            ns = ns0.findOrgStructureByAddressOutDoc_Dec.schema
            TClist = [GTD("http://tempuri.org/","findOrgStructureByAddressInfo",lazy=False)(pname=(ns,"list"), aname="_list", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://tempuri.org/","findOrgStructureByAddressOutDoc")
            kw["aname"] = "_findOrgStructureByAddressOutDoc"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._list = []
                    return
            Holder.__name__ = "findOrgStructureByAddressOutDoc_Holder"
            self.pyclass = Holder

    class getPersonnelInDoc_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getPersonnelInDoc"
        schema = "http://tempuri.org/"
        def __init__(self, **kw):
            ns = ns0.getPersonnelInDoc_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"serverId"), aname="_serverId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"orgStructureId"), aname="_orgStructureId", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"recursive"), aname="_recursive", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://tempuri.org/","getPersonnelInDoc")
            kw["aname"] = "_getPersonnelInDoc"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._serverId = None
                    self._orgStructureId = None
                    self._recursive = None
                    return
            Holder.__name__ = "getPersonnelInDoc_Holder"
            self.pyclass = Holder

    class getPersonnelOutDoc_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getPersonnelOutDoc"
        schema = "http://tempuri.org/"
        def __init__(self, **kw):
            ns = ns0.getPersonnelOutDoc_Dec.schema
            TClist = [GTD("http://tempuri.org/","PersonInfo",lazy=False)(pname=(ns,"list"), aname="_list", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://tempuri.org/","getPersonnelOutDoc")
            kw["aname"] = "_getPersonnelOutDoc"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._list = []
                    return
            Holder.__name__ = "getPersonnelOutDoc_Holder"
            self.pyclass = Holder

    class getTotalTicketsAvailabilityInDoc_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getTotalTicketsAvailabilityInDoc"
        schema = "http://tempuri.org/"
        def __init__(self, **kw):
            ns = ns0.getTotalTicketsAvailabilityInDoc_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"serverId"), aname="_serverId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"orgStructureId"), aname="_orgStructureId", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"recursive"), aname="_recursive", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://tempuri.org/","specialityNotationType",lazy=False)(pname=(ns,"specialityNotation"), aname="_specialityNotation", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"speciality"), aname="_speciality", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"personId"), aname="_personId", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDate(pname=(ns,"begDate"), aname="_begDate", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDate(pname=(ns,"endDate"), aname="_endDate", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://tempuri.org/","getTotalTicketsAvailabilityInDoc")
            kw["aname"] = "_getTotalTicketsAvailabilityInDoc"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._serverId = None
                    self._orgStructureId = None
                    self._recursive = None
                    self._specialityNotation = None
                    self._speciality = None
                    self._personId = None
                    self._begDate = None
                    self._endDate = None
                    return
            Holder.__name__ = "getTotalTicketsAvailabilityInDoc_Holder"
            self.pyclass = Holder

    class getTotalTicketsAvailabilityOutDoc_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getTotalTicketsAvailabilityOutDoc"
        schema = "http://tempuri.org/"
        def __init__(self, **kw):
            ns = ns0.getTotalTicketsAvailabilityOutDoc_Dec.schema
            TClist = [ZSI.TCnumbers.Iint(pname=(ns,"total"), aname="_total", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"free"), aname="_free", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"available"), aname="_available", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://tempuri.org/","getTotalTicketsAvailabilityOutDoc")
            kw["aname"] = "_getTotalTicketsAvailabilityOutDoc"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._total = None
                    self._free = None
                    self._available = None
                    return
            Holder.__name__ = "getTotalTicketsAvailabilityOutDoc_Holder"
            self.pyclass = Holder

    class getTicketsAvailabilityInDoc_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getTicketsAvailabilityInDoc"
        schema = "http://tempuri.org/"
        def __init__(self, **kw):
            ns = ns0.getTicketsAvailabilityInDoc_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"serverId"), aname="_serverId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"orgStructureId"), aname="_orgStructureId", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"recursive"), aname="_recursive", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://tempuri.org/","specialityNotationType",lazy=False)(pname=(ns,"specialityNotation"), aname="_specialityNotation", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"speciality"), aname="_speciality", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"personId"), aname="_personId", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDate(pname=(ns,"begDate"), aname="_begDate", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDate(pname=(ns,"endDate"), aname="_endDate", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://tempuri.org/","getTicketsAvailabilityInDoc")
            kw["aname"] = "_getTicketsAvailabilityInDoc"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._serverId = None
                    self._orgStructureId = None
                    self._recursive = None
                    self._specialityNotation = None
                    self._speciality = None
                    self._personId = None
                    self._begDate = None
                    self._endDate = None
                    return
            Holder.__name__ = "getTicketsAvailabilityInDoc_Holder"
            self.pyclass = Holder

    class getTicketsAvailabilityOutDoc_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getTicketsAvailabilityOutDoc"
        schema = "http://tempuri.org/"
        def __init__(self, **kw):
            ns = ns0.getTicketsAvailabilityOutDoc_Dec.schema
            TClist = [GTD("http://tempuri.org/","TicketsAvailabilityInfo",lazy=False)(pname=(ns,"list"), aname="_list", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://tempuri.org/","getTicketsAvailabilityOutDoc")
            kw["aname"] = "_getTicketsAvailabilityOutDoc"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._list = []
                    return
            Holder.__name__ = "getTicketsAvailabilityOutDoc_Holder"
            self.pyclass = Holder

    class getWorkTimeAndStatusInDoc_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getWorkTimeAndStatusInDoc"
        schema = "http://tempuri.org/"
        def __init__(self, **kw):
            ns = ns0.getWorkTimeAndStatusInDoc_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"serverId"), aname="_serverId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"personId"), aname="_personId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDate(pname=(ns,"date"), aname="_date", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://tempuri.org/","getWorkTimeAndStatusInDoc")
            kw["aname"] = "_getWorkTimeAndStatusInDoc"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._serverId = None
                    self._personId = None
                    self._date = None
                    return
            Holder.__name__ = "getWorkTimeAndStatusInDoc_Holder"
            self.pyclass = Holder

    class getWorkTimeAndStatusOutDoc_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getWorkTimeAndStatusOutDoc"
        schema = "http://tempuri.org/"
        def __init__(self, **kw):
            ns = ns0.getWorkTimeAndStatusOutDoc_Dec.schema
            TClist = [GTD("http://tempuri.org/","AmbInfoEx",lazy=False)(pname=(ns,"amb"), aname="_amb", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://tempuri.org/","getWorkTimeAndStatusOutDoc")
            kw["aname"] = "_getWorkTimeAndStatusOutDoc"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._amb = None
                    return
            Holder.__name__ = "getWorkTimeAndStatusOutDoc_Holder"
            self.pyclass = Holder

    class findPatientInDoc_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "findPatientInDoc"
        schema = "http://tempuri.org/"
        def __init__(self, **kw):
            ns = ns0.findPatientInDoc_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"serverId"), aname="_serverId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"lastName"), aname="_lastName", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"firstName"), aname="_firstName", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"patrName"), aname="_patrName", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDate(pname=(ns,"birthDate"), aname="_birthDate", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"sex"), aname="_sex", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"identifierType"), aname="_identifierType", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"identifier"), aname="_identifier", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"omiPolicy"), aname="_omiPolicy", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://tempuri.org/","findPatientInDoc")
            kw["aname"] = "_findPatientInDoc"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._serverId = None
                    self._lastName = None
                    self._firstName = None
                    self._patrName = None
                    self._birthDate = None
                    self._sex = None
                    self._identifierType = None
                    self._identifier = None
                    self._omiPolicy = None
                    return
            Holder.__name__ = "findPatientInDoc_Holder"
            self.pyclass = Holder

    class findPatientOutDoc_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "findPatientOutDoc"
        schema = "http://tempuri.org/"
        def __init__(self, **kw):
            ns = ns0.findPatientOutDoc_Dec.schema
            TClist = [ZSI.TC.Boolean(pname=(ns,"success"), aname="_success", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"message"), aname="_message", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"patientId"), aname="_patientId", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://tempuri.org/","findPatientOutDoc")
            kw["aname"] = "_findPatientOutDoc"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._success = None
                    self._message = None
                    self._patientId = None
                    return
            Holder.__name__ = "findPatientOutDoc_Holder"
            self.pyclass = Holder

    class findPatientsInDoc_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "findPatientsInDoc"
        schema = "http://tempuri.org/"
        def __init__(self, **kw):
            ns = ns0.findPatientsInDoc_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"serverId"), aname="_serverId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"lastName"), aname="_lastName", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"firstName"), aname="_firstName", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"patrName"), aname="_patrName", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDate(pname=(ns,"birthDate"), aname="_birthDate", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"sex"), aname="_sex", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"identifierType"), aname="_identifierType", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"identifier"), aname="_identifier", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"omiPolicy"), aname="_omiPolicy", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://tempuri.org/","findPatientsInDoc")
            kw["aname"] = "_findPatientsInDoc"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._serverId = None
                    self._lastName = None
                    self._firstName = None
                    self._patrName = None
                    self._birthDate = None
                    self._sex = None
                    self._identifierType = None
                    self._identifier = None
                    self._omiPolicy = None
                    return
            Holder.__name__ = "findPatientsInDoc_Holder"
            self.pyclass = Holder

    class findPatientsOutDoc_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "findPatientsOutDoc"
        schema = "http://tempuri.org/"
        def __init__(self, **kw):
            ns = ns0.findPatientsOutDoc_Dec.schema
            TClist = [ZSI.TCnumbers.Iint(pname=(ns,"list"), aname="_list", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://tempuri.org/","findPatientsOutDoc")
            kw["aname"] = "_findPatientsOutDoc"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._list = []
                    return
            Holder.__name__ = "findPatientsOutDoc_Holder"
            self.pyclass = Holder

    class getPatientInfoInDoc_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getPatientInfoInDoc"
        schema = "http://tempuri.org/"
        def __init__(self, **kw):
            ns = ns0.getPatientInfoInDoc_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"serverId"), aname="_serverId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"patientId"), aname="_patientId", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://tempuri.org/","getPatientInfoInDoc")
            kw["aname"] = "_getPatientInfoInDoc"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._serverId = None
                    self._patientId = []
                    return
            Holder.__name__ = "getPatientInfoInDoc_Holder"
            self.pyclass = Holder

    class getPatientInfoOutDoc_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getPatientInfoOutDoc"
        schema = "http://tempuri.org/"
        def __init__(self, **kw):
            ns = ns0.getPatientInfoOutDoc_Dec.schema
            TClist = [GTD("http://tempuri.org/","PatientInfo",lazy=False)(pname=(ns,"patientInfo"), aname="_patientInfo", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://tempuri.org/","getPatientInfoOutDoc")
            kw["aname"] = "_getPatientInfoOutDoc"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._patientInfo = []
                    return
            Holder.__name__ = "getPatientInfoOutDoc_Holder"
            self.pyclass = Holder

    class getPatientContactsInDoc_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getPatientContactsInDoc"
        schema = "http://tempuri.org/"
        def __init__(self, **kw):
            ns = ns0.getPatientContactsInDoc_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"serverId"), aname="_serverId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"patientId"), aname="_patientId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://tempuri.org/","getPatientContactsInDoc")
            kw["aname"] = "_getPatientContactsInDoc"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._serverId = None
                    self._patientId = None
                    return
            Holder.__name__ = "getPatientContactsInDoc_Holder"
            self.pyclass = Holder

    class getPatientContactsOutDoc_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getPatientContactsOutDoc"
        schema = "http://tempuri.org/"
        def __init__(self, **kw):
            ns = ns0.getPatientContactsOutDoc_Dec.schema
            TClist = [GTD("http://tempuri.org/","PatientContactInfo",lazy=False)(pname=(ns,"list"), aname="_list", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://tempuri.org/","getPatientContactsOutDoc")
            kw["aname"] = "_getPatientContactsOutDoc"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._list = []
                    return
            Holder.__name__ = "getPatientContactsOutDoc_Holder"
            self.pyclass = Holder

    class getPatientAddressInDoc_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getPatientAddressInDoc"
        schema = "http://tempuri.org/"
        def __init__(self, **kw):
            ns = ns0.getPatientAddressInDoc_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"serverId"), aname="_serverId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"patientId"), aname="_patientId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://tempuri.org/","getPatientAddressInDoc")
            kw["aname"] = "_getPatientAddressInDoc"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._serverId = None
                    self._patientId = None
                    return
            Holder.__name__ = "getPatientAddressInDoc_Holder"
            self.pyclass = Holder

    class getPatientAddressOutDoc_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getPatientAddressOutDoc"
        schema = "http://tempuri.org/"
        def __init__(self, **kw):
            ns = ns0.getPatientAddressOutDoc_Dec.schema
            TClist = [GTD("http://tempuri.org/","PatientAddress",lazy=False)(pname=(ns,"reg"), aname="_reg", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://tempuri.org/","PatientAddress",lazy=False)(pname=(ns,"loc"), aname="_loc", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://tempuri.org/","getPatientAddressOutDoc")
            kw["aname"] = "_getPatientAddressOutDoc"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._reg = None
                    self._loc = None
                    return
            Holder.__name__ = "getPatientAddressOutDoc_Holder"
            self.pyclass = Holder

    class getPatientOrgStructuresInDoc_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getPatientOrgStructuresInDoc"
        schema = "http://tempuri.org/"
        def __init__(self, **kw):
            ns = ns0.getPatientOrgStructuresInDoc_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"serverId"), aname="_serverId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"patientId"), aname="_patientId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://tempuri.org/","getPatientOrgStructuresInDoc")
            kw["aname"] = "_getPatientOrgStructuresInDoc"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._serverId = None
                    self._patientId = None
                    return
            Holder.__name__ = "getPatientOrgStructuresInDoc_Holder"
            self.pyclass = Holder

    class getPatientOrgStructuresOutDoc_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getPatientOrgStructuresOutDoc"
        schema = "http://tempuri.org/"
        def __init__(self, **kw):
            ns = ns0.getPatientOrgStructuresOutDoc_Dec.schema
            TClist = [GTD("http://tempuri.org/","PatientOrgStructureInfo",lazy=False)(pname=(ns,"list"), aname="_list", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://tempuri.org/","getPatientOrgStructuresOutDoc")
            kw["aname"] = "_getPatientOrgStructuresOutDoc"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._list = []
                    return
            Holder.__name__ = "getPatientOrgStructuresOutDoc_Holder"
            self.pyclass = Holder

    class enqueuePatientInDoc_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "enqueuePatientInDoc"
        schema = "http://tempuri.org/"
        def __init__(self, **kw):
            ns = ns0.enqueuePatientInDoc_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"serverId"), aname="_serverId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"patientId"), aname="_patientId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"personId"), aname="_personId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDate(pname=(ns,"date"), aname="_date", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gTime(pname=(ns,"time"), aname="_time", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"note"), aname="_note", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://tempuri.org/","enqueuePatientInDoc")
            kw["aname"] = "_enqueuePatientInDoc"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._serverId = None
                    self._patientId = None
                    self._personId = None
                    self._date = None
                    self._time = None
                    self._note = None
                    return
            Holder.__name__ = "enqueuePatientInDoc_Holder"
            self.pyclass = Holder

    class enqueuePatientOutDoc_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "enqueuePatientOutDoc"
        schema = "http://tempuri.org/"
        def __init__(self, **kw):
            ns = ns0.enqueuePatientOutDoc_Dec.schema
            TClist = [ZSI.TC.Boolean(pname=(ns,"success"), aname="_success", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"message"), aname="_message", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"index"), aname="_index", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"queueId"), aname="_queueId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://tempuri.org/","enqueuePatientOutDoc")
            kw["aname"] = "_enqueuePatientOutDoc"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._success = None
                    self._message = None
                    self._index = None
                    self._queueId = None
                    return
            Holder.__name__ = "enqueuePatientOutDoc_Holder"
            self.pyclass = Holder

    class getPatientQueueInDoc_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getPatientQueueInDoc"
        schema = "http://tempuri.org/"
        def __init__(self, **kw):
            ns = ns0.getPatientQueueInDoc_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"serverId"), aname="_serverId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"patientId"), aname="_patientId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://tempuri.org/","getPatientQueueInDoc")
            kw["aname"] = "_getPatientQueueInDoc"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._serverId = None
                    self._patientId = None
                    return
            Holder.__name__ = "getPatientQueueInDoc_Holder"
            self.pyclass = Holder

    class getPatientQueueOutDoc_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getPatientQueueOutDoc"
        schema = "http://tempuri.org/"
        def __init__(self, **kw):
            ns = ns0.getPatientQueueOutDoc_Dec.schema
            TClist = [GTD("http://tempuri.org/","getPatientQueueInfo",lazy=False)(pname=(ns,"list"), aname="_list", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://tempuri.org/","getPatientQueueOutDoc")
            kw["aname"] = "_getPatientQueueOutDoc"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._list = []
                    return
            Holder.__name__ = "getPatientQueueOutDoc_Holder"
            self.pyclass = Holder

    class dequeuePatientInDoc_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "dequeuePatientInDoc"
        schema = "http://tempuri.org/"
        def __init__(self, **kw):
            ns = ns0.dequeuePatientInDoc_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"serverId"), aname="_serverId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"patientId"), aname="_patientId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"queueId"), aname="_queueId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"note"), aname="_note", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://tempuri.org/","dequeuePatientInDoc")
            kw["aname"] = "_dequeuePatientInDoc"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._serverId = None
                    self._patientId = None
                    self._queueId = None
                    self._note = None
                    return
            Holder.__name__ = "dequeuePatientInDoc_Holder"
            self.pyclass = Holder

    class dequeuePatientOutDoc_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "dequeuePatientOutDoc"
        schema = "http://tempuri.org/"
        def __init__(self, **kw):
            ns = ns0.dequeuePatientOutDoc_Dec.schema
            TClist = [ZSI.TC.Boolean(pname=(ns,"success"), aname="_success", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"message"), aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://tempuri.org/","dequeuePatientOutDoc")
            kw["aname"] = "_dequeuePatientOutDoc"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._success = None
                    self._message = None
                    return
            Holder.__name__ = "dequeuePatientOutDoc_Holder"
            self.pyclass = Holder

    class getStatisticInDoc_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getStatisticInDoc"
        schema = "http://tempuri.org/"
        def __init__(self, **kw):
            ns = ns0.getStatisticInDoc_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"serverId"), aname="_serverId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDate(pname=(ns,"begDate"), aname="_begDate", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDate(pname=(ns,"endDate"), aname="_endDate", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"orgStructureId"), aname="_orgStructureId", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"recursive"), aname="_recursive", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://tempuri.org/","getStatisticInDoc")
            kw["aname"] = "_getStatisticInDoc"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._serverId = None
                    self._begDate = None
                    self._endDate = None
                    self._orgStructureId = None
                    self._recursive = None
                    return
            Holder.__name__ = "getStatisticInDoc_Holder"
            self.pyclass = Holder

    class getStatisticOutDoc_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getStatisticOutDoc"
        schema = "http://tempuri.org/"
        def __init__(self, **kw):
            ns = ns0.getStatisticOutDoc_Dec.schema
            TClist = [GTD("http://tempuri.org/","statisticItem",lazy=False)(pname=(ns,"list"), aname="_list", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://tempuri.org/","getStatisticOutDoc")
            kw["aname"] = "_getStatisticOutDoc"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._list = []
                    return
            Holder.__name__ = "getStatisticOutDoc_Holder"
            self.pyclass = Holder

# end class ns0 (tns: http://tempuri.org/)
