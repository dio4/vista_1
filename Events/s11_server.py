##################################################
# file: s11_server.py
#
# skeleton generated by "ZSI.generate.wsdl2dispatch.ServiceModuleWriter"
#      wsdl2py.py -b wsdl.xml
#
##################################################

from ZSI.schema           import GED
from ZSI.ServiceContainer import ServiceSOAPBinding

# Messages  
testIn = GED("http://tempuri.org/", "testInDoc").pyclass

testOut = GED("http://tempuri.org/", "testOutDoc").pyclass

getOrganisationInfoIn = GED("http://tempuri.org/", "organisationInfoInDoc").pyclass

getOrganisationInfoOut = GED("http://tempuri.org/", "organisationInfoOutDoc").pyclass

getOrgStructuresIn = GED("http://tempuri.org/", "getOrgStructuresInDoc").pyclass

getOrgStructuresOut = GED("http://tempuri.org/", "getOrgStructuresOutDoc").pyclass

getAddressesIn = GED("http://tempuri.org/", "getAddressesInDoc").pyclass

getAddressesOut = GED("http://tempuri.org/", "getAddressesOutDoc").pyclass

findOrgStructureByAddressIn = GED("http://tempuri.org/", "findOrgStructureByAddressInDoc").pyclass

findOrgStructureByAddressOut = GED("http://tempuri.org/", "findOrgStructureByAddressOutDoc").pyclass

getPersonnelIn = GED("http://tempuri.org/", "getPersonnelInDoc").pyclass

getPersonnelOut = GED("http://tempuri.org/", "getPersonnelOutDoc").pyclass

getTicketsAvailabilityIn = GED("http://tempuri.org/", "getTicketsAvailabilityInDoc").pyclass

getTicketsAvailabilityOut = GED("http://tempuri.org/", "getTicketsAvailabilityOutDoc").pyclass

getTotalTicketsAvailabilityIn = GED("http://tempuri.org/", "getTotalTicketsAvailabilityInDoc").pyclass

getTotalTicketsAvailabilityOut = GED("http://tempuri.org/", "getTotalTicketsAvailabilityOutDoc").pyclass

getWorkTimeAndStatusIn = GED("http://tempuri.org/", "getWorkTimeAndStatusInDoc").pyclass

getWorkTimeAndStatusOut = GED("http://tempuri.org/", "getWorkTimeAndStatusOutDoc").pyclass

findPatientIn = GED("http://tempuri.org/", "findPatientInDoc").pyclass

findPatientOut = GED("http://tempuri.org/", "findPatientOutDoc").pyclass

findPatientsIn = GED("http://tempuri.org/", "findPatientsInDoc").pyclass

findPatientsOut = GED("http://tempuri.org/", "findPatientsOutDoc").pyclass

getPatientInfoIn = GED("http://tempuri.org/", "getPatientInfoInDoc").pyclass

getPatientInfoOut = GED("http://tempuri.org/", "getPatientInfoOutDoc").pyclass

getPatientContactsIn = GED("http://tempuri.org/", "getPatientContactsInDoc").pyclass

getPatientContactsOut = GED("http://tempuri.org/", "getPatientContactsOutDoc").pyclass

getPatientAddressIn = GED("http://tempuri.org/", "getPatientAddressInDoc").pyclass

getPatientAddressOut = GED("http://tempuri.org/", "getPatientAddressOutDoc").pyclass

getPatientOrgStructuresIn = GED("http://tempuri.org/", "getPatientOrgStructuresInDoc").pyclass

getPatientOrgStructuresOut = GED("http://tempuri.org/", "getPatientOrgStructuresOutDoc").pyclass

enqueuePatientIn = GED("http://tempuri.org/", "enqueuePatientInDoc").pyclass

enqueuePatientOut = GED("http://tempuri.org/", "enqueuePatientOutDoc").pyclass

getPatientQueueIn = GED("http://tempuri.org/", "getPatientQueueInDoc").pyclass

getPatientQueueOut = GED("http://tempuri.org/", "getPatientQueueOutDoc").pyclass

dequeuePatientIn = GED("http://tempuri.org/", "dequeuePatientInDoc").pyclass

dequeuePatientOut = GED("http://tempuri.org/", "dequeuePatientOutDoc").pyclass

getStatisticIn = GED("http://tempuri.org/", "getStatisticInDoc").pyclass

getStatisticOut = GED("http://tempuri.org/", "getStatisticOutDoc").pyclass


# Service Skeletons
class s11Service(ServiceSOAPBinding):
    soapAction = {}
    root = {}

    def __init__(self, post='/ext/wsdl/netrika2vista/s11proxy.php', **kw):
        ServiceSOAPBinding.__init__(self, post)

    def soap_test(self, ps, **kw):
        request = ps.Parse(testIn.typecode)
        return request,testOut()

    soapAction[''] = 'soap_test'
    root[(testIn.typecode.nspname,testIn.typecode.pname)] = 'soap_test'

    def soap_getOrganisationInfo(self, ps, **kw):
        request = ps.Parse(getOrganisationInfoIn.typecode)
        return request,getOrganisationInfoOut()

    soapAction[''] = 'soap_getOrganisationInfo'
    root[(getOrganisationInfoIn.typecode.nspname,getOrganisationInfoIn.typecode.pname)] = 'soap_getOrganisationInfo'

    def soap_getOrgStructures(self, ps, **kw):
        request = ps.Parse(getOrgStructuresIn.typecode)
        return request,getOrgStructuresOut()

    soapAction[''] = 'soap_getOrgStructures'
    root[(getOrgStructuresIn.typecode.nspname,getOrgStructuresIn.typecode.pname)] = 'soap_getOrgStructures'

    def soap_getAddresses(self, ps, **kw):
        request = ps.Parse(getAddressesIn.typecode)
        return request,getAddressesOut()

    soapAction[''] = 'soap_getAddresses'
    root[(getAddressesIn.typecode.nspname,getAddressesIn.typecode.pname)] = 'soap_getAddresses'

    def soap_findOrgStructureByAddress(self, ps, **kw):
        request = ps.Parse(findOrgStructureByAddressIn.typecode)
        return request,findOrgStructureByAddressOut()

    soapAction[''] = 'soap_findOrgStructureByAddress'
    root[(findOrgStructureByAddressIn.typecode.nspname,findOrgStructureByAddressIn.typecode.pname)] = 'soap_findOrgStructureByAddress'

    def soap_getPersonnel(self, ps, **kw):
        request = ps.Parse(getPersonnelIn.typecode)
        return request,getPersonnelOut()

    soapAction[''] = 'soap_getPersonnel'
    root[(getPersonnelIn.typecode.nspname,getPersonnelIn.typecode.pname)] = 'soap_getPersonnel'

    def soap_getTicketsAvailability(self, ps, **kw):
        request = ps.Parse(getTicketsAvailabilityIn.typecode)
        return request,getTicketsAvailabilityOut()

    soapAction[''] = 'soap_getTicketsAvailability'
    root[(getTicketsAvailabilityIn.typecode.nspname,getTicketsAvailabilityIn.typecode.pname)] = 'soap_getTicketsAvailability'

    def soap_getTotalTicketsAvailability(self, ps, **kw):
        request = ps.Parse(getTotalTicketsAvailabilityIn.typecode)
        return request,getTotalTicketsAvailabilityOut()

    soapAction[''] = 'soap_getTotalTicketsAvailability'
    root[(getTotalTicketsAvailabilityIn.typecode.nspname,getTotalTicketsAvailabilityIn.typecode.pname)] = 'soap_getTotalTicketsAvailability'

    def soap_getWorkTimeAndStatus(self, ps, **kw):
        request = ps.Parse(getWorkTimeAndStatusIn.typecode)
        return request,getWorkTimeAndStatusOut()

    soapAction[''] = 'soap_getWorkTimeAndStatus'
    root[(getWorkTimeAndStatusIn.typecode.nspname,getWorkTimeAndStatusIn.typecode.pname)] = 'soap_getWorkTimeAndStatus'

    def soap_findPatient(self, ps, **kw):
        request = ps.Parse(findPatientIn.typecode)
        return request,findPatientOut()

    soapAction[''] = 'soap_findPatient'
    root[(findPatientIn.typecode.nspname,findPatientIn.typecode.pname)] = 'soap_findPatient'

    def soap_findPatients(self, ps, **kw):
        request = ps.Parse(findPatientsIn.typecode)
        return request,findPatientsOut()

    soapAction[''] = 'soap_findPatients'
    root[(findPatientsIn.typecode.nspname,findPatientsIn.typecode.pname)] = 'soap_findPatients'

    def soap_getPatientInfo(self, ps, **kw):
        request = ps.Parse(getPatientInfoIn.typecode)
        return request,getPatientInfoOut()

    soapAction[''] = 'soap_getPatientInfo'
    root[(getPatientInfoIn.typecode.nspname,getPatientInfoIn.typecode.pname)] = 'soap_getPatientInfo'

    def soap_getPatientContacts(self, ps, **kw):
        request = ps.Parse(getPatientContactsIn.typecode)
        return request,getPatientContactsOut()

    soapAction[''] = 'soap_getPatientContacts'
    root[(getPatientContactsIn.typecode.nspname,getPatientContactsIn.typecode.pname)] = 'soap_getPatientContacts'

    def soap_getPatientAddress(self, ps, **kw):
        request = ps.Parse(getPatientAddressIn.typecode)
        return request,getPatientAddressOut()

    soapAction[''] = 'soap_getPatientAddress'
    root[(getPatientAddressIn.typecode.nspname,getPatientAddressIn.typecode.pname)] = 'soap_getPatientAddress'

    def soap_getPatientOrgStructures(self, ps, **kw):
        request = ps.Parse(getPatientOrgStructuresIn.typecode)
        return request,getPatientOrgStructuresOut()

    soapAction[''] = 'soap_getPatientOrgStructures'
    root[(getPatientOrgStructuresIn.typecode.nspname,getPatientOrgStructuresIn.typecode.pname)] = 'soap_getPatientOrgStructures'

    def soap_enqueuePatient(self, ps, **kw):
        request = ps.Parse(enqueuePatientIn.typecode)
        return request,enqueuePatientOut()

    soapAction[''] = 'soap_enqueuePatient'
    root[(enqueuePatientIn.typecode.nspname,enqueuePatientIn.typecode.pname)] = 'soap_enqueuePatient'

    def soap_getPatientQueue(self, ps, **kw):
        request = ps.Parse(getPatientQueueIn.typecode)
        return request,getPatientQueueOut()

    soapAction[''] = 'soap_getPatientQueue'
    root[(getPatientQueueIn.typecode.nspname,getPatientQueueIn.typecode.pname)] = 'soap_getPatientQueue'

    def soap_dequeuePatient(self, ps, **kw):
        request = ps.Parse(dequeuePatientIn.typecode)
        return request,dequeuePatientOut()

    soapAction[''] = 'soap_dequeuePatient'
    root[(dequeuePatientIn.typecode.nspname,dequeuePatientIn.typecode.pname)] = 'soap_dequeuePatient'

    def soap_getStatistic(self, ps, **kw):
        request = ps.Parse(getStatisticIn.typecode)
        return request,getStatisticOut()

    soapAction[''] = 'soap_getStatistic'
    root[(getStatisticIn.typecode.nspname,getStatisticIn.typecode.pname)] = 'soap_getStatistic'

