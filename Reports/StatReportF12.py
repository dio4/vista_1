# -*- coding: utf-8 -*-
#############################################################################
##
## Copyright (C) 2013 Vista Software. All rights reserved.
##
#############################################################################

"""
Created on 08.04.2013

@author: atronah
"""
from PyQt4 import QtCore, QtGui

from Orgs.Utils import getOrgStructureDescendants, getOrgStructures
from Reports.Report import CReport, normalizeMKB
from Reports.ReportAcuteInfections import CReportAcuteInfectionsSetupDialog
from Reports.ReportBase import createTable, CReportBase
from Reports.StatReport1NPUtil import havePermanentAttach
from library.MapCode import createMapCodeToRowIdx
from library.Utils import forceBool, forceDate, forceInt, forceRef, forceString
from library.database import addDateInRange


def getMainRows(templateIndex, categoryName):
    if categoryName == 'inset2008':
        MainRows = [
            (u'цереброваскулярные болезни', u'1.0',u'I60-I69'),
            (u'в том числе: субарахноидальное кровоизлияние', u'1.1',u'I60'),
            (u'\tвнутримозговое кровоизлияние', u'1.2',u'I61'),
            (u'\tинфаркт мозга', u'1.3',u'I63'),
            (u'\tинсульт, не уточненный как кровоизлияние или инфаркт', u'1.4',u'I64'),
            (u'\tдругие цереброваскулярные болезни', u'1.5',u'I67'),
            (u'\tпоследствия цереброваскулярных болезней', u'1.6',u'I69'),
            (u'болезни артерий, артериел и капиляров', u'1.7',u'I70-I79'),
            (u'в том числе: склероз', u'1.8',u'I70'),
        ]
        return MainRows
    MainRows = RowCounter()
    MainRows.extend([
        ( u'Зарегистрировано заболеваний - всего', u'1.0', u'A00-T98'),

        ( u'в том числе: некоторые инфекционные и паразитарные болезни', u'2.0', u'A00-B99'),
        ( u'из них:\n кишечные инфекции', u'2.1', u'A00-A09'),
        ( u'менингококковая инфекция', u'2.2', u'A39')])
    if templateIndex < 2:
        MainRows.extend([( u'сепсис', u'2.3', u'A40-A41'),
                         ( u'острый полиомиелит', u'2.4', u'A80'),
                         ( u'вирусный гепатит', u'2.5', u'B15-B19')])
    else:
        MainRows.add(u'вирусный гепатит', u'B15-B19', RowCounter.Sub)
    MainRows.extend([
                     ( u'новообразования', u'3.0', u'C00-D48'),
                     ( u'из них:\n злокачественные новообразования', u'3.1', u'C00-C96' if templateIndex >= 3 else u'C00-C97'),
                     ( u'из них:\n злокачественные новообразования лимфоидной, кроветворной и родственных им тканей', u'3.1.1', u'C81-C96'),
                     ( u'доброкачественные новобразования', u'3.2', u'D10-D36'),

                     ( u'болезни крови, кроветворных органов и отдельные нарушения, вовлекающие иммунный механизм', u'4.0', u'D50-D89'),
                     ( u'из них:\n анемии', u'4.1', u'D50-D64'),
                     ( u'из них апластические анемии', u'4.1.1', u'D60-D61'),
                     ( u'нарушения свертываемости крови, пурпура и другие геморрагические состояния', u'4.2', u'D65-D69')])
    if templateIndex < 3:
        MainRows.extend([( u'из них:\n диссеминированное внутрисосудистое свертывание крови (синдром дефибринации)', u'4.2.1', u'D65'),
                         ( u'гемофилия', u'4.2.2', u'D66-D67, D68.0')])
    else:
        MainRows.append(( u'из них:\n гемофилия', u'4.2.1', u'D66-D68'))
    MainRows.extend([( u'отдельные нарушения, вовлекающие иммунный механизм', u'4.3', u'D80-D89'),
                     ( u'болезни эндокринной системы, расстройства питания и нарушения обмена веществ', u'5.0', u'E00-E90' if templateIndex < 3 else  u'E00-E89'),
                     ( u'из них:\n болезни щитовидной железы', u'5.1', u'E00-E07')])
    if templateIndex < 2:
        MainRows.append(( u'из них:\n болезни щитовидной железы, связанные с йодной недостаточностью, и сходные состояния', u'5.1.1', u'E01-E03'))
    if templateIndex >= 2:
        MainRows.extend([( u'из них:\n синдром врожденной йодной недостаточночти', u'5.1.1', u'E00'),
                         ( u'эндемический зоб, связанный с йодной недостаточностью', u'5.1.2', u'E01.0-2'),
                         ( u'сублинический гипотиреоз вследствие йодной недостаточности и другие формы гипотиреоза', u'5.1.3', u'E02, E03'),
                         ( u'другие формы нетоксического зоба', u'5.1.4', u'E04')])

    MainRows.addMultiple([(u'тиреотоксикоз (гипертиреоз)', u'E05', RowCounter.SubSub),
                          (u'тиреоидит', u'E06'),
                          (u'сахарный диабет', u'E10-E14', RowCounter.Sub)])

    if templateIndex == 0:
        MainRows.extend([
                ( u'из них:\n инсулинзависимый сахарный диабет', u'5.2.1', u'E10'),
                ( u'инсулиннезависимый сахарный диабет', u'5.2.2', u'E11')
                ])
    elif templateIndex < 3:
        MainRows.extend([
                ( u'из него:\n с поражением глаз', u'5.2.1', u'E10.3, E11.3, E12.3, E13.3, E14.3'),
                ( u'из него (из стр. 5.2): сахарный диабет инсулинзависимый', u'5.2.2', u'E10'),
                ( u'сахарный диабет инсулиннезависимый', u'5.2.3', u'E11')
                ])
    else:
         MainRows.extend([
                ( u'из него:\n с поражением глаз', u'5.2.1', u'E10.3, E11.3, E12.3, E13.3, E14.3'),
                ( u'из него (из стр. 5.2): сахарный диабет I типа', u'5.2.2', u'E10'),
                ( u'сахарный диабет II типа', u'5.2.3', u'E11')
                ])

    if templateIndex == 4:
        MainRows.extend([
            (u'гиперфункция гипофиза', u'5.3', u'E22'),
            (u'гипопитуитаризм', u'5.4', u'E23.0'),
            (u'несахарный диабет', u'5.5', u'E23.2'),
            (u'адреногенитальные расстройства', u'5.6', u'E25'),
            (u'дисфункция яичников', u'5.7', u'E28'),
            (u'дисфункция яичек', u'5.8', u'E29'),
            (u'рахит', u'5.9', u'E55.0'),
            (u'ожирение', u'5.10', u'E66'),
            (u'фенилкетонурия', u'5.11', u'E70.0'),
            (u'нарушения обмена галактозы (галактоземия)', u'5.12', u'E74.2'),
            (u'болезнь Гоше', u'5.13', u'E75.2'),
            (u'нарушения обмена гликозаминогликанов (мукополисахаридоз)', u'5.14', u'E76'),
            (u'муковисцидоз', u'5.15', u'E84'),
            (u'психические расстройства и расстройства поведения', u'6.0',
             u'F00-F99' if templateIndex < 3 else u'F01, F03-F99'),
            (
            u'из них:\n психические расстройства и расстройства поведения, связанные с употреблением психоактивных веществ',
            u'6.1', u'F10-F19'),
            (
            u'детский аутизм, атипичный аутизм, синдром Ретта, дезинтегративное расстройство детского возраста',
            u'5.15', u'F84.0-3'),
            (u'болезни нервной системы', u'7.0', u'G00-G98'),
            (u'из них:\n воспалительные болезни центральной нервной системы', u'7.1', u'G00-G09'),
            (u'из них:\n бактериальный менингит', u'7.1.1', u'G00'),
            (u'из них:\n энцефалит, миелит и энцефаломиелит', u'7.1.2', u'G04'),
            (u'системные атрофии, поражающие преимущественно нервную систему', u'7.2', u'G10-G12'),
            (u'экстрапирамидные и другие двигательные нарушения', u'7.3', u'G20, G21, G23-G25')])
    else:
        MainRows.extend([
            ( u'гиперфункция гипофиза', u'5.3', u'E22'),
            ( u'гипопитуитаризм', u'5.4', u'E23.0'),
            ( u'несахарный диабет', u'5.5', u'E23.2'),
            ( u'адреногенитальные расстройства', u'5.6', u'E25'),
            ( u'дисфункция яичников', u'5.7', u'E28'),
            ( u'дисфункция яичек', u'5.8', u'E29'),
            ( u'ожирение', u'5.9', u'E66'),
            ( u'фенилкетонурия', u'5.10', u'E70.0'),
            ( u'нарушения обмена галактозы (галактоземия)', u'5.11', u'E74.2'),
            ( u'болезнь Гоше', u'5.12', u'E75.2'),
            ( u'нарушения обмена гликозаминогликанов (мукополисахаридоз)', u'5.13', u'E76'),
            ( u'муковисцидоз', u'5.14', u'E84'),
            ( u'психические расстройства и расстройства поведения', u'6.0', u'F00-F99' if templateIndex < 3 else u'F01, F03-F99'),
            ( u'из них:\n психические расстройства и расстройства поведения, связанные с употреблением психоактивных веществ', u'6.1', u'F10-F19'),
            ( u'болезни нервной системы', u'7.0', u'G00-G98'),
            ( u'из них:\n воспалительные болезни центральной нервной системы', u'7.1', u'G00-G09'),
            ( u'из них:\n бактериальный менингит', u'7.1.1', u'G00'),
            ( u'из них:\n энцефалит, миелит и энцефаломиелит', u'7.1.2', u'G04'),
            ( u'системные атрофии, поражающие преимущественно нервную систему', u'7.2', u'G10-G12'),
            ( u'экстрапирамидные и другие двигательные нарушения', u'7.3', u'G20, G21, G23-G25')])
    if (categoryName not in ['children', 'childrenUpToOneYear' 'teenagers'] and templateIndex == 2) or templateIndex < 2:
        MainRows.extend([( u'из них:\n болезнь Паркинсона', u'7.3.1', u'G20'),
                         ( u'другие экстрапирамидные и двигательные нарушения', u'7.3.2', u'G25')])
    elif templateIndex == 4:
        MainRows.append(( u'из них:\n другие экстрапирамидные и двигательные нарушения', u'7.3.2', u'G25'))
    else:
        MainRows.append((u'другие экстрапирамидные и двигательные нарушения', u'7.3.2', u'G25'))

    MainRows.append(( u'другие дегенеративные болезни нервной системы', u'7.4', u'G30-G31'))

    if (categoryName not in ['childrenUpToOneYear', 'children'] and templateIndex == 2) or templateIndex < 2:
        MainRows.append(( u'из них:\n болезнь Альцгеймера', u'7.4.1', u'G30'))

    MainRows.extend([( u'демиелинизирующие болезни центральной нервной системы', u'7.5', u'G35-G37'),
        ( u'из них:\n рассеянный склероз', u'7.5.1', u'G35'),
        ( u'эпизодические и пароксизмальные расстройства', u'7.6', u'G40-G47'),
        ( u'из них:\n эпилепсия, эпилептический статус', u'7.6.1', u'G40-G41'),
        ( u'преходящие транзиторные церебральные ишемические приступы (атаки) и родственные синдромы', u'7.6.2', u'G45'),
        ( u'поражения отдельных нервов, нервных корешков и сплетений, полиневропатии и другие поражения периферической нервной  системы', u'7.7', u'G50-G64'),
        ( u'из них:\n синдром Гийена-Барре', u'7.7.1', u'G61.0'),
        ( u'болезни нервно-мышечного синапса и мышц', u'7.8', u'G70-G73'),
        ( u'из них:\n миастения ', u'7.8.1', u'G70.0, 2, 9' if templateIndex < 3 else u'G70.0, 2'),
        ( u'из них:\n мышечная дистрофия Дюшенна', u'7.8.2', u'G71.0'),
        ( u'церебральный паралич и другие паралитические синдромы', u'7.9', u'G80-G83'),
        ( u'из них:\n церебральный паралич', u'7.9.1', u'G80'),
        ( u'расстройства вегетативной(автономной) нервной системы', u'7.10', u'G90'),
        ( u'сосудистые миелопатии', u'7.11', u'G95.1'),
        ( u'болезни глаза и его придаточного аппарата', u'8.0', u'H00-H59')
        ])
    if templateIndex == 0:
        MainRows.extend([
                ( u'из них:\n катаракта', u'8.1', u'H25-H26'),
                ( u'из них:\n глаукома', u'8.2', u'H40'),
                ( u'неврит зрительного нерва', u'8.3', u'H46'),
                ( u'болезни мышц глаза, нарушения содружественного движения глаз, аккомодации и рефракции', u'8.4', u'H49-H52'),
                ( u'из них:\n гиперметропия', u'8.4.1', u'H52.0'),
                ( u'миопия', u'8.4.2', u'H52.1'),
                ( u'астигматизм', u'8.4.3', u'H52.2'),
                ( u'слепота и пониженное зрение', u'8.5', u'H54'),
                ( u'из них:\n слепота обоих глаз', u'8.5.1', u'H54.0')
                ])
    elif templateIndex >= 2:
        MainRows.extend([
                ( u'из них:\n конъюнктивит', u'8.1', u'H10'),
                ( u'Кератит', u'8.2', u'H16'),
                ( u'из него:\n язва роговицы', u'8.2.1', u'H16.0'),
                ( u'катаракта', u'8.3', u'H25-H26'),
                ( u'хориоретинальное воспаление', u'8.4', u'H30'),
                ( u'отслойка сетчатки с разрывом%s' % u'' if templateIndex < 4 else u' сетчатки', u'8.5', u'H33' if templateIndex < 3 else u'H33.0'),
                ( u'преретинопатия', u'8.6', u'H35.1'),
                ( u'дегенерация макулы и заднего полюса', u'8.7', u'H35.8' if templateIndex < 3 else u'H35.3'),
                ( u'глаукома', u'8.8', u'H40'),
                ( u'дегенеративная миопия', u'8.9', u'H44.2'),
                ( u'болезни зрительного нерва и зрительных путей', u'8.10', u'H46-H48'),
                ( u'атрофия зрительного нерва', u'8.10.1', u'H47.2'),
                ( u'болезни мышц глаза, нарушения содружественного движения глаз, аккомодации и рефракции', u'8.11', u'H49-H52'),
                ( u'миопия', u'8.11.1', u'H52.1'),
                ( u'астигматизм', u'8.11.2', u'H52.2'),
                ( u'слепота и пониженное зрение', u'8.12', u'H54'),
                ( u'из них:\n слепота обоих глаз', u'8.12.1', u'H54.0')
                ])
    else:
        MainRows.extend([
                ( u'из них:\n конъюнктивит', u'8.1', u'H10'),
                ( u'Кератит', u'8.2', u'H16'),
                ( u'из них язва роговицы', u'8.2.1', u'H16.0'),
                ( u'катаракта', u'8.3', u'H25-H26'),
                ( u'хориоретинальное воспаление', u'8.4', u'H30'),
                ( u'преретинопатия', u'8.5', u'H35.1'),
                ( u'глаукома', u'8.6', u'H40'),
                ( u'неврит зрительного нерва', u'8.7', u'H46'),
                ( u'болезни мышц глаза, нарушения содружественного движения глаз, аккомодации и рефракции', u'8.8', u'H49-H52'),
                ( u'из них:\n миопия', u'8.8.1', u'H52.1'),
                ( u'астигматизм', u'8.8.2', u'H52.2'),
                ( u'слепота и пониженное зрение', u'8.9', u'H54'),
                ( u'из них слепота обоих глаз', u'8.9.1', u'H54.0')
                ])

    MainRows.extend([
        ( u'болезни уха и сосцевидного отростка', u'9.0', u'H60-H95'),
        ( u'из них:\n болезни наружного уха', u'9.1', u'H60-H62' if templateIndex < 3 else u'H60-H61'),
        ( u'болезни среднего уха и сосцевидного отростка', u'9.2', u'H65-H75' if templateIndex < 3 else u'H65-H66, H68-H74'),
        ( u'из них:\n острый отит' if templateIndex < 3 else u'из них:\n острый средний отит', u'9.2.1', u'H65.0, H65.1, H66.0'),
        ( u'хронический отит' if templateIndex < 3 else u'хронический средний отит', u'9.2.2', u'H65.2-9, H66.1-4, H66.9' if templateIndex < 4 else u'H65.2-4, H66.1-3'),
        ( u'болезни слуховой (евстахиевой) трубы', u'9.2.3', u'H68-H69'),
        ( u'перфорация барабанной перепонки', u'9.2.4', u'H72'),
        ( u'другие болезни среднего уха и сосцевидного отростка', u'9.2.5', u'H74'),
        ( u'болезни внутреннего уха', u'9.3', u'H80-H83' if templateIndex < 3 else u'H80-H81, H83'),
        ( u'из них:\n отосклероз', u'9.3.1', u'H80'),
        ( u'болезнь Меньера', u'9.3.2', u'H81.0'),
        ( u'кондуктивная и нейросенсорная потеря слуха', u'9.4', u'H90'),
        ( u'из них:\n кондуктивная потеря слуха двусторонняя', u'9.4.1', u'H90.0'),
        ( u'нейросенсорная потеря слуха двусторонняя', u'9.4.2', u'H90.3'),
        ( u'болезни системы кровообращения', u'10.0', u'I00-I99'),
        ( u'из них:\n острая ревматическая лихорадка', u'10.1', u'I00-I02'),
        ( u'хронические ревматические болезни сердца', u'10.2', u'I05-I09'),
        ( u'из них:\n ревматические %s клапанов' % u'пороки' if templateIndex < 4 else u'поражения', u'10.2.1', u'I05-I08'),
        ( u'болезни, характеризующиеся повышенным кровяным давлением', u'10.3', u'I10-I13'),
        ( u'из них:\n эссенциальная гипертензия', u'10.3.1', u'I10'),
        ( u'гипертензивная болезнь сердца(гипертоническая болезнь с преимущественным поражением сердца)', u'10.3.2', u'I11'),
        ( u'гипертензивная (гипертоническая) болезнь с преимущественным  поражением  почек', u'10.3.3', u'I12'),
        ( u'гипертензивная (гипертоническая) болезнь с преимущественным  поражением сердца и  почек', u'10.3.4', u'I13'),
        ( u'ишемические болезни сердца', u'10.4', u'I20- I25')
        ])

    if categoryName not in ['children', 'childrenUpToOneYear']:
        MainRows.extend([
            ( u'из них:\n стенокардия', u'10.4.1', u'I20'),
            ( u'из нее: нестабильная стенокардия', u'10.4.1.1', u'I20.0'),
            ( u'острый инфаркт миокарда', u'10.4.2', u'I21'),
            ( u'повторный инфаркт миокарда', u'10.4.3', u'I22'),
            ( u'другие формы острых ишемических  болезней сердца', u'10.4.4', u'I24'),
            ( u'хроническая ишемическая болезнь   сердца', u'10.4.5', u'I25'),
            ( u'из нее постинфарктный кардиосклероз', u'10.4.5.1', u'I25.8')
            ])

    if templateIndex < 3:
        MainRows.extend([
        ( u'легочная эмболия', u'10.5', u'I26'),
        ( u'другие болезни сердца', u'10.6', u'I30-I51')])
        if templateIndex == 2:
            MainRows.append((u'из них:\n острый перикардит', u'10.6.1', u'I33'))
        MainRows.addMultiple([
            ( u'из них:\n острый и подострый эндокардит', u'I33', RowCounter.SubSub),
            ( u'острый миокардит', u'I40'),
            ( u'кардиомиопатия', u'I42')])
        MainRows.extend([
            ( u'цереброваскулярные болезни', u'10.7', u'I60-I69'),
            ( u'из них:\n субарахноидальное кровоизлияние', u'10.7.1', u'I60'),
            ( u'внутримозговое и другое внутричерепное кровоизлияние', u'10.7.2', u'I61, I62'),
            ( u'инфаркт мозга', u'10.7.3', u'I63'),
            ( u'инсульт, не уточненный, как кровоизлияние  или инфаркт', u'10.7.4', u'I64'),
            ( u'закупорка и стеноз прецеребральных, церебральных артерий, не приводящие к инфаркту мозга', u'10.7.5', u'I65- I66'),
            ( u'другие цереброваскулярные болезни', u'10.7.6', u'I67')
            ])
        if categoryName not in ['children', 'childrenUpToOneYear']:
            MainRows.extend([
                ( u'из них:\n церебральный атеросклероз', u'10.7.6.1', u'I67.2'),
                ( u'последствия цереброваскулярных болезней', u'10.7.7', u'I69')
                ])
        elif templateIndex == 2:
            MainRows.append(( u'последствия цереброваскулярных болезней', u'10.7.7', u'I69'))

        if templateIndex < 2 or categoryName in ['children', 'childrenUpToOneYear']:
            MainRows.append(( u'эндартериит, тромбангиит облитерирующий', u'10.8', u'I70.2, I73.1'))
        MainRows.addMultiple([
            ( u'болезни вен, лимфатических сосудов и лимфатических узлов', u'I80-I89', RowCounter.Sub),
            ( u'из них:\n флебит и тромбофлебит', u'I80', RowCounter.SubSub),
            ( u'тромбоз портальной вены', u'I81', RowCounter.SubSub),
            ( u'варикозное расширение вен нижних конечностей', u'I83', RowCounter.SubSub)])
        if templateIndex < 2:
            MainRows.append(( u'геморрой', u'10.9.4', u'I84'))
    else:
        MainRows.extend([
            ( u'другие болезни сердца', u'10.5', u'I30-I51'),
            ( u'из них:\n острый и подострый перикардит', u'10.5.1', u'I30'),
            ( u'из них:\n острый и подострый эндокардит', u'10.5.2', u'I33'),
            ( u'острый миокардит', u'10.5.3', u'I40'),
            ( u'кардиомиопатия', u'10.5.4', u'I42'),
            ( u'цереброваскулярные болезни', u'10.6', u'I60-I69'),
            ( u'из них:\n субарахноидальное кровоизлияние', u'10.6.1', u'I60'),
            ( u'внутримозговое и другое внутричерепное кровоизлияние', u'10.6.2', u'I61, I62'),
            ( u'инфаркт мозга', u'10.6.3', u'I63'),
            ( u'инсульт, не уточненный, как кровоизлияние  или инфаркт', u'10.6.4', u'I64'),
            ( u'закупорка и стеноз прецеребральных, церебральных артерий, не приводящие к инфаркту мозга', u'10.6.5', u'I65- I66'),
            ( u'другие цереброваскулярные болезни', u'10.6.6', u'I67')
            ])
        if categoryName == 'teenagers':
            MainRows.append(( u'из них:\n церебральный атеросклероз', u'10.6.6.1', u'I67.2'))
        MainRows.append(( u'последствия цереброваскулярных болезней', u'10.6.7', u'I69'))
        if categoryName not in ['children', 'childrenUpToOneYear']:
            MainRows.append(( u'эндартериит, тромбангиит облитерирующий', u'10.7', u'I70.2, I73.1'))
        MainRows.addMultiple([
                ( u'болезни вен, лимфатических сосудов и лимфатических узлов', u'I80-I89, I85-I89', RowCounter.Sub),
                ( u'из них:\n флебит и тромбофлебит', u'I80', RowCounter.SubSub),
                ( u'тромбоз портальной вены', u'I81'),
                ( u'варикозное расширение вен нижних конечностей', u'I83')])



    MainRows.extend([( u'болезни органов дыхания', u'11.0', u'J00-J98'),
                     ( u'из них:\n острые респираторные инфекции верхних дыхательных путей', u'11.1', u'J00-J06'),
                     ( u'из них:\n острый ларингит и трахеит', u'11.1.1', u'J04'),
                     ( u'острый обструктивный ларингит (круп) и эпиглоттит', u'11.1.2', u'J05'),
        ])
    if templateIndex < 3:
        MainRows.extend([( u'грипп', u'11.2', u'J10-J11'),
                         ( u'острые респираторные инфекции нижних дыхательных путей', u'11.3', u'J20-J22'),
                         ( u'пневмония', u'11.4', u'J12-J16, J18')])
    else:
        MainRows.extend([( u'грипп', u'11.2', u'J09-J11'),
                         ( u'пневмония', u'11.3', u'J12-J16, J18'),
                         ( u'острые респираторные инфекции нижних дыхательных путей', u'11.4', u'J20-J22')])
    MainRows.extend([( u'аллергический ринит (поллиноз)', u'11.5', u'J30.1'),
                     ( u'хронические болезни миндалин и аденоидов, перитонзиллярный абсцесс', u'11.6', u'J35-J36')
        ])

    if templateIndex == 0 and categoryName in ['children', 'childrenUpToOneYear', 'teenagers']:
        MainRows.extend([
            ( u'хронический ларингит', u'11.7', u'J37.0'),
            ( u'болезни голосовых складок и гортани', u'11.8', u'J38'),
            ( u'бронхит хронический и неуточненный, эмфизема', u'11.9', u'J40-J43'),
            ( u'другая хроническая обструктивная легочная, бронхоэктатическая болезнь', u'11.10', u'J44, J47'),
            ( u'астма, астматический статус', u'11.11', u'J45,J46'),
            ( u'болезни легкого, вызванные внешними агентами', u'11.12', u'J60-J70'),
            ( u'интерстициальные, гнойные легочные болезни, другие болезни плевры', u'11.13', u'J84-J94')
            ])
    elif templateIndex >= 2:
        MainRows.extend([
            ( u'бронхит хронический и неуточненный, эмфизема', u'11.7', u'J40-J43'),
            ( u'другая хроническая обструктивная легочная болезнь', u'11.8', u'J44'),
            ( u'бронхоэктатическая болезнь', u'11.9', u'J47'),
            ( u'астма, астматический статус', u'11.10', u'J45, J46'),
            ( u'другие интерстициальные легочные болезни, гнойные и некротические состояния нижних дыхательных путей, другие болезни плевры',
                u'11.11', u'J84-J94' if templateIndex == 2 else u'J84-J90, J92-J94')
            ])
    else:
        MainRows.extend([
            ( u'бронхит хронический и неуточненный, эмфизема', u'11.7', u'J40-J43'),
            ( u'другая хроническая обструктивная легочная, бронхоэктатическая болезнь', u'11.8', u'J44, J47'),
            ( u'астма, астматический статус', u'11.9', u'J45, J46'),
            ( u'другие интерстициальные легочные болезни, гнойные и некротические состояния нижних дыхательных путей, другие болезни плевры', u'11.10', u'J84-J94')
            ])

    MainRows.extend([
        ( u'болезни органов пищеварения', u'12.0', u'K00-K92'),
        ( u'из них:\n язвенная болезнь желудка и 12-ти перстной кишки', u'12.1', u'K25-K26'),
        ( u'гастрит и дуоденит', u'12.2', u'K29'),
        ( u'грыжи', u'12.3', u'K40-K46'),
        ( u'неинфекционный энтерит и колит', u'12.4', u'K50-K52'),
        ( u'другие болезни кишечника', u'12.5', u'K55-K63'),
        ( u'из них:\n паралитический илеус и непроходимость кишечника без грыжи', u'12.5.1', u'K56')])
    if templateIndex >= 3:
         MainRows.extend([( u'геморой', u'12.6', u'K64'),
            ( u'болезни печени', u'12.7', u'K70-K76'),
            ( u'из них:\n фиброз и цирроз печени', u'12.7.1', u'K74'),
            ( u'болезни желчного пузыря, желчевыводящих путей', u'12.8', u'K80-K83'),
            ( u'болезни поджелудочной железы', u'12.9', u'K85-K86'),
            ( u'из них:\n острый панкреатит', u'12.9.1', u'K85')])
    elif templateIndex == 2:
        MainRows.extend([( u'геморой', u'12.6', u'K64'),
            ( u'перитонит', u'12.7', u'K65'),
            ( u'болезни печени', u'12.8', u'K70-K76'),
            ( u'из них:\n фиброз и цирроз печени', u'12.8.1', u'K74'),
            ( u'болезни желчного пузыря, желчевыводящих путей', u'12.9', u'K80-K83'),
            ( u'болезни поджелудочной железы', u'12.10', u'K85-K86'),
            ( u'острый панкреатит', u'12.11.1', u'K85')])
    else:
        MainRows.extend([( u'перитонит', u'12.6', u'K65'),
        ( u'болезни печени', u'12.7', u'K70-K76'),
        ( u'из них:\n фиброз и цирроз печени', u'12.7.1', u'K74'),
        ( u'болезни желчного пузыря, желчевыводящих путей', u'12.8', u'K80-K83'),
        ( u'болезни поджелудочной железы', u'12.9', u'K85-K86'),
        ( u'острый панкреатит', u'12.9.1', u'K85')])
    if templateIndex >= 3:
        MainRows.extend([( u'болезни кожи и подкожной клетчатки', u'13.0', u'L00-L98'),
                         ( u'из них:\n атопический дерматит', u'13.1', u'L13.0' if templateIndex < 4 else u'L20'),
                         ( u'контактный дерматит', u'13.2', u'L23-L25'),
                         ( u'другие дерматиты (экзема)', u'13.3', u'L30'),
                         ( u'псориаз', u'13.4', u'L40'),
                         ( u'из него:\n псориаз артропатический', u'13.4.1', u'L40.5'),
                         ( u'дискоидная красная волчанка', u'13.5', u'L93.0'),
                         ( u'локализованная склеродермия', u'13.6', u'L94.0')])
    elif templateIndex == 2:
        if categoryName.startswith('adults'):
            MainRows.extend([( u'болезни кожи и подкожной клетчатки', u'13.0', u'L00-L99'),
                             ( u'из них:\n пузырчатка', u'13.1', u'L10'),
                             ( u'буллезный пемфигоид', u'13.2', u'L12'),
                             ( u'дерматит герпетиформный Дюринга', u'13.3', u'L00-L99'),
                             ( u'из них:\n атопический дерматит', u'13.4', u'L13.0'),
                             ( u'контактный дерматит', u'13.5', u'L23-L25'),
                             ( u'другие дерматиты (экзема)', u'13.6', u'L30'),
                             ( u'псориаз', u'13.7', u'L40'),
                             ( u'из них:\n псориаз артропатический', u'13.7.1', u'L40.5'),
                             ( u'лишай красный плоский', u'13.8', u'L43'),
                             ( u'дискоидная красная волчанка', u'13.9', u'L93.0'),
                             ( u'локализованная склеродермия', u'13.10', u'L94.0')])
        else:
            MainRows.extend([( u'болезни кожи и подкожной клетчатки', u'13.0', u'L00-L99'),
                             ( u'из них:\n пузырчатка', u'13.1', u'L10'),
                             ( u'буллезный пемфигоид', u'13.2', u'L12'),
                             ( u'дерматит герпетиформный Дюринга', u'13.3', u'L00-L99'),
                             ( u'из них:\n атопический дерматит', u'13.4', u'L13.0'),
                             ( u'контактный дерматит', u'13.5', u'L23-L25'),
                             ( u'другие дерматиты (экзема)', u'13.6', u'L30'),
                             ( u'псориаз', u'13.7', u'L40'),
                             ( u'из них:\n псориаз артропатический', u'13.7.1', u'L40.5'),
                             ( u'дискоидная красная волчанка', u'13.8', u'L93.0'),
                             ( u'локализованная склеродермия', u'13.9', u'L94.0')])
    else:
        MainRows.extend([( u'болезни кожи и подкожной клетчатки', u'13.0', u'L00-L99'),
            ( u'из них:\n атопический дерматит', u'13.1', u'L20'),
            ( u'контактный дерматит', u'13.2', u'L23-L25')])
        if templateIndex >= 2:
            MainRows.append(( u'другие дерматиты (экзема)', u'13.3', u'L30'))
        else:
            MainRows.append(( u'дерматит (экзема)', u'13.3', u'L30.9'))
        MainRows.extend([( u'псориаз', u'13.4', u'L40'),
                        ( u'из них:\n псориаз артропатический', u'13.4.1', u'L40.5'),
                        ( u'лишай красный плоский', u'13.5', u'L43'),
                        ( u'дискоидная красная волчанка', u'13.6', u'L93.0'),
                        ( u'локализованная склеродермия', u'13.7', u'L94.0')])
    MainRows.extend([
        ( u'болезни костно-мышечной системы и соединительной ткани', u'14.0', u'M00-M99'),
        ( u'из них:\n артропатии', u'14.1', u'M00-M25'),
        ( u'из них:\n реактивные артропатии', u'14.1.1', u'M02'),
        ( u'ревматоидный артрит (серопозитивный и серонегативный)', u'14.1.2', u'M05-M06'),
    ])
    if templateIndex < 3 or categoryName not in ('seniors', 'seniors4000', 'adults', 'adults4003'):
        MainRows.append(( u'юношеский (ювенальный) артрит', u'14.1.3', u'M08'))
    MainRows.extend([( u'артрозы', u'14.1.4', u'M15-M19'),
        ( u'системные поражения соединительной ткани', u'14.2', u'M30-M35')])
    if templateIndex >= 2:
        MainRows.append(( u'из них:\n системная красная волчанка', u'14.2.1', u'M32'))

    MainRows.extend([( u'деформирующие дорсопатии', u'14.3', u'M40-M43'),
        ( u'спондилопатии', u'14.4', u'M45-M49' if templateIndex < 3 else u'M45-M48')])
    if templateIndex >= 2:
        MainRows.append(( u'из них:\n анкилозирующий спондилит', u'14.4.1', u'M45'))
    MainRows.extend([( u'поражение синовинальных оболочек и сухожилий', u'14.5', u'M65-M68' if templateIndex < 3 else u'M65-M67'),
        ( u'остеопатии и хондропатии', u'14.6', u'M80-M94'),
        ( u'из них:\n остеопорозы', u'14.6.1', u'M80-M81'),
        ( u'болезни мочеполовой системы', u'15.0', u'N00-N99'),
        ( u'из них:\n гломерулярные, тубулоинтерстициальные болезни почек, другие болезни почки и мочеточника',
            u'15.1', u'N00-N15, N25-N28' if templateIndex == 2 else u'N00-N07, N09-N15, N25-N28'),
        ( u'почечная недостаточность', u'15.2', u'N17-N19'),
        ( u'мочекаменная болезнь', u'15.3', u'N20-N21, N23'),
        ( u'другие болезни мочевой системы', u'15.4', u'N30-N32, N34-N36, N39'),
        ( u'болезни предстательной железы', u'15.5', u'N40-N42')
        ])
    if categoryName in ('children', 'childrenUpToOneYear', 'teenagers'):
        if templateIndex < 3:
            MainRows.extend([
                ( u'доброкачественная дисплазия молочной железы', u'15.6', u'N60'),
                ( u'воспалительные болезни женских тазовых органов', u'15.7', u'N70-N77'),
                ( u'сальпингит и оофорит', u'15.7.1', u'N70'),
                ( u'эндометриоз', u'15.8', u'N80'),
                ( u'эрозия и эктропион шейки матки', u'15.9', u'N86'),
                ( u'расстройства менструаций', u'15.10', u'N91-N94')
            ])
        else:
            MainRows.extend([
                ( u'доброкачественная дисплазия молочной железы', u'15.7', u'N60'),
                ( u'воспалительные болезни женских тазовых органов', u'15.8', u'N70-N77' if templateIndex < 4 else u'N70-N73, N75-N76'),
                ( u'сальпингит и оофорит', u'15.8.1', u'N70'),
                ( u'эндометриоз', u'15.9', u'N80'),
                ( u'эрозия и эктропион шейки матки', u'15.10', u'N86'),
                ( u'расстройства менструаций', u'15.11', u'N91-N94')
            ])
    else:
        if templateIndex < 3 or categoryName not in ('seniors', 'seniors4000'):
            MainRows.append(( u'мужское бесплодие', u'15.6', u'N46'))
        MainRows.extend([
            ( u'доброкачественная дисплазия молочной железы', u'15.7', u'N60'),
            ( u'воспалительные болезни женских тазовых органов', u'15.8', u'N70-N77'),
            ( u'сальпингит и оофорит', u'15.8.1', u'N70'),
            ( u'эндометриоз', u'15.9', u'N80'),
            ( u'эрозия и эктропион шейки матки', u'15.10', u'N86'),
            ( u'расстройства менструаций', u'15.11', u'N91-N94')])
        if templateIndex < 3:
            MainRows.add( u'женское бесплодие', u'N97', MainRows.Sub)
    MainRows.append(
        ( u'беременность, роды и послеродовой период', u'16.0', u'O00-O99'))
    if templateIndex < 3:
        MainRows.append(( u'отдельные состояния, возникающие в перинатальном периоде', u'17.0', u'P00-P96'))
    elif categoryName in ('adults', 'adults4003', 'teenagers'):
        MainRows.append(( u'отдельные состояния, возникающие в перинатальном периоде', u'17.0', u'P00-P04'))
    elif categoryName in ['children', 'childrenUpToOneYear']:
        MainRows.append(( u'отдельные состояния, возникающие в перинатальном периоде', u'17.0', u'P05-P96'))
    MainRows.extend([( u'врожденные аномалии (пороки развития), деформации и хромосомные нарушения', u'18.0', u'Q00-Q99'),
        ( u'из них:\n врожденные аномалии %sнервной системы' % u'' if templateIndex < 4 else u'развития ', u'18.1', u'Q00-Q07')
        ])
    if templateIndex == 0:
        MainRows.extend([
                ( u'врожденные аномалии системы кровообращения', u'18.2', u'Q20-Q28'),
                ( u'врожденные аномалии тела и шейки матки, другие врожденные аномалии женских половых органов', u'18.3', u'Q50-Q52'),
                ( u'неопределенность пола и псевдогермафродитизм', u'18.4', u'Q56')
                ])
        if categoryName in ['children', 'childrenUpToOneYear', 'teenagers']:
            MainRows.append(( u'врожденные деформации бедра', u'18.5', u'Q65'))
        else:
            MainRows.append(( u'врожденный ихтиоз', u'18.5', u'Q80'))
        MainRows.extend([
                ( u'нейрофиброматоз', u'18.6', u'Q85.0'),
                ( u'синдром Дауна', u'18.7', u'Q90')
                ])
    elif templateIndex >= 2:
        MainRows.extend([
                ( u'врожденная глаукома', u'18.2', u'Q10-Q15'),
                ( u'врожденные аномалии системы кровообращения', u'18.3', u'Q20-Q28'),
                ( u'врожденные аномалии тела и шейки матки, другие врожденные аномалии женских половых органов', u'18.4', u'Q50-Q52'),
                ( u'неопределенность пола и псевдогермафродитизм', u'18.5', u'Q56'),
                ( u'врожденные деформации бедра', u'18.6', u'Q65'),
                ( u'врожденный ихтиоз', u'18.7', u'Q80'),
                ( u'нейрофиброматоз', u'18.8', u'Q85.0'),
                ( u'синдром Дауна', u'18.9', u'Q90')
                ])
    else:
        MainRows.extend([
                ( u'врожденная %s' % u'глаукома' if templateIndex < 4 else u'аномалии глаза', u'18.2', u'Q15.0'),
                ( u'врожденные аномалии системы кровообращения', u'18.3', u'Q20-Q28'),
                ( u'врожденные аномалии %sженских половых органов' % u'тела и шейки матки, другие врожденные аномалии 'if templateIndex < 4 else u'', u'18.4', u'Q51-Q52'),
                ( u'неопределенность пола и псевдогермафродитизм', u'18.5', u'Q56'),
                ( u'врожденные деформации бедра', u'18.6', u'Q65'),
                ( u'врожденный ихтиоз', u'18.7', u'Q80'),
                ( u'нейрофиброматоз', u'18.8', u'Q85.0'),
                ( u'синдром Дауна', u'18.9', u'Q90')
                ])
    #MainRows.append(( u'симптомы, признаки и отклонения от нормы, выявленные при клинических и лабораторных исследованиях, не классифицированные в других рубриках', u'19.0', u'R00-R99'))
    MainRows.add(u'симптомы, признаки и отклонения от нормы, выявленные при клинических и лабораторных исследованиях, не классифицированные в других рубриках', u'R00-R99', RowCounter.Main)
    if templateIndex < 2:
        MainRows.addGroup([
            ( u'в том числе, симптомы и признаки, относящиеся к системам кровообращения и дыхания', u'R00-R09'),
            ( u'симптомы и признаки, относящиеся к системе пищеварения и брюшной полости', u'R10-R19'),
            ( u'симптомы и признаки, относящиеся к коже и подкожной клетчатке', u'R20-R23'),
            ( u'симптомы и признаки, относящиеся к нервной и костно-мышечной системам',u'R25-R29'),
            ( u'симптомы и признаки, относящиеся к мочевой системе', u'R30-R39'),
            ( u'симптомы и признаки, относящиеся к познавательной способности, восприятию, эмоциональному состоянию и поведению', u'R40-R46'),
            ( u'симптомы и признаки, относящиеся к речи и голосу', u'R47-R49'),
            ( u'общие симптомы и признаки', u'R50-R69'),
            ( u'отклонения от нормы, выявленные при исследовании крови, при отсутствии диагноза', u'R70-R79'),
            ( u'отклонения от нормы, выявленные при исследовании мочи, при отсутствии диагноза', u'R80-R82'),
            ( u'отклонения от нормы, выявленные при исследовании других жидкостей, субстанций и тканей организма, при отсутствии диагноза', u'R83-R89'),
            ( u'отклонения от нормы, выявленные при диагностических исследованиях с получением изображений и функциональных исследованиях, при отсутствии диагноза', u'R90-R94'),
            ( u'неточно обозначенные и неизвестные причины смерти', u'R95-R99')], RowCounter.Sub)
    MainRows.append(( u'травмы, отравления и некоторые другие последствия воздействия внешних причин', u'20.0', u'S00-T98'))
    return MainRows.getData()

def getCompRows(templateIndex):
    if templateIndex >= 2:
        CompRows = [
            (u'Всего', u'1.0', u'Z00-Z99'),
            (u'из них:\n обращения в учреждения здравоохранения для медицинского осмотра и обследования', u'1.1', u'Z00-Z13'),
            (u'из них:\n обращения в связи с получением медицинских документов', u'1.1.1', u'Z02.7'),
            (u'потенциальная опасность для здоровья, связанная с инфекционными болезнями', u'1.2', u'Z20-Z29'),
            (u'из них:\n носительство возбудителя инфекционной болезни', u'1.2.1', u'Z22'),
            (u'обращения в учреждения здравоохранения в связи с обстоятельствами, относящимися к репродуктивной функции', u'1.3', u'Z30-Z39'),
            (u'обращения в учреждения здравоохранения в связи с необходимостью проведения специфических процедур и получения медицинской помощи', u'1.4', u'Z40-Z54'),
            (u'из них:\n помощь, включающая использование реабилитационных процедур', u'1.4.1', u'Z50'),
            (u'паллиативная помощь', u'1.4.2', u'Z51.5'),
            (u'потенциальная опасность для здоровья, связанная с социально-экономическими и психосоциальными обстоятельствами', u'1.5', u'Z55-Z65'),
            (u'обращения в учреждения здравоохранения в связи с другими обстоятельствами', u'1.6', u'Z70-Z76')
            ]
        if templateIndex == 2:
            CompRows.extend([(u'потенциальная опасность для здоровья, связанная с личным или семейным анамнезом и определенными обстоятельствами, влияющими на здоровье', u'1.7', u'Z80-Z99'),
                             (u'из них:\n наличие илеостомы, колостомы', u'1.7.1', u'Z93.2, Z93.3')])
        else:
            CompRows.extend([(u'из них:\n проблемы, связанные с образом жизни', u'1.6.1', u'Z72'),
                             (u'потенциальная опасность для здоровья, связанная с личным или семейным анамнезом и определенными обстоятельствами, влияющими на здоровье', u'1.7', u'Z80-Z99'),
                             (u'из них:\n заболевания в семейном анамнезе', u'1.7.1', u'Z80-Z84'),
                             (u'наличие илеостомы, колостомы', u'1.7.2', u'Z93.2, Z93.3')])

    else:
        CompRows = [
            (u'Всего', u'1.0', u'Z00-Z99'),
            (u'из них:\n обращения в учреждения здравоохранения для медицинского осмотра и обследования', u'1.1', u'Z00-Z13'),
            (u'потенциальная опасность для здоровья, связанная с инфекционными болезнями', u'1.2', u'Z20-Z29'),
            (u'обращения в учреждения здравоохранения в связи с обстоятельствами, относящимися к репродуктивной функции', u'1.3', u'Z30-Z39'),
            (u'обращения в учреждения здравоохранения в связи с необходимостью проведения специфических процедур и получения медицинской помощи', u'1.4', u'Z40-Z54'),
            (u'потенциальная опасность для здоровья, связанная с социально-экономическими и психосоциальными обстоятельствами', u'1.5', u'Z55-Z65'),
            (u'обращения в учреждения здравоохранения в связи с другими обстоятельствами', u'1.6', u'Z70-Z76'),
            (u'потенциальная опасность для здоровья, связанная с личным или семейным анамнезом и определенными обстоятельствами, влияющими на здоровье', u'1.7', u'Z80-Z99')
        ]
    return CompRows

def selectData(params):
    categoryName =  forceString(params.get('categoryName', 'adults'))
    templateIndex = params.get('templateIndex', 0)
    registeredInPeriod = params.get('registeredInPeriod', False)
    begDate = params.get('begDate', QtCore.QDate())
    endDate = params.get('endDate', QtCore.QDate())
    eventPurposeIdList = params.get('eventPurposeIdList', [])
    eventTypeId = params.get('eventTypeId', None)
    orgStructureId = params.get('orgStructureId', None)
    personId = params.get('personId', None)
    sex = params.get('sex', 0)

    ageFrom = params.get('ageFrom', 0)
    ageTo = params.get('ageTo', 150)

    birthYearParam = params.get('birthYearParam', 0)
    birthYearFrom = params.get('birthYearFrom', 1900)
    birthYearTo = params.get('birthYearTo', QtCore.QDate().currentDate().year())

    socStatusClassId = params.get('socStatusClassId', None)
    socStatusTypeId = params.get('socStatusTypeId', None)
    areaIdEnabled = params.get('areaIdEnabled', None)
    areaId = params.get('areaId', None)
    locality = params.get('locality', 0)
    notConsider = params.get('notConsiderDigitsAfterDot',  False)
    visitEmergency = params.get('visitEmergency', False)
    onlyPermanentAttach = params.get('onlyPermanentAttach', False)
    specialityId = params.get('specialityId', None)
    hurtType = params.get('hurtType', None)

    db = QtGui.qApp.db
    tableDiagnosis  = db.table('Diagnosis')
    tableDiseaseCharacter = db.table('rbDiseaseCharacter')
    tableClient = db.table('Client')
    tableDiagnostic = db.table('Diagnostic')
    tablePerson = db.table('Person')
    tableEvent = db.table('Event')
    tableEventType = db.table('EventType')
    tableClientAddress = db.table('ClientAddress')

    cond = []
    cond.append(tableDiagnosis['deleted'].eq(0))
    cond.append(tableClientAddress['type'].eq(0))  # Address registration
    cond.append(tableDiagnosis['mod_id'].isNull())
    if categoryName == 'inset2008':
        cond.append(tableDiagnosis['MKB'].between('I60', 'I8'))
    #cond.append(db.joinOr([tableDiagnosis['setDate'].isNull(), tableDiagnosis['setDate'].lt(endDate.addDays(1))]))
    #cond.append(db.joinOr([tableDiagnosis['endDate'].ge(begDate), tableDiseaseCharacter['code'].eq('3')]))
    cond.append(tableDiagnosis['endDate'].between(begDate, endDate))
    # cond.append(tableDiseaseCharacter['code'].inInnerStmt('2, 3, 4'))

    diagnosticQuery = tableDiagnostic
    diagnosticCond = [ tableDiagnostic['diagnosis_id'].eq(tableDiagnosis['id']),
                       tableDiagnostic['deleted'].eq(0)
                     ]
    if registeredInPeriod:
        addDateInRange(diagnosticCond, tableDiagnostic['setDate'], begDate, endDate)
    if personId:
        diagnosticCond.append(tableDiagnostic['person_id'].eq(personId))
    elif orgStructureId:
        diagnosticQuery = diagnosticQuery.leftJoin(tablePerson, tablePerson['id'].eq(tableDiagnostic['person_id']))
        diagnosticCond.append(tablePerson['orgStructure_id'].inlist(getOrgStructureDescendants(orgStructureId)))
    else:
        diagnosticQuery = diagnosticQuery.leftJoin(tablePerson, tablePerson['id'].eq(tableDiagnostic['person_id']))
        diagnosticCond.append(tablePerson['org_id'].eq(QtGui.qApp.currentOrgId()))

    if specialityId and not personId:
        diagnosticCond.append(tablePerson['speciality_id'].eq(specialityId))
    if hurtType:
        tableClientWorkHurt = db.table('ClientWork_Hurt')
        tableClientWork = db.table('ClientWork')
        diagnosticQuery = diagnosticQuery.leftJoin(tableClientWorkHurt, tableClientWorkHurt['master_id'].eq(tableClientWork['client_id'].eq(tableClient['id'])))
        diagnosticCond.append(tableClientWorkHurt['hurtType_id'].eq(hurtType))

    if eventTypeId or eventPurposeIdList or not visitEmergency:
        diagnosticQuery = diagnosticQuery.leftJoin(tableEvent, tableEvent['id'].eq(tableDiagnostic['event_id']))
    if eventPurposeIdList or not visitEmergency:
        diagnosticQuery = diagnosticQuery.leftJoin(tableEventType, tableEventType['id'].eq(tableEvent['eventType_id']))

    if eventTypeId:
        diagnosticCond.append(tableEvent['eventType_id'].eq(eventTypeId))
    elif eventPurposeIdList:
        diagnosticCond.append(tableEventType['purpose_id'].inlist(eventPurposeIdList))

    if not visitEmergency:
        tableMedicalAidType = db.table('rbMedicalAidType')
        diagnosticQuery = diagnosticQuery.leftJoin(tableMedicalAidType, tableMedicalAidType['id'].eq(tableEventType['medicalAidType_id']))
        diagnosticCond.append(db.joinOr([tableMedicalAidType['code'].isNull(), tableMedicalAidType['code'].ne('4')]))

    cond.append(db.existsStmt(diagnosticQuery, diagnosticCond))

    if sex:
        cond.append(tableClient['sex'].eq(sex))
    if not birthYearParam and ageFrom <= ageTo:
        if categoryName.startswith('seniors'):
            cond.append('Diagnosis.endDate >= ADDDATE(Client.birthDate, INTERVAL IF(Client.sex = 2 AND %d < 55, 55, IF(Client.sex = 1 AND %d < 60, 60, %d)) YEAR)'%(ageFrom, ageFrom, ageFrom))
        elif categoryName == 'adults4003':
            cond.append('Diagnosis.endDate < SUBDATE(ADDDATE(Client.birthDate, INTERVAL IF(Client.sex = 2 AND %(age)d < 55, 55, IF(Client.sex = 1 AND %(age)d < 60, 60, %(age)d)) YEAR), 1)' % {'age': ageTo})
            cond.append('Diagnosis.endDate >= ADDDATE(Client.birthDate, INTERVAL %d YEAR)' % ageFrom)
        else:
            cond.append('Diagnosis.endDate >= ADDDATE(Client.birthDate, INTERVAL %d YEAR)' % ageFrom)
        if categoryName != 'adults4003':
            cond.append('Diagnosis.endDate < SUBDATE(ADDDATE(Client.birthDate, INTERVAL %d YEAR),1)'%(ageTo + 1))

    if birthYearParam and birthYearFrom <= birthYearTo:
        cond.append('YEAR(Client.birthDate) >= %s' % birthYearFrom)
        cond.append('YEAR(Client.birthDate) <= %s' % birthYearTo)
    if socStatusTypeId:
        subStmt = ('SELECT ClientSocStatus.id FROM ClientSocStatus WHERE '
                  +'ClientSocStatus.deleted=0 AND ClientSocStatus.client_id=Client.id AND '
                  +'ClientSocStatus.socStatusType_id=%d' % socStatusTypeId)
        cond.append('EXISTS('+subStmt+')\n')
    elif socStatusClassId:
        subStmt = ('SELECT ClientSocStatus.id FROM ClientSocStatus WHERE '
                  +'ClientSocStatus.deleted=0 AND ClientSocStatus.client_id=Client.id AND '
                  +'ClientSocStatus.socStatusClass_id=%d\n' % socStatusClassId)
        cond.append('EXISTS('+subStmt+')')
    if areaIdEnabled:
        stmtAddress = u'''%(joinType)s JOIN ClientAddress ON ClientAddress.client_id = Diagnosis.client_id
                        AND ClientAddress.id = (SELECT MAX(id) FROM ClientAddress AS CA WHERE CA.Type=1 and CA.client_id = Diagnosis.client_id)
%(joinType)s JOIN Address ON Address.id = ClientAddress.address_id''' % {'joinType' : 'LEFT' if categoryName == 'inset2008' else 'INNER'}
        if areaId:
            orgStructureIdList = getOrgStructureDescendants(areaId)
        else:
            orgStructureIdList = getOrgStructures(QtGui.qApp.currentOrgId())
        tableOrgStructureAddress = db.table('OrgStructure_Address')
        tableAddress = db.table('Address')
        subCond = [ tableOrgStructureAddress['master_id'].inlist(orgStructureIdList),
                    tableOrgStructureAddress['house_id'].eq(tableAddress['house_id']),
                  ]
        cond.append(db.existsStmt(tableOrgStructureAddress, subCond))
    else:
        stmtAddress = u''
    if locality:
        # 1: горожане, isClientVillager == 0 или NULL
        # 2: сельские жители, isClientVillager == 1
        cond.append('IFNULL(isClientVillager(Client.id), 0) = %d' % (locality-1))

    if categoryName == 'teenagers':
        groupCond = 'GROUP BY MKB, Client.id, diseaseCharacter, sex, firstInPeriod, observed, rbDiagnosisType.id'
    elif categoryName == 'inset2008':
        groupCond = 'GROUP BY clientAge, MKB, Client.id, firstInPeriod, observed'
    else:
        groupCond = 'GROUP BY MKB, Client.id, diseaseCharacter, firstInPeriod, observed, rbDiagnosisType.id'
        if categoryName.startswith('adults'):
            groupCond += (', Client.id' if notConsider else '')
    if templateIndex >= 3:
        groupCond += ', dispanser, prof'

    if onlyPermanentAttach:
        cond.append(havePermanentAttach(endDate))
    stmt = """
SELECT
   Diagnosis.MKB AS MKB,
   -- COUNT(*) AS sickCount,
   IF(rbDiseaseCharacter.code in (2, 3, 4), 1,COUNT(*))  AS sickCount,
   %(diseaseCharacter)s
   rbDiagnosisType.code AS diagnosisType,
   Client.id AS client_id,
   Client.sex AS sex,
   DATE(Diagnosis.setDate) AS DSetDate,
   DATE(Diagnosis.endDate) AS DEndDate,
   %(selectClientAge)s
   (%(firstInPeriod)s) AS firstInPeriod,
   IF((SELECT MAX(rbDispanser.observed)
    FROM
    Diagnostic AS D1
    LEFT JOIN rbDispanser ON rbDispanser.id = D1.dispanser_id
    WHERE
      D1.diagnosis_id = Diagnosis.id
      AND D1.endDate = (
        SELECT MAX(D2.endDate)
        FROM Diagnostic AS D2
        WHERE D2.diagnosis_id = Diagnosis.id
          AND D2.dispanser_id IS NOT NULL
          AND  D2.endDate<%(date)s))
          = 1, 1, 0) AS observed

FROM Diagnosis
 LEFT JOIN Client ON Client.id = Diagnosis.client_id AND Client.deleted = 0

/* INNER JOIN Diagnostic ON Diagnosis.id = Diagnostic.diagnosis_id and Diagnostic.deleted = 0
INNER JOIN Event on Diagnostic.event_id = Event.id and Event.deleted = 0
inner JOIN Client ON Event.client_id = Client.id and Client.deleted = 0 */


%(joinDispanser)s%(stmtAddress)s
LEFT JOIN rbDiagnosisType    ON rbDiagnosisType.id = Diagnosis.diagnosisType_id
LEFT JOIN rbDiseaseCharacter ON rbDiseaseCharacter.id = Diagnosis.character_id

INNER JOIN ClientAddress     ON ClientAddress.id = getClientRegAddressId(Client.id )
            AND ClientAddress.deleted = 0 and ClientAddress.address_id is NOT NULL

WHERE %(cond)s
 %(group)s
    """ % {'selectClientAge': 'age(Client.birthDate, Diagnosis.endDate) AS clientAge,' if categoryName in ['inset2008', 'children'] else '',
           'firstInPeriod': db.joinAnd([tableDiagnosis['setDate'].le(endDate), tableDiagnosis['setDate'].ge(begDate)]),
           'date': tableDiagnosis['setDate'].formatValue(endDate.addDays(1)),
           'stmtAddress': stmtAddress,
           'cond': db.joinAnd(cond),
           'group': groupCond,
           'diseaseCharacter': 'IFNULL(t.diseaseCharacter, rbDiseaseCharacter.code) AS diseaseCharacter,\n   '
                               't.dispanser,\n   t.prof,\n   t.dispAdult,' if templateIndex >= 3
           else 'rbDiseaseCharacter.code AS diseaseCharacter,',
           'joinDispanser': '' if templateIndex < 3 else '''
LEFT JOIN(
  SELECT Diagnosis.id AS diag_id,
    IF(Event.isPrimary = 2, 1, 0) AS isRepeat,
    MIN(rbDiseaseCharacter.code) AS diseaseCharacter,
    rbDispanser.code AS dispanser,
  -- IF(COUNT(rbEventTypePurpose.code = 2) > 2, 1, 0) AS prof,
   IF(eventKind_id = 3, 1, 0) AS prof,
  --  IF (rbEventProfile.regionalCode IN (261, 262), 1, 0) As prof,

    IF(eventKind_id IN (1,2), 1, 0) AS dispAdult
  FROM Diagnosis
  INNER JOIN Diagnostic ON Diagnosis.id = Diagnostic.diagnosis_id
  INNER JOIN rbDiseaseCharacter ON Diagnostic.character_id = rbDiseaseCharacter.id
  INNER JOIN Event ON Diagnostic.event_id = Event.id AND Event.deleted = 0
  INNER JOIN EventType ON Event.eventType_id = EventType.id AND EventType.deleted = 0
  INNER JOIN rbEventTypePurpose ON EventType.purpose_id = rbEventTypePurpose.id
  LEFT JOIN rbDispanser ON Diagnosis.dispanser_id = rbDispanser.id
  -- INNER JOIN rbEventProfile ON EventType.eventProfile_id = rbEventProfile.id
  LEFT JOIN rbEventKind ON rbEventKind.id = EventType.eventKind_id
  WHERE Diagnostic.deleted = 0 AND Diagnosis.deleted = 0
  GROUP BY Diagnosis.id
  ) t ON t.diag_id = Diagnosis.id
'''
           }
    return db.query(stmt)


def selectDataClient(params, boolThyroidosData = False):
    if boolThyroidosData:
        stmt="""
SELECT
   DISTINCT(Diagnosis.client_id),
  (SELECT begDate
   FROM ClientAttach LEFT JOIN rbAttachType ON ClientAttach.`attachType_id`=rbAttachType.`id`
   WHERE (ClientAttach.`client_id`=Diagnosis.client_id) AND (rbAttachType.`code`='8') AND (ClientAttach.`deleted`=0)
   LIMIT 0, 1) AS begDateDeath

    FROM Diagnosis
    LEFT JOIN Client ON Client.id = Diagnosis.client_id and Client.deleted = 0
    %s
    LEFT JOIN rbDiagnosisType    ON rbDiagnosisType.id = Diagnosis.diagnosisType_id
    LEFT JOIN rbDiseaseCharacter ON rbDiseaseCharacter.id = Diagnosis.character_id
        INNER JOIN ClientAddress ON ClientAddress.id = getClientRegAddressId(Client.id )
    AND ClientAddress.deleted = 0 and ClientAddress.address_id is NOT NULL
    WHERE %s AND (ClientAddress.type = 0) AND (Diagnosis.MKB >= 'E00' AND Diagnosis.MKB <= 'E07')
    AND EXISTS(SELECT MAX(rbDispanser.observed)
    FROM
    Diagnostic AS D1
    LEFT JOIN rbDispanser ON rbDispanser.id = D1.dispanser_id
    WHERE
      D1.diagnosis_id = Diagnosis.id
      AND D1.endDate = (
        SELECT MAX(D2.endDate)
        FROM Diagnostic AS D2
        WHERE D2.diagnosis_id = Diagnosis.id
          AND D2.dispanser_id IS NOT NULL
          AND  D2.endDate < %s))
    """
    else:
        stmt="""
SELECT
   DISTINCT(Diagnosis.client_id),
   rbDiseaseCharacter.code AS diseaseCharacter,
   (%s) AS firstInPeriod,
   IF((SELECT MAX(rbDispanser.observed)
    FROM
    Diagnostic AS D1
    LEFT JOIN rbDispanser ON rbDispanser.id = D1.dispanser_id
    WHERE
      D1.diagnosis_id = Diagnosis.id
      AND D1.endDate = (
        SELECT MAX(D2.endDate)
        FROM Diagnostic AS D2
        WHERE D2.diagnosis_id = Diagnosis.id
          AND D2.dispanser_id IS NOT NULL
          AND  D2.endDate<%s))
          = 1, 1, 0) AS observed

FROM Diagnosis
LEFT JOIN Client ON Client.id = Diagnosis.client_id AND Client.deleted = 0
%s
LEFT JOIN rbDiagnosisType    ON rbDiagnosisType.id = Diagnosis.diagnosisType_id
LEFT JOIN rbDiseaseCharacter ON rbDiseaseCharacter.id = Diagnosis.character_id
INNER JOIN ClientAddress ON ClientAddress.id = getClientRegAddressId(Client.id )
    AND ClientAddress.deleted = 0 and ClientAddress.address_id is NOT NULL
WHERE %s
GROUP BY Diagnosis.client_id
ORDER BY firstInPeriod DESC, observed DESC
    """

    categoryName =  forceString(params.get('categoryName', 'adults'))
    registeredInPeriod = params.get('registeredInPeriod', False)
    begDate = params.get('begDate', QtCore.QDate())
    endDate = params.get('endDate', QtCore.QDate())
    eventPurposeIdList = params.get('eventPurposeIdList', [])
    eventTypeId = params.get('eventTypeId', None)
    orgStructureId = params.get('orgStructureId', None)
    personId = params.get('personId', None)
    sex = params.get('sex', 0)
    ageFrom = params.get('ageFrom', 18)
    ageTo = params.get('ageTo', 150)

    birthYearParam = params.get('birthYearParam', 0)
    birthYearFrom = params.get('birthYearFrom', 1900)
    birthYearTo = params.get('birthYearTo', QtCore.QDate().currentDate().year())

    socStatusClassId = params.get('socStatusClassId', None)
    socStatusTypeId = params.get('socStatusTypeId', None)
    areaIdEnabled = params.get('areaIdEnabled', None)
    areaId = params.get('areaId', None)
    locality = params.get('locality', 0)
    visitEmergency = params.get('visitEmergency', False)
    specialityId = params.get('specialityId', None)
    hurtType = params.get('hurtType', None)

    db = QtGui.qApp.db
    tableDiagnosis  = db.table('Diagnosis')
    tableDiseaseCharacter = db.table('rbDiseaseCharacter')
    tableClient = db.table('Client')
    tableDiagnostic = db.table('Diagnostic')
    tablePerson = db.table('Person')
    tableClientAddress = db.table('ClientAddress')

    cond = []
    cond.append(tableDiagnosis['deleted'].eq(0))
    cond.append(tableDiagnosis['mod_id'].isNull())
    # cond.append(db.joinOr([tableDiagnosis['setDate'].isNull(), tableDiagnosis['setDate'].lt(endDate.addDays(1))]))
    # cond.append(db.joinOr([tableDiagnosis['endDate'].ge(begDate), tableDiseaseCharacter['code'].eq('3')]))
    cond.append(tableDiagnosis['endDate'].between(begDate, endDate))
    # cond.append(tableDiseaseCharacter['code'].inInnerStmt('2, 3, 4'))

    diagnosticQuery = tableDiagnostic
    diagnosticCond = [ tableDiagnostic['diagnosis_id'].eq(tableDiagnosis['id']),
                       tableDiagnostic['deleted'].eq(0)
                     ]
    if registeredInPeriod:
        addDateInRange(diagnosticCond, tableDiagnostic['setDate'], begDate, endDate)
    if personId:
        diagnosticCond.append(tableDiagnostic['person_id'].eq(personId))
    elif orgStructureId:
        diagnosticQuery = diagnosticQuery.leftJoin(tablePerson, tablePerson['id'].eq(tableDiagnostic['person_id']))
        diagnosticCond.append(tablePerson['orgStructure_id'].inlist(getOrgStructureDescendants(orgStructureId)))
    else:
        diagnosticQuery = diagnosticQuery.leftJoin(tablePerson, tablePerson['id'].eq(tableDiagnostic['person_id']))
        diagnosticCond.append(tablePerson['org_id'].eq(QtGui.qApp.currentOrgId()))

    if specialityId and not personId:
        diagnosticCond.append(tablePerson['speciality_id'].eq(specialityId))
    if hurtType:
        tableClientWorkHurt = db.table('ClientWork_Hurt')
        tableClientWork = db.table('ClientWork')
        diagnosticQuery = diagnosticQuery.leftJoin(tableClientWorkHurt, tableClientWorkHurt['master_id'].eq(tableClientWork['client_id'].eq(tableClient['id'])))
        diagnosticCond.append(tableClientWorkHurt['hurtType_id'].eq(hurtType))
    tableEvent = db.table('Event')
    if eventTypeId or eventPurposeIdList or not visitEmergency:
        diagnosticQuery = diagnosticQuery.leftJoin(tableEvent, tableEvent['id'].eq(tableDiagnostic['event_id']))
    if eventPurposeIdList or not visitEmergency:
        tableEventType = db.table('EventType')
        diagnosticQuery = diagnosticQuery.leftJoin(tableEventType, tableEventType['id'].eq(tableEvent['eventType_id']))

    if eventTypeId:
        diagnosticCond.append(tableEvent['eventType_id'].eq(eventTypeId))
    elif eventPurposeIdList:
        diagnosticCond.append(tableEventType['purpose_id'].inlist(eventPurposeIdList))

    if not visitEmergency:
        tableMedicalAidType = db.table('rbMedicalAidType')
        diagnosticQuery = diagnosticQuery.leftJoin(tableMedicalAidType, tableMedicalAidType['id'].eq(tableEventType['medicalAidType_id']))
        diagnosticCond.append(db.joinOr([tableMedicalAidType['code'].isNull(), tableMedicalAidType['code'].ne('4')]))

    cond.append(db.existsStmt(diagnosticQuery, diagnosticCond))
    cond.append(tableClientAddress['type'].eq(0))

    if sex:
        cond.append(tableClient['sex'].eq(sex))
    if not birthYearParam and ageFrom <= ageTo:
        if categoryName.startswith('seniors'):
            cond.append('Diagnosis.endDate >= ADDDATE(Client.birthDate, INTERVAL IF(Client.sex = 2 AND %d < 55, 55, IF(Client.sex = 1 AND %d < 60, 60, %d)) YEAR)'%(ageFrom, ageFrom, ageFrom))
            cond.append(tableClient['sex'].ne(0))
        elif categoryName == 'adults4003':
            cond.append('Diagnosis.endDate < SUBDATE(ADDDATE(Client.birthDate, INTERVAL IF(Client.sex = 2 AND %(age)d < 55, 55, IF(Client.sex = 1 AND %(age)d < 60, 60, %(age)d)) YEAR), 1)' % {'age': ageTo})
            cond.append('Diagnosis.endDate >= ADDDATE(Client.birthDate, INTERVAL %d YEAR)' % ageFrom)
            cond.append(tableClient['sex'].ne(0))
        else:
            cond.append('Diagnosis.endDate >= ADDDATE(Client.birthDate, INTERVAL %d YEAR)'%ageFrom)

        cond.append('Diagnosis.endDate < SUBDATE(ADDDATE(Client.birthDate, INTERVAL %d YEAR),1)'%(ageTo+1))
    if birthYearParam and birthYearFrom <= birthYearTo:
        cond.append('YEAR(Client.birthDate) >= %s' % birthYearFrom)
        cond.append('YEAR(Client.birthDate) <= %s' % birthYearTo)
    if socStatusTypeId:
        subStmt = ('SELECT ClientSocStatus.id FROM ClientSocStatus WHERE '
                  +'ClientSocStatus.deleted=0 AND ClientSocStatus.client_id=Client.id AND '
                  +'ClientSocStatus.socStatusType_id=%d' % socStatusTypeId)
        cond.append('EXISTS('+subStmt+')')
    elif socStatusClassId:
        subStmt = ('SELECT ClientSocStatus.id FROM ClientSocStatus WHERE '
                  +'ClientSocStatus.deleted=0 AND ClientSocStatus.client_id=Client.id AND '
                  +'ClientSocStatus.socStatusClass_id=%d' % socStatusClassId)
        cond.append('EXISTS('+subStmt+')')
    if areaIdEnabled:
        stmtAddress = u'''INNER JOIN ClientAddress ON ClientAddress.client_id = Diagnosis.client_id
                        AND ClientAddress.id = (SELECT MAX(id) FROM ClientAddress AS CA WHERE CA.Type=1 and CA.client_id = Diagnosis.client_id)
INNER JOIN Address ON Address.id = ClientAddress.address_id'''
        if areaId:
            orgStructureIdList = getOrgStructureDescendants(areaId)
        else:
            orgStructureIdList = getOrgStructures(QtGui.qApp.currentOrgId())
        tableOrgStructureAddress = db.table('OrgStructure_Address')
        tableAddress = db.table('Address')
        subCond = [ tableOrgStructureAddress['master_id'].inlist(orgStructureIdList),
                    tableOrgStructureAddress['house_id'].eq(tableAddress['house_id']),
                  ]
        cond.append(db.existsStmt(tableOrgStructureAddress, subCond))
    else:
        stmtAddress = u''''''
    if locality:
        # 1: горожане, isClientVillager == 0 или NULL
        # 2: сельские жители, isClientVillager == 1
        cond.append('IFNULL(isClientVillager(Client.id), 0) = %d' % (locality-1))
    if boolThyroidosData:
        return db.query(stmt % (stmtAddress, db.joinAnd(cond), tableDiagnosis['setDate'].formatValue(endDate.addDays(1))))
    else:
        return db.query(stmt % (db.joinAnd([tableDiagnosis['setDate'].le(endDate),
                                        tableDiagnosis['setDate'].ge(begDate)]),
                                tableDiagnosis['setDate'].formatValue(endDate.addDays(1)),
                                stmtAddress,
                                db.joinAnd(cond)))


class CStatReportF12(CReport):
    def __init__(self, parent):
        CReport.__init__(self, parent)
        title = u'Ф.12'
        self.setTitle(title, u'Ф.12')


    def getDefaultParams(self):
        result = CReport.getDefaultParams(self)
        result['templateIndex'] = 0
        result['categoryName'] = 'adults'
        return result


    def getSetupDialog(self, parent):
        result = CReportAcuteInfectionsSetupDialog(parent)
        result.setAreaEnabled(True)
        result.setTemplateConfigurationEnabled(True)
        result.setAddressFilterVisible(False)
        result.setSpecialityPersonEnabled(True)
        result.setHurt(True)
        result.setTitle(self.title())
        result.lblOrgStructure.setToolTip(u'Подразделение врача в диагнозе.')
        result.setLastTemplateActive()
        return result

        # TODO: rewrite this
    def build(self, params):
        def removeUnneededTabProfileColumns(*columnIndexes):
            for idx in sorted(columnIndexes, reverse=True):
                del tabColProfile[idx]

        def removeUnneededTabColumns(*columnIndexes):
            for idx in sorted(columnIndexes, reverse=True):
                del tableColumns[idx]
                del colNumbers[idx]

        def removeUnneededColumns(*columnIndexes):
            for idx in sorted(columnIndexes, reverse=True):
                del tableColumns[idx]
                del colNumbers[idx]
                del tabColProfile[idx - 3]

        templateIndex = params.get('templateIndex', 0)
        categoryName =  params.get('categoryName', 'adults')

        title = u'Ф.12'
        if categoryName == 'inset2008':
            title = u'Ф.12 Вкладыш 2008'
            self.setTitle(title, title)
            MainRows = getMainRows(templateIndex, categoryName)
            mapMainRows = createMapCodeToRowIdx([row[2] for row in MainRows])
            children  = u'дети\n0-14 лет\nвключительно'
            teenagers = u'подростки\n15-17 лет\nвключительно'
            adult     = u'взрослые\n18 лет\nи старше'
            tableColumns = [
                ('30%', [u'Наименование болезней',                          '',      '', '1'], CReportBase.AlignLeft),
                ('3%', [u'№ строки',                                      '',      '', '2'], CReportBase.AlignLeft),
                ('8%', [u'код МКБ',                                        '',      '', '3'], CReportBase.AlignLeft),
                ('13%', [(u'Зарегистрировано %s с данным заболеванием' % u'больных' if templateIndex == 0 else u'пациентов'),
                                                                    u'всего', children, '4'], CReportBase.AlignRight),
                ('8%', [u'',                                        '',      teenagers, '5'], CReportBase.AlignRight),
                ('8%', [u'',                                        '',      adult,     '6'], CReportBase.AlignRight),
                ('8%', [u'',                               u'в т.ч. впервые', children, '7'], CReportBase.AlignRight),
                ('8?', [u'',                                        '',      teenagers, '8'], CReportBase.AlignRight),
                ('8?', [u'',                                        '',      adult,     '9'], CReportBase.AlignRight),
                ('8?', [u'Состоит на д.н. на конец периода',        '',      children, '10'], CReportBase.AlignRight),
                ('8?', [u'',                                        '',      teenagers,'11'], CReportBase.AlignRight),
                ('8?', [u'',                                        '',      adult,    '12'], CReportBase.AlignRight),
                ]
            reportMainData = [[0]*(len(tableColumns) - 3) for _ in xrange(len(MainRows))]
            query = selectData(params)
            self.setQueryText(forceString(query.lastQuery()))

            while query.next():
                record    = query.record()
                age       = forceInt(record.value('clientAge'))
                MKB       = normalizeMKB(forceString(record.value('MKB')))
                sickCount = forceInt(record.value('sickCount'))
                firstInPeriod = forceBool(record.value('firstInPeriod'))
                observed = forceBool(record.value('observed'))

                ageIndex = 0 if age <= 14 else 1 if age <= 17 else 2
                cols = [ageIndex]
                if firstInPeriod:
                    cols.append(3 + ageIndex)
                if observed:
                    cols.append(6 + ageIndex)

                for row in mapMainRows.get(MKB, []):
                    reportLine = reportMainData[row]
                    for col in cols:
                        reportLine[col] += sickCount

            # now text
            doc = QtGui.QTextDocument()
            cursor = QtGui.QTextCursor(doc)

            cursor.setCharFormat(CReportBase.ReportTitle)
            cursor.insertText(self.title())
            cursor.insertBlock()
            self.dumpParams(cursor, params)
            cursor.insertBlock()
            cursor.setCharFormat(CReportBase.ReportTitle)
            cursor.insertText(u'СВЕДЕНИЯ О ЧИСЛЕ ЦЕРЕБРОВАСКУЛЯРНЫХ ЗАБОЛЕВАНИЙ')
            cursor.insertBlock()
            cursor.insertText(u'1000')
            cursor.insertBlock()

            table = createTable(cursor, tableColumns, repeatHeader=True)
            table.mergeCells(0, 0, 3, 1)  # Наименование
            table.mergeCells(0, 1, 3, 1)  # № стр.
            table.mergeCells(0, 2, 3, 1)  # Код МКБ
            table.mergeCells(0, 3, 1, 6)  # Зарегистрировано
            table.mergeCells(1, 3, 1, 3)  # Всего
            table.mergeCells(1, 6, 1, 3)  # Впервые
            table.mergeCells(0, 9, 2, 3)  # Д.Н.

            for row, rowDescr in enumerate(MainRows):
                reportLine = reportMainData[row]
                i = table.addRow()
                for col, data in enumerate(rowDescr):
                    table.setText(i, col, data)
                for col, data in enumerate(reportLine, 3):
                    table.setText(i, col, data)

            # return doc
        # end of form inset2008 report

        # start other category if not inset2008
        MainRows = getMainRows(templateIndex, categoryName)
        CompRows = getCompRows(templateIndex)
        mapMainRows = createMapCodeToRowIdx( [row[2] for row in MainRows] )
        mapCompRows = createMapCodeToRowIdx( [row[2] for row in CompRows] )
        if categoryName == 'children':
            title = u'Ф.12 (дети)'
            formNumber = 1000
        elif categoryName == 'childrenUpToOneYear':
            title = u'Ф.12 (дети до 1-го года жизни)'
            formNumber = 1500
        elif categoryName == 'teenagers':
            title = u'Ф.12 (подростки)'
            formNumber = 2000
        elif categoryName == 'seniors':
            title = u'Ф.12 (пожилые)'
            formNumber = 3000
        elif categoryName == 'seniors4000':
            title = u'Ф.12 (взрослые 4000)'
            formNumber = 4000
        elif categoryName == 'adults':
            title = u'Ф.12 (взрослые)'
            formNumber = 3000
        elif categoryName == u'adults4003':
            title = u'Ф.12 (взрослые трудоспособного возраста)'
            formNumber = 4003
        else:
            title = u'Ф.12'
            formNumber = 9999
        self.setTitle(title, title)
        begDate = params.get('begDate', QtCore.QDate())
        endDate = params.get('endDate', QtCore.QDate())
        notConsiderDigitsAfterDot = params.get('notConsiderDigitsAfterDot',  False)
        if notConsiderDigitsAfterDot:
            clients = {}

        doc = QtGui.QTextDocument()
        cursor = QtGui.QTextCursor(doc)
        cursor.setCharFormat(CReportBase.ReportTitle)
        cursor.insertText(self.title())
        cursor.insertBlock()
        self.dumpParams(cursor, params)
        cursor.insertBlock()
        cursor.insertText(u'(%d)' % formNumber)
        cursor.insertBlock()
        hideMaleColumn = categoryName != 'teenagers'
        hideAdultColumn = categoryName == 'children'
        if templateIndex >= 3:
            tableColumns = [
                        ('22%',[u'Наименование классов и отдельных болезней'], CReportBase.AlignLeft),  # 0
                        ('4%', [u'№ строк'], CReportBase.AlignLeft),    # 1
                        ('8%', [u'Код по МКБ-10 пересмотра'], CReportBase.AlignLeft),   # 2
                        ('12%', [u'Зарегистрировано заболеваний', u'всего', u''], CReportBase.AlignRight),   # 3
                        ('4%', [u'', u'из них: юноши', u''], CReportBase.AlignRight),   # 4
                        ('4?', [u'', u'из них:',
                                u'в возрасте 0-4 года'], CReportBase.AlignRight),   # 5
                        ('4?', [u'', u'',
                                u'в возрасте 5-9 лет'], CReportBase.AlignRight),    # 6
                        ('4?', [u'', u'из них:' if categoryName == 'childrenUpToOneYear' else u'',
                                u'в возрасте до 1 мес.'], CReportBase.AlignRight),  # 7
                        ('4?', [u'', u'' if categoryName == 'childrenUpToOneYear' else u'из них:',
                                u'взято под диспансерное наблюдение'], CReportBase.AlignRight), # 8
                        ('4?', [u'', u'',
                                u'с впервые в жизни установленным диагнозом'], CReportBase.AlignRight), # 9
                        ('4?', [u'', u'из заболеваний с впервые в жизни установленным диагнозом:',
                                u'взято под диспансерное наблюдение'], CReportBase.AlignRight), # 10
                        ('4?', [u'', u'',
                                u'выявлено при профосмотре'], CReportBase.AlignRight),  # 11
                        ('4?', [u'', u'', u'выявлено при диспансеризации определённых групп взрослого населения'],
                         CReportBase.AlignRight),   # 12
                        ('4?', [u'', u'из заболеваний с впервые в жизни установленным диагнозом юноши'],
                         CReportBase.AlignRight),   # 13
                        ('4?', [u'Снято с диспансерного наблюдения'], CReportBase.AlignRight),  # 14
                        ('4?', [u'Состоит под диспансерным наблюдением на конец отчётного года'], CReportBase.AlignRight),  # 15
                        ('4?', [u'Из них юноши'], CReportBase.AlignRight),  # 16
                        ]

            if categoryName == 'children':
                tabColProfile = [[],
                                 [],
                                 [],
                                 ['disp'],
                                 ['chronicFirstTime'],
                                 ['chronicFirstTime', 'disp'],
                                 ['chronicFirstTime', 'prof'],
                                 ['dispAway'],
                                 ['observed'],
                                 ]
            elif categoryName == 'childrenUpToOneYear':
                tabColProfile = [[],
                                 [],
                                 ['disp'],
                                 ['chronicFirstTime'],
                                 ['chronicFirstTime', 'disp'],
                                 ['chronicFirstTime', 'prof'],
                                 ['dispAway'],
                                 ['observed'],
                                 ]
            elif categoryName == 'teenagers':
                tabColProfile = [[],
                                 ['male'],
                                 ['disp'],
                                 ['chronicFirstTime'],
                                 ['chronicFirstTime', 'disp'],
                                 ['chronicFirstTime', 'prof'],
                                 ['chronicFirstTime', 'dispAdult'],
                                 ['chronicFirstTime', 'disp', 'male'],
                                 ['dispAway'],
                                 ['observed'],
                                 ['observed', 'male']
                                 ]
            else:
                tabColProfile = [[],
                                 ['male'],
                                 ['disp'],
                                 ['chronicFirstTime'],
                                 ['chronicFirstTime', 'disp'],
                                 ['chronicFirstTime', 'prof'],
                                 ['chronicFirstTime', 'dispAdult'],
                                 ['chronicFirstTime', 'disp', 'male'],
                                 # ['firstInPeriod'],
                                 # ['firstInPeriod', 'disp'],
                                 # ['firstInPeriod', 'prof'],
                                 # ['firstInPeriod', 'dispAdult'],
                                 # ['firstInPeriod', 'disp', 'male'],
                                 ['dispAway'],
                                 ['observed'],
                                 ['observed', 'male']
                                 ]

            colNumbers = range(1, 18)
            if categoryName == 'childrenUpToOneYear':
                # removeUnneededColumns(4, 5, 6, 9, 10, 16)  # юноши + взрослое население
                removeUnneededTabColumns(4, 5, 6, 12, 13, 16)
                # removeUnneededTabProfileColumns(1, 7, 10)
            elif categoryName == 'children':
                # removeUnneededColumns(4, 7, 9, 10, 16)  # юноши + взрослое население
                removeUnneededTabColumns(4, 7, 12, 13, 16)
                # removeUnneededTabProfileColumns(1, 7, 10)
            elif categoryName == 'teenagers':
                removeUnneededTabColumns(5, 6, 7)
            elif hideMaleColumn:
                # removeUnneededColumns(4, 5, 6, 7, 10, 16)  # юноши
                removeUnneededTabColumns(4, 5, 6, 7, 13, 16)
                removeUnneededTabProfileColumns(1, 7, 10)
            else:
                # removeUnneededColumns(5, 6, 7)  # детское
                removeUnneededTabColumns(5, 6, 7)
                # removeUnneededTabProfileColumns(1, 7, 10)

            if categoryName == 'children':
                table = createTable(cursor, tableColumns, repeatHeader=True)
                table.mergeCells(0, 0, 3, 1)  # Наименование
                table.mergeCells(0, 1, 3, 1)  # № стр.
                table.mergeCells(0, 2, 3, 1)  # Код МКБ
                table.mergeCells(1, 3, 2, 1)  # Всего

                table.mergeCells(0, 3, 1, 7)  # Зарегистрировано заболеваний
                table.mergeCells(1, 4, 1, 2)
                table.mergeCells(1, 6, 1, 2)
                table.mergeCells(1, 8, 1, 2)

                table.mergeCells(0, 10, 3, 1)
                table.mergeCells(0, 11, 3, 1)
            elif categoryName == 'childrenUpToOneYear':
                table = createTable(cursor, tableColumns, repeatHeader=True)
                table.mergeCells(0, 0, 3, 1)  # Наименование
                table.mergeCells(0, 1, 3, 1)  # № стр.
                table.mergeCells(0, 2, 3, 1)  # Код МКБ
                table.mergeCells(1, 3, 2, 1)  # Всего

                table.mergeCells(0, 3, 1, 6)  # Зарегистрировано заболеваний
                table.mergeCells(1, 4, 1, 3)
                table.mergeCells(1, 7, 1, 2)

                table.mergeCells(0, 9, 3, 1)
                table.mergeCells(0, 10, 3, 1)
            else:
                table = createTable(cursor, tableColumns, repeatHeader=True)
                table.mergeCells(0, 0, 3, 1) # Наименование
                table.mergeCells(0, 1, 3, 1) # № стр.
                table.mergeCells(0, 2, 3, 1) # Код МКБ
                table.mergeCells(1, 3, 2, 1) # Всего

                table.mergeCells(0, 3, 1, 8 - 2 * hideMaleColumn - hideAdultColumn) # Зарегистрировано заболеваний
                table.mergeCells(1, 5 - hideMaleColumn, 1, 3 if categoryName == 'childrenUpToOneYear' else 2) # из них (из гр. 4)
                table.mergeCells(1, 7 - hideMaleColumn, 1, 3 - hideAdultColumn) # впервые
                table.mergeCells(0, 11 - 2 * hideMaleColumn - hideAdultColumn, 3, 1) # снято
                table.mergeCells(0, 12 - 2 * hideMaleColumn - hideAdultColumn, 3, 1) # на конец года
                if categoryName not in['children', 'childrenUpToOneYear']:
                    table.mergeCells(1, 9 - 2 * hideMaleColumn, 2, 1)  # диспансеризация взрослого населения
                if not hideMaleColumn: #юноши
                    table.mergeCells(1, 4, 2, 1)
                    table.mergeCells(1, 10, 2, 1)
                    table.mergeCells(0, 13, 3, 1)
                # return doc

            row = table.addRow()
            # for col, index in enumerate(colNumbers):  # Печатать номера, привязанные к названием колонок
            #    table.setText(row, col, index)
            for col in range(len(colNumbers)):  # Печатать номера по порядку
                table.setText(row, col, col + 1)
        else:
            if categoryName == 'teenagers':
                tableColumns = [
                        ('26%',[u'Нозологическая группа'    ], CReportBase.AlignLeft),
                        ('4%', [u'№ строки'                ], CReportBase.AlignLeft),
                        ('8%', [u'код МКБ'                  ], CReportBase.AlignLeft),
                        ('8%', [u'Всего',          u''      ], CReportBase.AlignRight),
                        ('4%', [u'в т.ч. юноши',   u''      ], CReportBase.AlignRight),
                        ('4%', [u'В т.ч. впервые', u'всего' ], CReportBase.AlignRight),
                        ('4%', [u'',        u'в т.ч. юноши' ], CReportBase.AlignRight),
                        ('4?', [u'',     u'острые', u'всего'], CReportBase.AlignRight),
                        ('4?', [u'',  u'',  u'в т.ч. юноши' ], CReportBase.AlignRight),
                        ('4?', [u'',    u'хрон.',  u'всего' ], CReportBase.AlignRight),
                        ('4?', [u'', u'',   u'в т.ч. юноши' ], CReportBase.AlignRight),
                        ('4?', [u'В т.ч. хрон.', u'всего',  ], CReportBase.AlignRight),
                        ('4?', [u'',        u'в т.ч. юноши' ], CReportBase.AlignRight),
                        ('4?', [u'Состоит на д.н. на конец периода', u'всего'], CReportBase.AlignRight),
                        ('4?', [u'',                          u'в т.ч. юноши'], CReportBase.AlignRight),
                        ]
                tabColProfile = [[],
                                 ['male'],
                                 ['firstInPeriodTotal'],
                                 ['firstInPeriod', 'male'],
                                 ['firstInPeriod', 'acute'],
                                 ['firstInPeriod', 'acute', 'male'],
                                 ['firstInPeriod', 'chronic'],
                                 ['firstInPeriod', 'chronic', 'male'],
                                 ['chronic'],
                                 ['chronic', 'male'],
                                 ['observed'],
                                 ['observed', 'male']
                                 ]
                table = createTable(cursor, tableColumns, repeatHeader=True)
                table.mergeCells(0, 0, 3, 1) # Наименование
                table.mergeCells(0, 1, 3, 1) # № стр.
                table.mergeCells(0, 2, 3, 1) # Код МКБ
                table.mergeCells(0, 3, 3, 1) # Всего
                table.mergeCells(0, 4, 3, 1) # в т.ч. юноши

                table.mergeCells(0, 5, 1, 6) # Впервые
                table.mergeCells(1, 5, 2, 1) # всего
                table.mergeCells(1, 6, 2, 1) # в т.ч. юноши
                table.mergeCells(1, 7, 1, 2) # хрон.
                table.mergeCells(1, 9, 1, 2) # всего

                table.mergeCells(0,11, 1, 2) # Хрон.
                table.mergeCells(1,11, 2, 1) # всего
                table.mergeCells(1,12, 2, 1) # в т.ч. юноши

                table.mergeCells(0,13, 1, 2) # Д.Н.
                table.mergeCells(1,13, 2, 1) # всего
                table.mergeCells(1,14, 2, 1) # в т.ч. юноши

            else:
                tableColumns = [
                    ('30%', [u'Нозологическая группа', u''    ], CReportBase.AlignLeft),
                    ('4%', [u'№ строки',              u''    ], CReportBase.AlignLeft),
                    ('8%', [u'Код МКБ',               u''     ], CReportBase.AlignLeft),
                    ('12%', [u'Всего',                u''      ], CReportBase.AlignRight),
                    ('8%', [u'В т.ч. впервые',       u'всего' ], CReportBase.AlignRight),
                    ('8%', [u'',                     u'острые'], CReportBase.AlignRight),
                    ('8?', [u'',                     u'хрон.' ], CReportBase.AlignRight),
                    ('8?', [u'В т.ч. хрон.',         u''      ], CReportBase.AlignRight),
                    ('8?', [u'Состоит на д.н. на конец периода',  u'' ], CReportBase.AlignRight),
                    ]
                tabColProfile = [[],
                                 ['firstInPeriodTotal'],
                                 ['acute'],
                                 ['firstInPeriod', 'chronic'],
                                 ['chronic'],
                                 ['observed']
                                 ]
                table = createTable(cursor, tableColumns, repeatHeader=True)
                table.mergeCells(0, 0, 2, 1) # Наименование
                table.mergeCells(0, 1, 2, 1) # № стр.
                table.mergeCells(0, 2, 2, 1) # Код МКБ
                table.mergeCells(0, 3, 2, 1) # Всего
                table.mergeCells(0, 4, 1, 3) # Впервые
                table.mergeCells(0, 7, 2, 1) # Хрон.
                table.mergeCells(0, 8, 2, 1) # Д.Н.

        rowSize = len(tableColumns) - 3
        reportMainData = [ [0] * rowSize for _ in xrange(len(MainRows)) ]
        reportCompData = [ [0] * rowSize for _ in xrange(len(CompRows)) ]
        query = selectData(params)
        self.setQueryText(forceString(query.lastQuery()))

        littleStrangers = [
            0,  # From 0 to 4
            0   # From 5 to 9
        ]
        lastcol = 0
        if formNumber in (1500, 3000, 4000):
            lastcol = 7
        elif formNumber == 1000:
            lastcol = 8
        elif formNumber == 2000:
            lastcol = 9

        while query.next():
            record = query.record()
            clientId = forceRef(record.value('client_id'))
            age = forceInt(record.value('clientAge'))
            DSetDate = forceDate(record.value('DSetDate'))
            MKB = normalizeMKB(forceString(record.value('MKB')))
            sickCount = forceInt(record.value('sickCount'))
            diseaseCharacter = forceString(record.value('diseaseCharacter'))
            diagnosisType = forceString(record.value('diagnosisType'))
            dispanser = forceString(record.value('dispanser'))
            sex = forceInt(record.value('sex'))
            firstInPeriod = forceBool(record.value('firstInPeriod'))
            observed = forceBool(record.value('observed'))
            rowCharacteristics = {
                'chronic': diseaseCharacter != '1',
                'chronicFirstTime': diseaseCharacter in ('1', '2'),
                'acute': diseaseCharacter == '1',
                'firstInPeriod': firstInPeriod,
                'firstInPeriodTotal': firstInPeriod or diseaseCharacter in ('1', '2'),
                'observed': observed,
                'male': sex == 1,
                'disp': dispanser in ('1', '2', '3', '4', '5', '6'),
                'dispAway': dispanser in ('3', '4', '5'),
                'dispAdult': forceBool(record.value('dispAdult')),
                'prof': forceBool(record.value('prof'))
            }

            cols = getColIndexesToFill(rowCharacteristics, tabColProfile)

            for row in mapMainRows.get(MKB, []):
                if notConsiderDigitsAfterDot and categoryName == 'adults':
                    if not (clientId,  row) in clients.keys():
                        clients[(clientId,  row)] = [MKB[:3]]
                    else:
                        if MKB[:3] in clients[(clientId, row)]:
                            continue
                        else:
                            clients[(clientId,  row)].append(MKB[:3])
                reportLine = reportMainData[row]
                if categoryName == 'children':
                    if 0 <= age <= 4:
                        reportLine[1] += sickCount
                        littleStrangers[0] += sickCount
                    elif 5 <= age <= 9:
                        reportLine[2] += sickCount
                        littleStrangers[1] += sickCount

                elif categoryName == 'childrenUpToOneYear':
                    if age == 0:  # 0 <= age <= 1:
                        reportLine[1] += sickCount

                for col in cols:
                    try:
                        if categoryName == 'children' and col in [1, 2]:
                            continue
                        if categoryName == 'childrenUpToOneYear' and col in [1]:
                            continue
                        """
                            a) в графе 15 таблиц 1000, 1500, 2000, 3000, 4000 считать заболевания с диагнозами J12-J16, J18
                               только за 2 полугодие, т.е. с 07 месяца
                            б) в графе 15 таблиц 2000, 3000, 4000 считать заболевания с диагнозами I21, I22, I60-I66 только
                               за декабрь
                            в) в графе 15 таблиц 1000, 2000, 3000, 4000 считать заболевания с диагнозами I00-I02
                              (прим.Дороговой М.) только за 10, 11 и 12 месяцы
                        """
                        if col == lastcol:
                            if formNumber in (1000, 1500, 2000, 3000, 4000):
                                if ("J12" in str(MKB) or "J13" in str(MKB) or "J14" in str(MKB) or "J15" in str(MKB)
                                    or "J16" in str(MKB) or "J18" in str(MKB))\
                                        and DSetDate.month() not in (7, 8, 9, 10, 11, 12):
                                    pass
                                elif formNumber in (2000, 3000, 4000) \
                                    and ("I21" in str(MKB) or "I22" in str(MKB) or "I60" in str(MKB)
                                    or "I61" in str(MKB) or "I62" in str(MKB) or "I63" in str(MKB)
                                    or "I64" in str(MKB) or "I65" in str(MKB) or "I66" in str(MKB)) \
                                        and DSetDate.month() != 12:
                                    pass
                                elif formNumber in (1000, 2000, 3000, 4000) \
                                    and ("I00" in str(MKB) or "I01" in str(MKB) or "I02" in str(MKB)) \
                                        and DSetDate.month() not in (10, 11, 12):
                                    pass
                                else:
                                    reportLine[col] += sickCount
                            else:
                                reportLine[col] += sickCount

                        else:
                            reportLine[col] += sickCount
                    except Exception as e:
                        print '[ReportF12] Error (current col=%s): %s' % (col, e)

                    # if col in [1, 6, 7] and len(reportLine) > 7:
                    #    reportLine[1] = reportLine[6] + reportLine[7]
                        # for col in cols:
                #     reportLine[col * (2 if categoryName == 'teenagers' else 1)] += sickCount
                # if categoryName == 'teenagers' and sex == 1:
                #     for col in cols:
                #         reportLine[col * 2 + 1] += sickCount
            if diagnosisType == '98':
                for row in mapCompRows.get(MKB, []):
                    reportLine = reportCompData[row]
                    reportLine[0] += sickCount
        registeredAll = 0
        registeredFirst = 0
        consistsByEnd = 0
        thyroidosUnhangAll = 0
        thyroidosUnhangDeath = 0
        clientIdList = []
        clientIdForThyroidosList = []

        queryClient = selectDataClient(params)
        self.setQueryText(self.queryText() + '\n\n\n' + forceString(queryClient.lastQuery()))

        while queryClient.next():
            record    = queryClient.record()
            clientId = forceRef(record.value('client_id'))
            # diseaseCharacter = forceString(record.value('diseaseCharacter'))
            firstInPeriod = forceBool(record.value('firstInPeriod'))
            observed = forceBool(record.value('observed'))

            if clientId and clientId not in clientIdList:
                clientIdList.append(clientId)
                registeredAll += 1
                if observed:
                    consistsByEnd += 1
                if firstInPeriod:
                    registeredFirst += 1

        queryThyroidos = selectDataClient(params, True)
        self.setQueryText(self._queryText + '\n\n\n' + forceString(queryThyroidos.lastQuery()))

        while queryThyroidos.next():
            record    = queryThyroidos.record()
            clientId = forceRef(record.value('client_id'))
            if clientId and clientId not in clientIdForThyroidosList:
                clientIdForThyroidosList.append(clientId)
                thyroidosUnhangAll += 1
                deathDate = forceDate(record.value('begDateDeath'))
                if deathDate and (begDate <= deathDate and deathDate <= endDate):
                    thyroidosUnhangDeath += 1

        for row, rowDescr in enumerate(MainRows):
            reportLine = reportMainData[row]
            i = table.addRow()
            for col, data in enumerate(rowDescr):
                table.setText(i, col, data)
            for col, data in enumerate(reportLine, 3):
                table.setText(i, col, data)
        thyroidosUnhangRecovery = thyroidosUnhangAll - thyroidosUnhangDeath
        cursor.movePosition(QtGui.QTextCursor.End)
        cursor.insertBlock()
        cursor.insertBlock()
        try:
            dispGroupNumber = 1 + (colNumbers.index(6) if templateIndex < 3 else colNumbers.index(13))
        except Exception as e:
            print '[ReportF12] %s' % e
            dispGroupNumber = 9

        inc = 1
        if forceString(params['categoryName']) == u'adults' and params['templateIndex'] == 3:
            dispGroupNumber += 2
            inc += 1
        source = u'(из гр. %d, стр. 1.0 )' % dispGroupNumber
        textForInserting1001 = u'(%d) Число физических лиц зарегистрированных больных – всего %d, из них с диагнозом,' \
                               u' установленным впервые в жизни, %d, состоит под диспансерным наблюдением на конец ' \
                               u'отчетного года %s %d .' %(formNumber + inc, registeredAll, registeredFirst, source, consistsByEnd)
        textForInserting1002 = u'' if templateIndex >= 3 else u'\n(%d) Из числа состоящих под диспансерным ' \
                               u'наблюдением больных с заболеваниями щитовидной железы (из стр. 5.1, гр. 6) снято с ' \
                               u'диспансерного наблюдения: всего %d, из них в связи с выздоровлением %d, ' \
                               u'со смертью %d. ' % (formNumber + 2, thyroidosUnhangAll, thyroidosUnhangRecovery, thyroidosUnhangDeath)
        if categoryName == 'children':
            textForInserting1003 = u'%d\nСостоит под диспансерным наблюдением на конец отчетного года (из стр.1.0 гр.15) ' \
                               u'детей в возрасте 0-4 года %s, 5-9 лет %d.' % (formNumber + 2, littleStrangers[0], littleStrangers[0])
        else:
            textForInserting1003 = u''

        textForInserting = textForInserting1001 + textForInserting1002 + textForInserting1003
        if templateIndex >= 1:
            textForInserting  = textForInserting.replace(u'больных', u'пациентов')
        cursor.insertText(textForInserting)
        cursor.insertBlock()

        cursor.movePosition(QtGui.QTextCursor.End)
        cursor.insertBlock()
        cursor.insertBlock()
        cursor.insertText(u'ФАКТОРЫ, ВЛИЯЮЩИЕ НА СОСТОЯНИЕ ЗДОРОВЬЯ НАСЕЛЕНИЯ')
        cursor.insertBlock()
        cursor.insertText(u'И ОБРАЩЕНИЯ В УЧРЕЖДЕНИЯ ЗДРАВООХРАНЕНИЯ')
        cursor.insertBlock()
        factorsBlockNumber = 4006 if categoryName == 'adults4003' else formNumber + 100
        cursor.insertText(u'(%d)' % factorsBlockNumber)
        cursor.insertBlock()
        cursor.insertBlock()

        if templateIndex < 4:
            tableColumns = [
                ('30%', [u'Нозологическая группа'], CReportBase.AlignLeft),
                ('4%', [u'№ строки'], CReportBase.AlignLeft),
                ('8?', [u'код МКБ'], CReportBase.AlignLeft),
                ('8?', [u'Обращений'], CReportBase.AlignRight),
            ]
            table = createTable(cursor, tableColumns)
        else:
            tableColumns = [
                ('30%', [u'Наименование'], CReportBase.AlignLeft),
                ('4%', [u'№ строки'], CReportBase.AlignLeft),
                ('8?', [u'код МКБ'], CReportBase.AlignLeft),
                ('12?', [u'Обращений', u'Всего'], CReportBase.AlignRight),
                ('8?', [u'', u'Из них: повторные'], CReportBase.AlignRight),
            ]
            table = createTable(cursor, tableColumns)
            table.mergeCells(0, 3, 1, 2)

        for row, rowDescr in enumerate(CompRows):
            reportLine = reportCompData[row]
            i = table.addRow()
            for col, data in enumerate(rowDescr):
                table.setText(i, col, data)
            table.setText(i, 3, reportLine[0])
            if templateIndex > 3:
                table.setText(i, 4, reportLine[0])
        return doc

def getColIndexesToFill(rowData, tabColProfile):
    """
    Generate cols instead of hardcoding
    :param rowData: dict
    :param tabColProfile: list
    :return: list
    """
    return [i for (i, data) in enumerate(tabColProfile) if not data or all(rowData[cond] for cond in data)]


class RowCounter(object):
    Main = 0
    Sub = 1
    SubSub = 2

    def __init__(self, data=None, maxLevel=4):
        self._data = data or []
        self._currentRowNumbers = [0] * maxLevel
        self._maxLevel = maxLevel
        self._currentLevel = RowCounter.Main

    def _fillRowNumbers(self, numbers):
        for i, x in enumerate(numbers):
            self._currentRowNumbers[i] = x
        for i in xrange(len(numbers), self._maxLevel):
            self._currentRowNumbers[i] = 0

    def append(self, row):
        """
        Добавить строку в список. Добавлено для обратной совместимости

        :param row: (tuple) список из 3 элементов: содержимое поля, номер строки, код МКБ
        :return: None
        """
        self._data.append(row)
        currentRowNumbers = [int(x) for x in row[1].split('.')]
        lastRowNumbersIndex = len(currentRowNumbers) - 1
        self._currentLevel = lastRowNumbersIndex - (currentRowNumbers[lastRowNumbersIndex] == 0)
        self._fillRowNumbers(currentRowNumbers)

    def extend(self, rows):
        """
        Расширить список self._data заданным. Добавлено для обратной совместимости.

        :param rows: list of tuples
        :return: None
        """
        self._data.extend(rows)
        currentRowNumbers = [int(x) for x in rows[-1][1].split('.')]
        self._fillRowNumbers(currentRowNumbers)

    def add(self, data, mkb, level=None):
        """
        Добавить в список номенклатуру заболевания и его МКБ. Рассчитать номер в соответствии с уровнем вложенности.
        Если level is None, использовать предыдущий level.
        :param data: (str) номенклатура заболевания
        :param mkb: (str) МКБ
        :param level: (int) or (None) уровень вложенности
        :return: None
        """
        if level is None:
            level = self._currentLevel
        else:
            self._currentLevel = level
        self._currentRowNumbers[level] += 1
        for i in xrange(level + 1, len(self._currentRowNumbers)):
            self._currentRowNumbers[i] = 0
        numberSize = 2 if level == 0 else level + 1
        self._data.append((data, '.'.join([str(x) for x in self._currentRowNumbers[:numberSize]]), mkb))

    def addMultiple(self, dataList, prevRowNumbers=None ):
        """
        Добавить список строк разной вложенности
        :param dataList: (list) список кортежей вида [(data, mkb, level)]
        :param prevRowNumbers: (list) or (None) номер предыдущей строки
        :return: None
        """
        if isinstance(prevRowNumbers, list):
            self._currentRowNumbers = prevRowNumbers
        for row in dataList:
            self.add(*row)

    def getData(self):
        return self._data

    def __iter__(self):
        return self._data.__iter__()


def main():
    import sys
    from s11main import CS11mainApp
    from library.database import connectDataBaseByInfo

    QtGui.qApp = CS11mainApp(sys.argv, False, 'S11App.ini', False)
    QtCore.QTextCodec.setCodecForTr(QtCore.QTextCodec.codecForName(u'utf8'))

    connectionInfo = {
        'driverName': 'mysql',
        'host': 'p48',
        'port': 3306,
        'database': 's11',
        'user': 'dbuser',
        'password': 'dbpassword',
        'connectionName': 'vista-med',
        'compressData': True,
        'afterConnectFunc': None
    }
    QtGui.qApp.db = connectDataBaseByInfo(connectionInfo)

    w = CStatReportF12(None)
    w.exec_()


if __name__ == '__main__':
    main()
