##################################################
# file: IdentService_client.py
# 
# client stubs generated by "ZSI.generate.wsdl2python.WriteServiceModule"
#     C:\Python27\Scripts\wsdl2py-script.py -b Ident.wsdl
# 
##################################################

from IdentService_types import *
import urlparse, types
from ZSI.TCcompound import ComplexType, Struct
from ZSI import client
from ZSI.schema import GED, GTD
import ZSI
from ZSI.generate.pyclass import pyclass_type

# Locator
class IdentServiceLocator:
    IdentPort_address = "http://10.20.31.213:80/identWS/services/Ident"
    def getIdentPortAddress(self):
        return IdentServiceLocator.IdentPort_address
    def getIdentPort(self, url=None, **kw):
        return IdentPortBindingSOAP(url or IdentServiceLocator.IdentPort_address, **kw)

# Methods
class IdentPortBindingSOAP:
    def __init__(self, url, **kw):
        kw.setdefault("readerclass", None)
        kw.setdefault("writerclass", None)
        # no resource properties
        self.binding = client.Binding(url=url, **kw)
        # no ws-addressing

    # op: doIdentification
    def doIdentification(self, request, **kw):
        if isinstance(request, doIdentification) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(doIdentificationResponse.typecode)
        return response

    # op: getIdTArea
    def getIdTArea(self, request, **kw):
        if isinstance(request, getIdTArea) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(getIdTAreaResponse.typecode)
        return response

    # op: getIdGeonimName
    def getIdGeonimName(self, request, **kw):
        if isinstance(request, getIdGeonimName) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(getIdGeonimNameResponse.typecode)
        return response

    # op: getIdGeonimType
    def getIdGeonimType(self, request, **kw):
        if isinstance(request, getIdGeonimType) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(getIdGeonimTypeResponse.typecode)
        return response

    # op: getIdSmo
    def getIdSmo(self, request, **kw):
        if isinstance(request, getIdSmo) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(getIdSmoResponse.typecode)
        return response

    # op: getIdNet
    def getIdNet(self, request, **kw):
        if isinstance(request, getIdNet) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(getIdNetResponse.typecode)
        return response

    # op: getIdMo
    def getIdMo(self, request, **kw):
        if isinstance(request, getIdMo) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(getIdMoResponse.typecode)
        return response

doIdentification = GED("http://identification.ws.eis.spb.ru/", "doIdentification").pyclass

doIdentificationResponse = GED("http://identification.ws.eis.spb.ru/", "doIdentificationResponse").pyclass

getIdTArea = GED("http://identification.ws.eis.spb.ru/", "getIdTArea").pyclass

getIdTAreaResponse = GED("http://identification.ws.eis.spb.ru/", "getIdTAreaResponse").pyclass

getIdGeonimName = GED("http://identification.ws.eis.spb.ru/", "getIdGeonimName").pyclass

getIdGeonimNameResponse = GED("http://identification.ws.eis.spb.ru/", "getIdGeonimNameResponse").pyclass

getIdGeonimType = GED("http://identification.ws.eis.spb.ru/", "getIdGeonimType").pyclass

getIdGeonimTypeResponse = GED("http://identification.ws.eis.spb.ru/", "getIdGeonimTypeResponse").pyclass

getIdSmo = GED("http://identification.ws.eis.spb.ru/", "getIdSmo").pyclass

getIdSmoResponse = GED("http://identification.ws.eis.spb.ru/", "getIdSmoResponse").pyclass

getIdNet = GED("http://identification.ws.eis.spb.ru/", "getIdNet").pyclass

getIdNetResponse = GED("http://identification.ws.eis.spb.ru/", "getIdNetResponse").pyclass

getIdMo = GED("http://identification.ws.eis.spb.ru/", "getIdMo").pyclass

getIdMoResponse = GED("http://identification.ws.eis.spb.ru/", "getIdMoResponse").pyclass
