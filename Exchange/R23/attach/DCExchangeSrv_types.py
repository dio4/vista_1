##################################################
# file: DCExchangeSrv_types.py
#
# schema types generated by "ZSI.generate.wsdl2python.WriteServiceModule"
#    /usr/bin/wsdl2py -b DCExchangeSrv.xml
#
##################################################

import ZSI
import ZSI.TCcompound
from ZSI.schema import LocalElementDeclaration, ElementDeclaration, TypeDefinition, GTD, GED
from ZSI.generate.pyclass import pyclass_type

##############################
# targetNamespace
# http://main.dce/
##############################

class ns0:
    targetNamespace = "http://main.dce/"

    class GetOrdersHospitalUrgently_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "GetOrdersHospitalUrgently")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.GetOrdersHospitalUrgently_Def.schema
            TClist = [ZSI.TC.String(pname="username", aname="_username", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="password", aname="_password", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sendercode", aname="_sendercode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._username = None
                    self._password = None
                    self._sendercode = None
                    return
            Holder.__name__ = "GetOrdersHospitalUrgently_Holder"
            self.pyclass = Holder

    class GetOrdersHospitalUrgentlyResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "GetOrdersHospitalUrgentlyResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.GetOrdersHospitalUrgentlyResponse_Def.schema
            TClist = [GTD("http://main.dce/","cOrderHospitalUrgentlyPackage",lazy=False)(pname="orderpack", aname="_orderpack", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._orderpack = None
                    return
            Holder.__name__ = "GetOrdersHospitalUrgentlyResponse_Holder"
            self.pyclass = Holder

    class cOrderHospitalUrgentlyPackage_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "cOrderHospitalUrgentlyPackage")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.cOrderHospitalUrgentlyPackage_Def.schema
            TClist = [GTD("http://main.dce/","cPackageInformation",lazy=False)(pname="p10_packinf", aname="_p10_packinf", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://main.dce/","cOrderHospitalUrgentlyList",lazy=False)(pname="p11_orderhospitalurgentlylist", aname="_p11_orderhospitalurgentlylist", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._p10_packinf = None
                    self._p11_orderhospitalurgentlylist = None
                    return
            Holder.__name__ = "cOrderHospitalUrgentlyPackage_Holder"
            self.pyclass = Holder

    class cPackageInformation_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "cPackageInformation")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.cPackageInformation_Def.schema
            TClist = [ZSI.TCtimes.gDateTime(pname="p10_pakagedate", aname="_p10_pakagedate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="p11_pakagesender", aname="_p11_pakagesender", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="p12_pakageguid", aname="_p12_pakageguid", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="p13_zerrpkg", aname="_p13_zerrpkg", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="p14_errmsg", aname="_p14_errmsg", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._p10_pakagedate = None
                    self._p11_pakagesender = None
                    self._p12_pakageguid = None
                    self._p13_zerrpkg = None
                    self._p14_errmsg = None
                    return
            Holder.__name__ = "cPackageInformation_Holder"
            self.pyclass = Holder

    class cOrderHospitalUrgentlyList_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "cOrderHospitalUrgentlyList")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.cOrderHospitalUrgentlyList_Def.schema
            TClist = [GTD("http://main.dce/","cOrderHospitalUrgently",lazy=False)(pname="l10_orcl", aname="_l10_orcl", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._l10_orcl = []
                    return
            Holder.__name__ = "cOrderHospitalUrgentlyList_Holder"
            self.pyclass = Holder

    class cOrderHospitalUrgently_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "cOrderHospitalUrgently")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.cOrderHospitalUrgently_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname="m10_nzap", aname="_m10_nzap", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="m11_modcd", aname="_m11_modcd", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname="m12_dttmfh", aname="_m12_dttmfh", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://main.dce/","cPerson",lazy=False)(pname="m13_pr", aname="_m13_pr", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="m14_kpkcd", aname="_m14_kpkcd", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="m15_sccd", aname="_m15_sccd", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="m16_crdnum", aname="_m16_crdnum", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="m17_mkbcd", aname="_m17_mkbcd", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="m18_zerr", aname="_m18_zerr", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="z99_guid", aname="_z99_guid", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._m10_nzap = None
                    self._m11_modcd = None
                    self._m12_dttmfh = None
                    self._m13_pr = None
                    self._m14_kpkcd = None
                    self._m15_sccd = None
                    self._m16_crdnum = None
                    self._m17_mkbcd = None
                    self._m18_zerr = None
                    self._z99_guid = None
                    return
            Holder.__name__ = "cOrderHospitalUrgently_Holder"
            self.pyclass = Holder

    class cPerson_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "cPerson")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.cPerson_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname="a10_dct", aname="_a10_dct", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="a11_dcs", aname="_a11_dcs", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="a12_dcn", aname="_a12_dcn", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="a13_smcd", aname="_a13_smcd", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="a14_trcd", aname="_a14_trcd", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="a15_pfio", aname="_a15_pfio", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="a16_pnm", aname="_a16_pnm", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="a17_pln", aname="_a17_pln", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="a18_ps", aname="_a18_ps", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname="a19_pbd", aname="_a19_pbd", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="a20_pph", aname="_a20_pph", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="a21_ps", aname="_a21_ps", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="a22_pn", aname="_a22_pn", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="a23_dt", aname="_a23_dt", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="a24_sl", aname="_a24_sl", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="a25_enp", aname="_a25_enp", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._a10_dct = None
                    self._a11_dcs = None
                    self._a12_dcn = None
                    self._a13_smcd = None
                    self._a14_trcd = None
                    self._a15_pfio = None
                    self._a16_pnm = None
                    self._a17_pln = None
                    self._a18_ps = None
                    self._a19_pbd = None
                    self._a20_pph = None
                    self._a21_ps = None
                    self._a22_pn = None
                    self._a23_dt = None
                    self._a24_sl = None
                    self._a25_enp = None
                    return
            Holder.__name__ = "cPerson_Holder"
            self.pyclass = Holder

    class SendFactOrdersHospital_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "SendFactOrdersHospital")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.SendFactOrdersHospital_Def.schema
            TClist = [GTD("http://main.dce/","cOrderHospitalPackage",lazy=False)(pname="orderpack", aname="_orderpack", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="username", aname="_username", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="password", aname="_password", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sendercode", aname="_sendercode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._orderpack = None
                    self._username = None
                    self._password = None
                    self._sendercode = None
                    return
            Holder.__name__ = "SendFactOrdersHospital_Holder"
            self.pyclass = Holder

    class cOrderHospitalPackage_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "cOrderHospitalPackage")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.cOrderHospitalPackage_Def.schema
            TClist = [GTD("http://main.dce/","cPackageInformation",lazy=False)(pname="p10_packinf", aname="_p10_packinf", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://main.dce/","cOrderHospitalList",lazy=False)(pname="p11_orderhospitallist", aname="_p11_orderhospitallist", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._p10_packinf = None
                    self._p11_orderhospitallist = None
                    return
            Holder.__name__ = "cOrderHospitalPackage_Holder"
            self.pyclass = Holder

    class cOrderHospitalList_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "cOrderHospitalList")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.cOrderHospitalList_Def.schema
            TClist = [GTD("http://main.dce/","cOrderHospital",lazy=False)(pname="l10_orcl", aname="_l10_orcl", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._l10_orcl = []
                    return
            Holder.__name__ = "cOrderHospitalList_Holder"
            self.pyclass = Holder

    class cOrderHospital_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "cOrderHospital")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.cOrderHospital_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname="m10_nzap", aname="_m10_nzap", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="m11_ornm", aname="_m11_ornm", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname="m12_ordt", aname="_m12_ordt", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="m13_ortp", aname="_m13_ortp", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="m14_moscd", aname="_m14_moscd", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="m15_modcd", aname="_m15_modcd", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname="m16_dttmfh", aname="_m16_dttmfh", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://main.dce/","cPerson",lazy=False)(pname="m17_pr", aname="_m17_pr", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="m18_kpkcd", aname="_m18_kpkcd", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="m19_sccd", aname="_m19_sccd", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="m20_crdnum", aname="_m20_crdnum", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="m21_mkbcd", aname="_m21_mkbcd", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="m22_zerr", aname="_m22_zerr", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="m24_usok", aname="_m24_usok", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="z99_guid", aname="_z99_guid", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._m10_nzap = None
                    self._m11_ornm = None
                    self._m12_ordt = None
                    self._m13_ortp = None
                    self._m14_moscd = None
                    self._m15_modcd = None
                    self._m16_dttmfh = None
                    self._m17_pr = None
                    self._m18_kpkcd = None
                    self._m19_sccd = None
                    self._m20_crdnum = None
                    self._m21_mkbcd = None
                    self._m22_zerr = None
                    self._m24_usok = None
                    self._z99_guid = None
                    return
            Holder.__name__ = "cOrderHospital_Holder"
            self.pyclass = Holder

    class SendFactOrdersHospitalResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "SendFactOrdersHospitalResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.SendFactOrdersHospitalResponse_Def.schema
            TClist = [GTD("http://main.dce/","cResponceOrdersPackage",lazy=False)(pname="responcepack", aname="_responcepack", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._responcepack = None
                    return
            Holder.__name__ = "SendFactOrdersHospitalResponse_Holder"
            self.pyclass = Holder

    class cResponceOrdersPackage_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "cResponceOrdersPackage")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.cResponceOrdersPackage_Def.schema
            TClist = [GTD("http://main.dce/","cPackageInformation",lazy=False)(pname="r10_packinf", aname="_r10_packinf", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://main.dce/","cResponceInformation",lazy=False)(pname="r11_rsinf", aname="_r11_rsinf", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://main.dce/","cOrdersErrorList",lazy=False)(pname="r12_orerl", aname="_r12_orerl", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._r10_packinf = None
                    self._r11_rsinf = None
                    self._r12_orerl = None
                    return
            Holder.__name__ = "cResponceOrdersPackage_Holder"
            self.pyclass = Holder

    class cResponceInformation_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "cResponceInformation")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.cResponceInformation_Def.schema
            TClist = [ZSI.TC.String(pname="pakageGUIDSrc", aname="_pakageGUIDSrc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="r10_responcecode", aname="_r10_responcecode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="responceMessage", aname="_responceMessage", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._pakageGUIDSrc = None
                    self._r10_responcecode = None
                    self._responceMessage = None
                    return
            Holder.__name__ = "cResponceInformation_Holder"
            self.pyclass = Holder

    class cOrdersErrorList_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "cOrdersErrorList")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.cOrdersErrorList_Def.schema
            TClist = [GTD("http://main.dce/","cOrdersFLKError",lazy=False)(pname="f10_orflker", aname="_f10_orflker", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._f10_orflker = []
                    return
            Holder.__name__ = "cOrdersErrorList_Holder"
            self.pyclass = Holder

    class cOrdersFLKError_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "cOrdersFLKError")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.cOrdersFLKError_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname="f10_nzap", aname="_f10_nzap", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://main.dce/","cflkErrorList",lazy=False)(pname="f11_flkerrorList", aname="_f11_flkerrorList", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._f10_nzap = None
                    self._f11_flkerrorList = None
                    return
            Holder.__name__ = "cOrdersFLKError_Holder"
            self.pyclass = Holder

    class cflkErrorList_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "cflkErrorList")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.cflkErrorList_Def.schema
            TClist = [GTD("http://main.dce/","cflkError",lazy=False)(pname="f10_flkerror", aname="_f10_flkerror", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._f10_flkerror = []
                    return
            Holder.__name__ = "cflkErrorList_Holder"
            self.pyclass = Holder

    class cflkError_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "cflkError")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.cflkError_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname="e10_ecd", aname="_e10_ecd", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="e11_ems", aname="_e11_ems", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="e12_iguid", aname="_e12_iguid", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._e10_ecd = None
                    self._e11_ems = None
                    self._e12_iguid = None
                    return
            Holder.__name__ = "cflkError_Holder"
            self.pyclass = Holder

    class GetOrdersLeaveHospitalPDG_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "GetOrdersLeaveHospitalPDG")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.GetOrdersLeaveHospitalPDG_Def.schema
            TClist = [ZSI.TC.String(pname="username", aname="_username", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="password", aname="_password", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sendercode", aname="_sendercode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname="lastsynhdate", aname="_lastsynhdate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._username = None
                    self._password = None
                    self._sendercode = None
                    self._lastsynhdate = None
                    return
            Holder.__name__ = "GetOrdersLeaveHospitalPDG_Holder"
            self.pyclass = Holder

    class GetOrdersLeaveHospitalPDGResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "GetOrdersLeaveHospitalPDGResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.GetOrdersLeaveHospitalPDGResponse_Def.schema
            TClist = [GTD("http://main.dce/","cOrderLeaveHospitalPackage",lazy=False)(pname="orderpack", aname="_orderpack", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._orderpack = None
                    return
            Holder.__name__ = "GetOrdersLeaveHospitalPDGResponse_Holder"
            self.pyclass = Holder

    class cOrderLeaveHospitalPackage_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "cOrderLeaveHospitalPackage")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.cOrderLeaveHospitalPackage_Def.schema
            TClist = [GTD("http://main.dce/","cPackageInformation",lazy=False)(pname="p10_packinf", aname="_p10_packinf", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://main.dce/","cOrderLeaveHospitalList",lazy=False)(pname="p11_orderleavehospitallist", aname="_p11_orderleavehospitallist", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._p10_packinf = None
                    self._p11_orderleavehospitallist = None
                    return
            Holder.__name__ = "cOrderLeaveHospitalPackage_Holder"
            self.pyclass = Holder

    class cOrderLeaveHospitalList_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "cOrderLeaveHospitalList")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.cOrderLeaveHospitalList_Def.schema
            TClist = [GTD("http://main.dce/","cOrderLeaveHospital",lazy=False)(pname="l10_orcl", aname="_l10_orcl", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._l10_orcl = []
                    return
            Holder.__name__ = "cOrderLeaveHospitalList_Holder"
            self.pyclass = Holder

    class cOrderLeaveHospital_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "cOrderLeaveHospital")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.cOrderLeaveHospital_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname="m10_nzap", aname="_m10_nzap", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="m11_ornm", aname="_m11_ornm", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname="m12_ordt", aname="_m12_ordt", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="m13_ortp", aname="_m13_ortp", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="m14_modcd", aname="_m14_modcd", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname="m15_dttmfh", aname="_m15_dttmfh", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname="m16_dttmlv", aname="_m16_dttmlv", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://main.dce/","cPerson",lazy=False)(pname="m17_pr", aname="_m17_pr", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="m18_kpkcd", aname="_m18_kpkcd", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="m19_sccd", aname="_m19_sccd", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="m20_crdnum", aname="_m20_crdnum", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="m21_zerr", aname="_m21_zerr", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="z99_guid", aname="_z99_guid", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._m10_nzap = None
                    self._m11_ornm = None
                    self._m12_ordt = None
                    self._m13_ortp = None
                    self._m14_modcd = None
                    self._m15_dttmfh = None
                    self._m16_dttmlv = None
                    self._m17_pr = None
                    self._m18_kpkcd = None
                    self._m19_sccd = None
                    self._m20_crdnum = None
                    self._m21_zerr = None
                    self._z99_guid = None
                    return
            Holder.__name__ = "cOrderLeaveHospital_Holder"
            self.pyclass = Holder

    class SendOrdersNullification_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "SendOrdersNullification")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.SendOrdersNullification_Def.schema
            TClist = [GTD("http://main.dce/","cOrderNullificationPackage",lazy=False)(pname="orderpack", aname="_orderpack", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="username", aname="_username", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="password", aname="_password", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sendercode", aname="_sendercode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._orderpack = None
                    self._username = None
                    self._password = None
                    self._sendercode = None
                    return
            Holder.__name__ = "SendOrdersNullification_Holder"
            self.pyclass = Holder

    class cOrderNullificationPackage_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "cOrderNullificationPackage")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.cOrderNullificationPackage_Def.schema
            TClist = [GTD("http://main.dce/","cPackageInformation",lazy=False)(pname="p10_packinf", aname="_p10_packinf", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://main.dce/","cOrderNullificationList",lazy=False)(pname="p11_ordernullificationlist", aname="_p11_ordernullificationlist", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._p10_packinf = None
                    self._p11_ordernullificationlist = None
                    return
            Holder.__name__ = "cOrderNullificationPackage_Holder"
            self.pyclass = Holder

    class cOrderNullificationList_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "cOrderNullificationList")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.cOrderNullificationList_Def.schema
            TClist = [GTD("http://main.dce/","cOrderNullification",lazy=False)(pname="l10_orcl", aname="_l10_orcl", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._l10_orcl = []
                    return
            Holder.__name__ = "cOrderNullificationList_Holder"
            self.pyclass = Holder

    class cOrderNullification_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "cOrderNullification")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.cOrderNullification_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname="m10_nzap", aname="_m10_nzap", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="m11_ornm", aname="_m11_ornm", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname="m12_ordt", aname="_m12_ordt", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="m13_orstp", aname="_m13_orstp", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="m14_ornscd", aname="_m14_ornscd", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="m15_ornrcd", aname="_m15_ornrcd", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname="m16_ornld", aname="_m16_ornld", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname="m17_dtph", aname="_m17_dtph", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="m18_lpucode", aname="_m18_lpucode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="m19_kpkcd", aname="_m19_kpkcd", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="m20_zerr", aname="_m20_zerr", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="z99_guid", aname="_z99_guid", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._m10_nzap = None
                    self._m11_ornm = None
                    self._m12_ordt = None
                    self._m13_orstp = None
                    self._m14_ornscd = None
                    self._m15_ornrcd = None
                    self._m16_ornld = None
                    self._m17_dtph = None
                    self._m18_lpucode = None
                    self._m19_kpkcd = None
                    self._m20_zerr = None
                    self._z99_guid = None
                    return
            Holder.__name__ = "cOrderNullification_Holder"
            self.pyclass = Holder

    class SendOrdersNullificationResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "SendOrdersNullificationResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.SendOrdersNullificationResponse_Def.schema
            TClist = [GTD("http://main.dce/","cResponceOrdersPackage",lazy=False)(pname="responcepack", aname="_responcepack", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._responcepack = None
                    return
            Holder.__name__ = "SendOrdersNullificationResponse_Holder"
            self.pyclass = Holder

    class GetQueryForDeAttachForMO_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "GetQueryForDeAttachForMO")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.GetQueryForDeAttachForMO_Def.schema
            TClist = [ZSI.TC.String(pname="username", aname="_username", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="password", aname="_password", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sendercode", aname="_sendercode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname="synhdate", aname="_synhdate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._username = None
                    self._password = None
                    self._sendercode = None
                    self._synhdate = None
                    return
            Holder.__name__ = "GetQueryForDeAttachForMO_Holder"
            self.pyclass = Holder

    class GetQueryForDeAttachForMOResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "GetQueryForDeAttachForMOResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.GetQueryForDeAttachForMOResponse_Def.schema
            TClist = [GTD("http://main.dce/","cDeAttachQueryForMOPackage",lazy=False)(pname="orderpack", aname="_orderpack", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._orderpack = None
                    return
            Holder.__name__ = "GetQueryForDeAttachForMOResponse_Holder"
            self.pyclass = Holder

    class cDeAttachQueryForMOPackage_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "cDeAttachQueryForMOPackage")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.cDeAttachQueryForMOPackage_Def.schema
            TClist = [GTD("http://main.dce/","cPackageInformation",lazy=False)(pname="p10_packinf", aname="_p10_packinf", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://main.dce/","cDeAttachQueryForMOList",lazy=False)(pname="p11_list", aname="_p11_list", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._p10_packinf = None
                    self._p11_list = None
                    return
            Holder.__name__ = "cDeAttachQueryForMOPackage_Holder"
            self.pyclass = Holder

    class cDeAttachQueryForMOList_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "cDeAttachQueryForMOList")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.cDeAttachQueryForMOList_Def.schema
            TClist = [GTD("http://main.dce/","cDeAttachQueryForMORecord",lazy=False)(pname="p_10orcl", aname="_p_10orcl", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._p_10orcl = []
                    return
            Holder.__name__ = "cDeAttachQueryForMOList_Holder"
            self.pyclass = Holder

    class cDeAttachQueryForMORecord_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "cDeAttachQueryForMORecord")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.cDeAttachQueryForMORecord_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname="m01_nzap", aname="_m01_nzap", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")),
                      ZSI.TC.String(pname="m02_mosrc", aname="_m02_mosrc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")),
                      ZSI.TC.String(pname="m03_modes", aname="_m03_modes", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")),
                      GTD("http://main.dce/", "cPerson", lazy=False)(pname="m04_pep", aname="_m04_pep", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")),
                      ZSI.TC.String(pname="m05_nntf", aname="_m05_nntf", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")),
                      ZSI.TCtimes.gDateTime(pname="m06_dntf", aname="_m06_dntf", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._m01_nzap = None
                    self._m02_mosrc = None
                    self._m03_modes = None
                    self._m04_pep = None
                    self._m05_nntf = None
                    self._m06_dntf = None
                    return
            Holder.__name__ = "cDeAttachQueryForMORecord_Holder"
            self.pyclass = Holder

    class GetAttachListByRangeAct_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "GetAttachListByRangeAct")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.GetAttachListByRangeAct_Def.schema
            TClist = [ZSI.TC.String(pname="username", aname="_username", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="password", aname="_password", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sendercode", aname="_sendercode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="startid", aname="_startid", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="monthact", aname="_monthact", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="yearact", aname="_yearact", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._username = None
                    self._password = None
                    self._sendercode = None
                    self._startid = None
                    self._monthact = None
                    self._yearact = None
                    return
            Holder.__name__ = "GetAttachListByRangeAct_Holder"
            self.pyclass = Holder

    class GetAttachListByRangeActResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "GetAttachListByRangeActResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.GetAttachListByRangeActResponse_Def.schema
            TClist = [GTD("http://main.dce/","cAttachPersonListPackage",lazy=False)(pname="orderpack", aname="_orderpack", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._orderpack = None
                    return
            Holder.__name__ = "GetAttachListByRangeActResponse_Holder"
            self.pyclass = Holder

    class cAttachPersonListPackage_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "cAttachPersonListPackage")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.cAttachPersonListPackage_Def.schema
            TClist = [GTD("http://main.dce/","cPackageInformation",lazy=False)(pname="p10_packinf", aname="_p10_packinf", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="p11_nid", aname="_p11_nid", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://main.dce/","cAttachPersonList",lazy=False)(pname="p12_alist", aname="_p12_alist", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="p12_all", aname="_p12_all", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._p10_packinf = None
                    self._p11_nid = None
                    self._p12_alist = None
                    self._p12_all = None
                    return
            Holder.__name__ = "cAttachPersonListPackage_Holder"
            self.pyclass = Holder

    class cAttachPersonList_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "cAttachPersonList")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.cAttachPersonList_Def.schema
            TClist = [GTD("http://main.dce/","cAttachPerson",lazy=False)(pname="l10_orcl", aname="_l10_orcl", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._l10_orcl = []
                    return
            Holder.__name__ = "cAttachPersonList_Holder"
            self.pyclass = Holder

    class cAttachPerson_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "cAttachPerson")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.cAttachPerson_Def.schema
            TClist = [ZSI.TC.String(pname="a01", aname="_a01", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")),
                      ZSI.TC.String(pname="a02", aname="_a02", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")),
                      ZSI.TC.String(pname="a03", aname="_a03", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")),
                      ZSI.TCtimes.gDateTime(pname="a04", aname="_a04", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")),
                      ZSI.TC.String(pname="a05", aname="_a05", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")),
                      ZSI.TC.String(pname="a06", aname="_a06", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")),
                      ZSI.TC.String(pname="a07", aname="_a07", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")),
                      ZSI.TC.String(pname="a08", aname="_a08", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")),
                      GTD("http://main.dce/", "cAttachMO", lazy=False)(pname="a09", aname="_a09", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")),
                      ZSI.TC.String(pname="a10", aname="_a10", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")),
                      ZSI.TCnumbers.Iint(pname="a11", aname="_a11", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")),
                      ZSI.TC.String(pname="a12_r", aname="_a12_r", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")),
                      ZSI.TC.String(pname="a13_c", aname="_a13_c", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")),
                      ZSI.TC.String(pname="a14_n", aname="_a14_n", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")),
                      ZSI.TC.String(pname="a15_u", aname="_a15_u", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")),
                      ZSI.TC.String(pname="a16_d", aname="_a16_d", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")),
                      ZSI.TC.String(pname="a17_k", aname="_a17_k", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")),
                      ZSI.TC.String(pname="a18_k", aname="_a18_k", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")),
                      ZSI.TC.String(pname="a19_pr", aname="_a19_pr", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")),
                      ZSI.TC.String(pname="a20_pc", aname="_a20_pc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")),
                      ZSI.TC.String(pname="a21_pn", aname="_a21_pn", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")),
                      ZSI.TC.String(pname="a22_pu", aname="_a22_pu", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")),
                      ZSI.TC.String(pname="a23_pd", aname="_a23_pd", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")),
                      ZSI.TC.String(pname="a24_pk", aname="_a24_pk", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")),
                      ZSI.TC.String(pname="a25_pk", aname="_a25_pk", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")),
                      ZSI.TCnumbers.Iint(pname="a26_hp", aname="_a26_hp", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")),
                      ZSI.TC.String(pname="a27", aname="_a27", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")),
                      ZSI.TC.String(pname="a28", aname="_a28", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")),
                      ZSI.TC.String(pname="a29", aname="_a29", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")),
                      ZSI.TC.String(pname="a30", aname="_a30", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")),
                      ZSI.TC.String(pname="a31", aname="_a31", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")),
                      ZSI.TC.String(pname="a32", aname="_a32", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._a01 = None
                    self._a02 = None
                    self._a03 = None
                    self._a04 = None
                    self._a05 = None
                    self._a06 = None
                    self._a07 = None
                    self._a08 = None
                    self._a09 = []
                    self._a10 = None
                    self._a11 = None
                    self._a12_r = None
                    self._a13_c = None
                    self._a14_n = None
                    self._a15_u = None
                    self._a16_d = None
                    self._a17_k = None
                    self._a18_k = None
                    self._a19_pr = None
                    self._a20_pc = None
                    self._a21_pn = None
                    self._a22_pu = None
                    self._a23_pd = None
                    self._a24_pk = None
                    self._a25_pk = None
                    self._a26_hp = None
                    self._a27 = None
                    self._a28 = None
                    self._a29 = None
                    self._a30 = None
                    self._a31 = None
                    self._a32 = None
                    return
            Holder.__name__ = "cAttachPerson_Holder"
            self.pyclass = Holder

    class cAttachMO_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "cAttachMO")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.cAttachMO_Def.schema
            TClist = [ZSI.TCtimes.gDateTime(pname="i1", aname="_i1", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="i2", aname="_i2", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="i3", aname="_i3", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="i4", aname="_i4", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="i5", aname="_i5", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._i1 = None
                    self._i2 = None
                    self._i3 = None
                    self._i4 = None
                    self._i5 = None
                    return
            Holder.__name__ = "cAttachMO_Holder"
            self.pyclass = Holder

    class GetFreeKDInformationByKPK_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "GetFreeKDInformationByKPK")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.GetFreeKDInformationByKPK_Def.schema
            TClist = [ZSI.TC.String(pname="username", aname="_username", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="password", aname="_password", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sendercode", aname="_sendercode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="kpkcode", aname="_kpkcode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="yearcode", aname="_yearcode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="monthcode", aname="_monthcode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._username = None
                    self._password = None
                    self._sendercode = None
                    self._kpkcode = None
                    self._yearcode = None
                    self._monthcode = None
                    return
            Holder.__name__ = "GetFreeKDInformationByKPK_Holder"
            self.pyclass = Holder

    class GetFreeKDInformationByKPKResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "GetFreeKDInformationByKPKResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.GetFreeKDInformationByKPKResponse_Def.schema
            TClist = [GTD("http://main.dce/","cRealKDPackage",lazy=False)(pname="orderpack", aname="_orderpack", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._orderpack = None
                    return
            Holder.__name__ = "GetFreeKDInformationByKPKResponse_Holder"
            self.pyclass = Holder

    class cRealKDPackage_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "cRealKDPackage")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.cRealKDPackage_Def.schema
            TClist = [GTD("http://main.dce/","cPackageInformation",lazy=False)(pname="p10_packinf", aname="_p10_packinf", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://main.dce/","cPeriodInfomation",lazy=False)(pname="p11_perinf", aname="_p11_perinf", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://main.dce/","cLpuKpkList",lazy=False)(pname="p12_lpukpklist", aname="_p12_lpukpklist", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._p10_packinf = None
                    self._p11_perinf = None
                    self._p12_lpukpklist = None
                    return
            Holder.__name__ = "cRealKDPackage_Holder"
            self.pyclass = Holder

    class cPeriodInfomation_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "cPeriodInfomation")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.cPeriodInfomation_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname="c10_year", aname="_c10_year", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="c11_month", aname="_c11_month", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._c10_year = None
                    self._c11_month = None
                    return
            Holder.__name__ = "cPeriodInfomation_Holder"
            self.pyclass = Holder

    class cLpuKpkList_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "cLpuKpkList")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.cLpuKpkList_Def.schema
            TClist = [GTD("http://main.dce/","cLpuKpk",lazy=False)(pname="l10_orcl", aname="_l10_orcl", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._l10_orcl = []
                    return
            Holder.__name__ = "cLpuKpkList_Holder"
            self.pyclass = Holder

    class cLpuKpk_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "cLpuKpk")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.cLpuKpk_Def.schema
            TClist = [ZSI.TC.String(pname="l1_mocd", aname="_l1_mocd", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://main.dce/","cKdDetail",lazy=False)(pname="l2_kprec", aname="_l2_kprec", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._l1_mocd = None
                    self._l2_kprec = []
                    return
            Holder.__name__ = "cLpuKpk_Holder"
            self.pyclass = Holder

    class cKdDetail_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "cKdDetail")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.cKdDetail_Def.schema
            TClist = [ZSI.TC.String(pname="r1_kpkcd", aname="_r1_kpkcd", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="r2_allbd", aname="_r2_allbd", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="r3_bsbd", aname="_r3_bsbd", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="r4_smcd", aname="_r4_smcd", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="r5_allhsp", aname="_r5_allhsp", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._r1_kpkcd = None
                    self._r2_allbd = None
                    self._r3_bsbd = None
                    self._r4_smcd = None
                    self._r5_allhsp = None
                    return
            Holder.__name__ = "cKdDetail_Holder"
            self.pyclass = Holder

    class SendAttachDoctorInformation_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "SendAttachDoctorInformation")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.SendAttachDoctorInformation_Def.schema
            TClist = [GTD("http://main.dce/","cAttachDoctorPackage",lazy=False)(pname="orderpack", aname="_orderpack", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="username", aname="_username", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="password", aname="_password", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sendercode", aname="_sendercode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._orderpack = None
                    self._username = None
                    self._password = None
                    self._sendercode = None
                    return
            Holder.__name__ = "SendAttachDoctorInformation_Holder"
            self.pyclass = Holder

    class cAttachDoctorPackage_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "cAttachDoctorPackage")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.cAttachDoctorPackage_Def.schema
            TClist = [GTD("http://main.dce/","cPackageInformation",lazy=False)(pname="p10_packinf", aname="_p10_packinf", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://main.dce/","cDoctorList",lazy=False)(pname="p11_doclist", aname="_p11_doclist", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._p10_packinf = None
                    self._p11_doclist = None
                    return
            Holder.__name__ = "cAttachDoctorPackage_Holder"
            self.pyclass = Holder

    class cDoctorList_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "cDoctorList")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.cDoctorList_Def.schema
            TClist = [GTD("http://main.dce/","cDoctor",lazy=False)(pname="l10_orcl", aname="_l10_orcl", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._l10_orcl = []
                    return
            Holder.__name__ = "cDoctorList_Holder"
            self.pyclass = Holder

    class cDoctor_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "cDoctor")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.cDoctor_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname="d10_nzap", aname="_d10_nzap", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="d11_snils", aname="_d11_snils", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://main.dce/","cAttachMODoctor",lazy=False)(pname="d12_orcl", aname="_d12_orcl", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="d13_sr", aname="_d13_sr", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="d14_nm", aname="_d14_nm", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="d15_ln", aname="_d15_ln", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname="d16_br", aname="_d16_br", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname="d17_dn", aname="_d17_dn", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="d18_drg", aname="_d18_drg", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._d10_nzap = None
                    self._d11_snils = None
                    self._d12_orcl = []
                    self._d13_sr = None
                    self._d14_nm = None
                    self._d15_ln = None
                    self._d16_br = None
                    self._d17_dn = None
                    self._d18_drg = None
                    return
            Holder.__name__ = "cDoctor_Holder"
            self.pyclass = Holder

    class cAttachMODoctor_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "cAttachMODoctor")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.cAttachMODoctor_Def.schema
            TClist = [ZSI.TC.String(pname="m10_mocd", aname="_m10_mocd", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname="m11_dn", aname="_m11_dn", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._m10_mocd = None
                    self._m11_dn = None
                    return
            Holder.__name__ = "cAttachMODoctor_Holder"
            self.pyclass = Holder

    class SendAttachDoctorInformationResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "SendAttachDoctorInformationResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.SendAttachDoctorInformationResponse_Def.schema
            TClist = [GTD("http://main.dce/","cResponceAttachPackage",lazy=False)(pname="responcepack", aname="_responcepack", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._responcepack = None
                    return
            Holder.__name__ = "SendAttachDoctorInformationResponse_Holder"
            self.pyclass = Holder

    class cResponceAttachPackage_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "cResponceAttachPackage")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.cResponceAttachPackage_Def.schema
            TClist = [GTD("http://main.dce/","cResponceOrdersPackage",lazy=False)(pname="p10_packrespinf", aname="_p10_packrespinf", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://main.dce/","cAttachList",lazy=False)(pname="p11_atachlist", aname="_p11_atachlist", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._p10_packrespinf = None
                    self._p11_atachlist = None
                    return
            Holder.__name__ = "cResponceAttachPackage_Holder"
            self.pyclass = Holder

    class cAttachList_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "cAttachList")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.cAttachList_Def.schema
            TClist = [GTD("http://main.dce/","cAttach",lazy=False)(pname="l10_orcl", aname="_l10_orcl", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._l10_orcl = []
                    return
            Holder.__name__ = "cAttachList_Holder"
            self.pyclass = Holder

    class cAttach_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "cAttach")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.cAttach_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname="p10_nzap", aname="_p10_nzap", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="p11_mocd", aname="_p11_mocd", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://main.dce/","cPerson",lazy=False)(pname="p12_pr", aname="_p12_pr", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://main.dce/","cAttachInfo",lazy=False)(pname="p13_orcl", aname="_p13_orcl", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._p10_nzap = None
                    self._p11_mocd = None
                    self._p12_pr = None
                    self._p13_orcl = []
                    return
            Holder.__name__ = "cAttach_Holder"
            self.pyclass = Holder

    class cAttachInfo_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "cAttachInfo")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.cAttachInfo_Def.schema
            TClist = [ZSI.TCtimes.gDateTime(pname="a10_aad", aname="_a10_aad", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="a11_snisl", aname="_a11_snisl", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="a12_sect", aname="_a12_sect", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="a13_attp", aname="_a13_attp", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="a14_pr", aname="_a14_pr", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._a10_aad = None
                    self._a11_snisl = None
                    self._a12_sect = None
                    self._a13_attp = None
                    self._a14_pr = None
                    return
            Holder.__name__ = "cAttachInfo_Holder"
            self.pyclass = Holder

    class GetPlanOrdersClinicLDS_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "GetPlanOrdersClinicLDS")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.GetPlanOrdersClinicLDS_Def.schema
            TClist = [ZSI.TC.String(pname="username", aname="_username", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="password", aname="_password", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sendercode", aname="_sendercode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname="lastsynhdate", aname="_lastsynhdate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._username = None
                    self._password = None
                    self._sendercode = None
                    self._lastsynhdate = None
                    return
            Holder.__name__ = "GetPlanOrdersClinicLDS_Holder"
            self.pyclass = Holder

    class GetPlanOrdersClinicLDSResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "GetPlanOrdersClinicLDSResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.GetPlanOrdersClinicLDSResponse_Def.schema
            TClist = [GTD("http://main.dce/","cOrderClinicPackage",lazy=False)(pname="orderpack", aname="_orderpack", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._orderpack = None
                    return
            Holder.__name__ = "GetPlanOrdersClinicLDSResponse_Holder"
            self.pyclass = Holder

    class cOrderClinicPackage_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "cOrderClinicPackage")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.cOrderClinicPackage_Def.schema
            TClist = [GTD("http://main.dce/","cPackageInformation",lazy=False)(pname="p10_packinf", aname="_p10_packinf", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://main.dce/","cOrderClinicList",lazy=False)(pname="p11_ordercliniclist", aname="_p11_ordercliniclist", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._p10_packinf = None
                    self._p11_ordercliniclist = None
                    return
            Holder.__name__ = "cOrderClinicPackage_Holder"
            self.pyclass = Holder

    class cOrderClinicList_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "cOrderClinicList")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.cOrderClinicList_Def.schema
            TClist = [GTD("http://main.dce/","cOrderClinic",lazy=False)(pname="l10_orcl", aname="_l10_orcl", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._l10_orcl = []
                    return
            Holder.__name__ = "cOrderClinicList_Holder"
            self.pyclass = Holder

    class cOrderClinic_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "cOrderClinic")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.cOrderClinic_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname="m10_nzap", aname="_m10_nzap", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="m11_ornm", aname="_m11_ornm", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname="m12_ordt", aname="_m12_ordt", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="m13_ortp", aname="_m13_ortp", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="m14_moscd", aname="_m14_moscd", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="m15_modcd", aname="_m15_modcd", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://main.dce/","cPerson",lazy=False)(pname="m16_pr", aname="_m16_pr", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="m18_mkbcd", aname="_m18_mkbcd", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="m19_kpkcd", aname="_m19_kpkcd", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="m20_sccd", aname="_m20_sccd", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="m21_dcnm", aname="_m21_dcnm", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname="m22_dtph", aname="_m22_dtph", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="m23_zerr", aname="_m23_zerr", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="m24_usok", aname="_m24_usok", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="z99_guid", aname="_z99_guid", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._m10_nzap = None
                    self._m11_ornm = None
                    self._m12_ordt = None
                    self._m13_ortp = None
                    self._m14_moscd = None
                    self._m15_modcd = None
                    self._m16_pr = None
                    self._m18_mkbcd = None
                    self._m19_kpkcd = None
                    self._m20_sccd = None
                    self._m21_dcnm = None
                    self._m22_dtph = None
                    self._m23_zerr = None
                    self._m24_usok = None
                    self._z99_guid = None
                    return
            Holder.__name__ = "cOrderClinic_Holder"
            self.pyclass = Holder

    class GetAttachListByRange_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "GetAttachListByRange")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.GetAttachListByRange_Def.schema
            TClist = [ZSI.TC.String(pname="username", aname="_username", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="password", aname="_password", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sendercode", aname="_sendercode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="startid", aname="_startid", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="isadres", aname="_isadres", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._username = None
                    self._password = None
                    self._sendercode = None
                    self._startid = None
                    self._isadres = None
                    return
            Holder.__name__ = "GetAttachListByRange_Holder"
            self.pyclass = Holder

    class GetAttachListByRangeResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "GetAttachListByRangeResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.GetAttachListByRangeResponse_Def.schema
            TClist = [GTD("http://main.dce/","cAttachPersonListPackage",lazy=False)(pname="orderpack", aname="_orderpack", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._orderpack = None
                    return
            Holder.__name__ = "GetAttachListByRangeResponse_Holder"
            self.pyclass = Holder

    class MakeDeAttachAction_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "MakeDeAttachAction")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.MakeDeAttachAction_Def.schema
            TClist = [GTD("http://main.dce/","cDeAttachPersonPackage",lazy=False)(pname="orderpack", aname="_orderpack", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="username", aname="_username", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="password", aname="_password", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sendercode", aname="_sendercode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._orderpack = None
                    self._username = None
                    self._password = None
                    self._sendercode = None
                    return
            Holder.__name__ = "MakeDeAttachAction_Holder"
            self.pyclass = Holder

    class cDeAttachPersonPackage_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "cDeAttachPersonPackage")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.cDeAttachPersonPackage_Def.schema
            TClist = [GTD("http://main.dce/","cPackageInformation",lazy=False)(pname="p10_packinf", aname="_p10_packinf", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://main.dce/","cDeAttachList",lazy=False)(pname="p11_deatachlist", aname="_p11_deatachlist", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._p10_packinf = None
                    self._p11_deatachlist = None
                    return
            Holder.__name__ = "cDeAttachPersonPackage_Holder"
            self.pyclass = Holder

    class cDeAttachList_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "cDeAttachList")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.cDeAttachList_Def.schema
            TClist = [GTD("http://main.dce/","cDeAttach",lazy=False)(pname="l10_orcl", aname="_l10_orcl", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._l10_orcl = []
                    return
            Holder.__name__ = "cDeAttachList_Holder"
            self.pyclass = Holder

    class cDeAttach_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "cDeAttach")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.cDeAttach_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname="p10_nzap", aname="_p10_nzap", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://main.dce/","cPerson",lazy=False)(pname="p11_pr", aname="_p11_pr", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="p12_sect", aname="_p12_sect", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname="p13_add", aname="_p13_add", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="p14_adr", aname="_p14_adr", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="p15_mo", aname="_p15_mo", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="p16_f", aname="_p16_f", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._p10_nzap = None
                    self._p11_pr = None
                    self._p12_sect = None
                    self._p13_add = None
                    self._p14_adr = None
                    self._p15_mo = None
                    self._p16_f = None
                    return
            Holder.__name__ = "cDeAttach_Holder"
            self.pyclass = Holder

    class MakeDeAttachActionResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "MakeDeAttachActionResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.MakeDeAttachActionResponse_Def.schema
            TClist = [GTD("http://main.dce/","cResponceAttachPackage",lazy=False)(pname="orderpack", aname="_orderpack", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._orderpack = None
                    return
            Holder.__name__ = "MakeDeAttachActionResponse_Holder"
            self.pyclass = Holder

    class SendReservedBedUrgently_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "SendReservedBedUrgently")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.SendReservedBedUrgently_Def.schema
            TClist = [GTD("http://main.dce/","cReservedUrgentlyPackage",lazy=False)(pname="orderpack", aname="_orderpack", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="username", aname="_username", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="password", aname="_password", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sendercode", aname="_sendercode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._orderpack = None
                    self._username = None
                    self._password = None
                    self._sendercode = None
                    return
            Holder.__name__ = "SendReservedBedUrgently_Holder"
            self.pyclass = Holder

    class cReservedUrgentlyPackage_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "cReservedUrgentlyPackage")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.cReservedUrgentlyPackage_Def.schema
            TClist = [GTD("http://main.dce/","cPackageInformation",lazy=False)(pname="p10_packinf", aname="_p10_packinf", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://main.dce/","cOrderHospitalUrgently",lazy=False)(pname="p11_orderhospitalurgently", aname="_p11_orderhospitalurgently", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._p10_packinf = None
                    self._p11_orderhospitalurgently = None
                    return
            Holder.__name__ = "cReservedUrgentlyPackage_Holder"
            self.pyclass = Holder

    class SendReservedBedUrgentlyResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "SendReservedBedUrgentlyResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.SendReservedBedUrgentlyResponse_Def.schema
            TClist = [GTD("http://main.dce/","cResponceOrdersPackage",lazy=False)(pname="orderpack", aname="_orderpack", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._orderpack = None
                    return
            Holder.__name__ = "SendReservedBedUrgentlyResponse_Holder"
            self.pyclass = Holder

    class GetFactOrdersHospitalPDG_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "GetFactOrdersHospitalPDG")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.GetFactOrdersHospitalPDG_Def.schema
            TClist = [ZSI.TC.String(pname="username", aname="_username", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="password", aname="_password", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sendercode", aname="_sendercode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname="lastsynhdate", aname="_lastsynhdate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._username = None
                    self._password = None
                    self._sendercode = None
                    self._lastsynhdate = None
                    return
            Holder.__name__ = "GetFactOrdersHospitalPDG_Holder"
            self.pyclass = Holder

    class GetFactOrdersHospitalPDGResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "GetFactOrdersHospitalPDGResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.GetFactOrdersHospitalPDGResponse_Def.schema
            TClist = [GTD("http://main.dce/","cOrderHospitalPackage",lazy=False)(pname="orderpack", aname="_orderpack", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._orderpack = None
                    return
            Holder.__name__ = "GetFactOrdersHospitalPDGResponse_Holder"
            self.pyclass = Holder

    class GetKDInformationByKPKMO_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "GetKDInformationByKPKMO")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.GetKDInformationByKPKMO_Def.schema
            TClist = [ZSI.TC.String(pname="username", aname="_username", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="password", aname="_password", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sendercode", aname="_sendercode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="mocode", aname="_mocode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="kpkcode", aname="_kpkcode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._username = None
                    self._password = None
                    self._sendercode = None
                    self._mocode = None
                    self._kpkcode = None
                    return
            Holder.__name__ = "GetKDInformationByKPKMO_Holder"
            self.pyclass = Holder

    class GetKDInformationByKPKMOResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "GetKDInformationByKPKMOResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.GetKDInformationByKPKMOResponse_Def.schema
            TClist = [GTD("http://main.dce/","ckdInformationPackage",lazy=False)(pname="orderpack", aname="_orderpack", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._orderpack = None
                    return
            Holder.__name__ = "GetKDInformationByKPKMOResponse_Holder"
            self.pyclass = Holder

    class ckdInformationPackage_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "ckdInformationPackage")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ckdInformationPackage_Def.schema
            TClist = [GTD("http://main.dce/","cPackageInformation",lazy=False)(pname="p10_packinf", aname="_p10_packinf", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://main.dce/","ckdInformationList",lazy=False)(pname="p11_kdInformationlist", aname="_p11_kdInformationlist", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._p10_packinf = None
                    self._p11_kdInformationlist = None
                    return
            Holder.__name__ = "ckdInformationPackage_Holder"
            self.pyclass = Holder

    class ckdInformationList_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "ckdInformationList")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ckdInformationList_Def.schema
            TClist = [GTD("http://main.dce/","ckdInformation",lazy=False)(pname="l10_orcl", aname="_l10_orcl", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._l10_orcl = []
                    return
            Holder.__name__ = "ckdInformationList_Holder"
            self.pyclass = Holder

    class ckdInformation_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "ckdInformation")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ckdInformation_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname="m10_nzap", aname="_m10_nzap", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname="m11_indt", aname="_m11_indt", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="m12_mocd", aname="_m12_mocd", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://main.dce/","cBedProfileList",lazy=False)(pname="m13_bprlist", aname="_m13_bprlist", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="m14_zerr", aname="_m14_zerr", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="z99_guid", aname="_z99_guid", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._m10_nzap = None
                    self._m11_indt = None
                    self._m12_mocd = None
                    self._m13_bprlist = None
                    self._m14_zerr = None
                    self._z99_guid = None
                    return
            Holder.__name__ = "ckdInformation_Holder"
            self.pyclass = Holder

    class cBedProfileList_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "cBedProfileList")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.cBedProfileList_Def.schema
            TClist = [GTD("http://main.dce/","cBedProfile",lazy=False)(pname="s10_bpr", aname="_s10_bpr", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._s10_bpr = []
                    return
            Holder.__name__ = "cBedProfileList_Holder"
            self.pyclass = Holder

    class cBedProfile_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "cBedProfile")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.cBedProfile_Def.schema
            TClist = [ZSI.TC.String(pname="k10_kpkcd", aname="_k10_kpkcd", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="k11_cntcn", aname="_k11_cntcn", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="k12_cnten", aname="_k12_cnten", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="k13_cntlv", aname="_k13_cntlv", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="k14_cntpl", aname="_k14_cntpl", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="k15_cntfrmn", aname="_k15_cntfrmn", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="k16_cntfrwm", aname="_k16_cntfrwm", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="k17_cntfrch", aname="_k17_cntfrch", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://main.dce/","cVolumeKDSMOList",lazy=False)(pname="k18_vkdlist", aname="_k18_vkdlist", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="k19_iguid", aname="_k19_iguid", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._k10_kpkcd = None
                    self._k11_cntcn = None
                    self._k12_cnten = None
                    self._k13_cntlv = None
                    self._k14_cntpl = None
                    self._k15_cntfrmn = None
                    self._k16_cntfrwm = None
                    self._k17_cntfrch = None
                    self._k18_vkdlist = None
                    self._k19_iguid = None
                    return
            Holder.__name__ = "cBedProfile_Holder"
            self.pyclass = Holder

    class cVolumeKDSMOList_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "cVolumeKDSMOList")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.cVolumeKDSMOList_Def.schema
            TClist = [GTD("http://main.dce/","cVolumeKDSMO",lazy=False)(pname="n10_vkd", aname="_n10_vkd", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._n10_vkd = []
                    return
            Holder.__name__ = "cVolumeKDSMOList_Holder"
            self.pyclass = Holder

    class cVolumeKDSMO_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "cVolumeKDSMO")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.cVolumeKDSMO_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname="k10_vtp", aname="_k10_vtp", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="k11_smcd", aname="_k11_smcd", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="k12_vkd", aname="_k12_vkd", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="k13_iguid", aname="_k13_iguid", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._k10_vtp = None
                    self._k11_smcd = None
                    self._k12_vkd = None
                    self._k13_iguid = None
                    return
            Holder.__name__ = "cVolumeKDSMO_Holder"
            self.pyclass = Holder

    class GetKDInformation_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "GetKDInformation")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.GetKDInformation_Def.schema
            TClist = [ZSI.TC.String(pname="username", aname="_username", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="password", aname="_password", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sendercode", aname="_sendercode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._username = None
                    self._password = None
                    self._sendercode = None
                    return
            Holder.__name__ = "GetKDInformation_Holder"
            self.pyclass = Holder

    class GetKDInformationResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "GetKDInformationResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.GetKDInformationResponse_Def.schema
            TClist = [GTD("http://main.dce/","ckdInformationPackage",lazy=False)(pname="orderpack", aname="_orderpack", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._orderpack = None
                    return
            Holder.__name__ = "GetKDInformationResponse_Holder"
            self.pyclass = Holder

    class GetFreeKDInformation_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "GetFreeKDInformation")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.GetFreeKDInformation_Def.schema
            TClist = [ZSI.TC.String(pname="username", aname="_username", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="password", aname="_password", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sendercode", aname="_sendercode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="yearcode", aname="_yearcode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="monthcode", aname="_monthcode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._username = None
                    self._password = None
                    self._sendercode = None
                    self._yearcode = None
                    self._monthcode = None
                    return
            Holder.__name__ = "GetFreeKDInformation_Holder"
            self.pyclass = Holder

    class GetFreeKDInformationResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "GetFreeKDInformationResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.GetFreeKDInformationResponse_Def.schema
            TClist = [GTD("http://main.dce/","cRealKDPackage",lazy=False)(pname="orderpack", aname="_orderpack", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._orderpack = None
                    return
            Holder.__name__ = "GetFreeKDInformationResponse_Holder"
            self.pyclass = Holder

    class SendAttachDoctorSectionInformation_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "SendAttachDoctorSectionInformation")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.SendAttachDoctorSectionInformation_Def.schema
            TClist = [GTD("http://main.dce/","cAttachDoctorSectionPackage",lazy=False)(pname="orderpack", aname="_orderpack", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="username", aname="_username", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="password", aname="_password", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sendercode", aname="_sendercode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._orderpack = None
                    self._username = None
                    self._password = None
                    self._sendercode = None
                    return
            Holder.__name__ = "SendAttachDoctorSectionInformation_Holder"
            self.pyclass = Holder

    class cAttachDoctorSectionPackage_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "cAttachDoctorSectionPackage")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.cAttachDoctorSectionPackage_Def.schema
            TClist = [GTD("http://main.dce/","cPackageInformation",lazy=False)(pname="p10_packinf", aname="_p10_packinf", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="p11_mocd", aname="_p11_mocd", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://main.dce/","cAttachDoctorSection",lazy=False)(pname="p12_orcl", aname="_p12_orcl", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._p10_packinf = None
                    self._p11_mocd = None
                    self._p12_orcl = []
                    return
            Holder.__name__ = "cAttachDoctorSectionPackage_Holder"
            self.pyclass = Holder

    class cAttachDoctorSection_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "cAttachDoctorSection")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.cAttachDoctorSection_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname="d10_nzap", aname="_d10_nzap", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="d11_snils", aname="_d11_snils", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://main.dce/","cAttachMOSection",lazy=False)(pname="d12_orcl", aname="_d12_orcl", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname="d13_dn", aname="_d13_dn", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="d14_st", aname="_d14_st", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="d15_mo", aname="_d15_mo", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="d16_sr", aname="_d16_sr", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="d17_nm", aname="_d17_nm", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="d18_ln", aname="_d18_ln", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname="d19_br", aname="_d19_br", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="d20_ds", aname="_d20_ds", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._d10_nzap = None
                    self._d11_snils = None
                    self._d12_orcl = []
                    self._d13_dn = None
                    self._d14_st = None
                    self._d15_mo = None
                    self._d16_sr = None
                    self._d17_nm = None
                    self._d18_ln = None
                    self._d19_br = None
                    self._d20_ds = None
                    return
            Holder.__name__ = "cAttachDoctorSection_Holder"
            self.pyclass = Holder

    class cAttachMOSection_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "cAttachMOSection")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.cAttachMOSection_Def.schema
            TClist = [ZSI.TC.String(pname="s10_sect", aname="_s10_sect", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname="s11_dn", aname="_s11_dn", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="s12_snum", aname="_s12_snum", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._s10_sect = None
                    self._s11_dn = None
                    self._s12_snum = None
                    return
            Holder.__name__ = "cAttachMOSection_Holder"
            self.pyclass = Holder

    class SendAttachDoctorSectionInformationResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "SendAttachDoctorSectionInformationResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.SendAttachDoctorSectionInformationResponse_Def.schema
            TClist = [GTD("http://main.dce/","cResponceAttachPackage",lazy=False)(pname="responcepack", aname="_responcepack", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._responcepack = None
                    return
            Holder.__name__ = "SendAttachDoctorSectionInformationResponse_Holder"
            self.pyclass = Holder

    class SendQueryForDeAttachForMO_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "SendQueryForDeAttachForMO")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.SendQueryForDeAttachForMO_Def.schema
            TClist = [GTD("http://main.dce/","cDeAttachQueryForMOPackage",lazy=False)(pname="orderpack", aname="_orderpack", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="username", aname="_username", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="password", aname="_password", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sendercode", aname="_sendercode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._orderpack = None
                    self._username = None
                    self._password = None
                    self._sendercode = None
                    return
            Holder.__name__ = "SendQueryForDeAttachForMO_Holder"
            self.pyclass = Holder

    class SendQueryForDeAttachForMOResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "SendQueryForDeAttachForMOResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.SendQueryForDeAttachForMOResponse_Def.schema
            TClist = [GTD("http://main.dce/","cResponceAttachPackage",lazy=False)(pname="orderpack", aname="_orderpack", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._orderpack = None
                    return
            Holder.__name__ = "SendQueryForDeAttachForMOResponse_Holder"
            self.pyclass = Holder

    class GetOrdersHospitalUrgentlyLDS_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "GetOrdersHospitalUrgentlyLDS")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.GetOrdersHospitalUrgentlyLDS_Def.schema
            TClist = [ZSI.TC.String(pname="username", aname="_username", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="password", aname="_password", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sendercode", aname="_sendercode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname="lastsynhdate", aname="_lastsynhdate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._username = None
                    self._password = None
                    self._sendercode = None
                    self._lastsynhdate = None
                    return
            Holder.__name__ = "GetOrdersHospitalUrgentlyLDS_Holder"
            self.pyclass = Holder

    class GetOrdersHospitalUrgentlyLDSResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "GetOrdersHospitalUrgentlyLDSResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.GetOrdersHospitalUrgentlyLDSResponse_Def.schema
            TClist = [GTD("http://main.dce/","cOrderHospitalUrgentlyPackage",lazy=False)(pname="orderpack", aname="_orderpack", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._orderpack = None
                    return
            Holder.__name__ = "GetOrdersHospitalUrgentlyLDSResponse_Holder"
            self.pyclass = Holder

    class GetKDInformationPDG_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "GetKDInformationPDG")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.GetKDInformationPDG_Def.schema
            TClist = [ZSI.TC.String(pname="username", aname="_username", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="password", aname="_password", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sendercode", aname="_sendercode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname="lastsynhdate", aname="_lastsynhdate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._username = None
                    self._password = None
                    self._sendercode = None
                    self._lastsynhdate = None
                    return
            Holder.__name__ = "GetKDInformationPDG_Holder"
            self.pyclass = Holder

    class GetKDInformationPDGResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "GetKDInformationPDGResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.GetKDInformationPDGResponse_Def.schema
            TClist = [GTD("http://main.dce/","ckdInformationPackage",lazy=False)(pname="orderpack", aname="_orderpack", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._orderpack = None
                    return
            Holder.__name__ = "GetKDInformationPDGResponse_Holder"
            self.pyclass = Holder

    class GetKDInformationLDS_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "GetKDInformationLDS")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.GetKDInformationLDS_Def.schema
            TClist = [ZSI.TC.String(pname="username", aname="_username", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="password", aname="_password", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sendercode", aname="_sendercode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname="lastsynhdate", aname="_lastsynhdate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._username = None
                    self._password = None
                    self._sendercode = None
                    self._lastsynhdate = None
                    return
            Holder.__name__ = "GetKDInformationLDS_Holder"
            self.pyclass = Holder

    class GetKDInformationLDSResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "GetKDInformationLDSResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.GetKDInformationLDSResponse_Def.schema
            TClist = [GTD("http://main.dce/","ckdInformationPackage",lazy=False)(pname="orderpack", aname="_orderpack", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._orderpack = None
                    return
            Holder.__name__ = "GetKDInformationLDSResponse_Holder"
            self.pyclass = Holder

    class SendTryAssertReservedBed_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "SendTryAssertReservedBed")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.SendTryAssertReservedBed_Def.schema
            TClist = [GTD("http://main.dce/","cAssertReservedBedPackage",lazy=False)(pname="orderpack", aname="_orderpack", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="username", aname="_username", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="password", aname="_password", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sendercode", aname="_sendercode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._orderpack = None
                    self._username = None
                    self._password = None
                    self._sendercode = None
                    return
            Holder.__name__ = "SendTryAssertReservedBed_Holder"
            self.pyclass = Holder

    class cAssertReservedBedPackage_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "cAssertReservedBedPackage")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.cAssertReservedBedPackage_Def.schema
            TClist = [GTD("http://main.dce/","cPackageInformation",lazy=False)(pname="p10_packinf", aname="_p10_packinf", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://main.dce/","cAssertReservedBedList",lazy=False)(pname="p11_abl", aname="_p11_abl", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._p10_packinf = None
                    self._p11_abl = None
                    return
            Holder.__name__ = "cAssertReservedBedPackage_Holder"
            self.pyclass = Holder

    class cAssertReservedBedList_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "cAssertReservedBedList")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.cAssertReservedBedList_Def.schema
            TClist = [GTD("http://main.dce/","cAssertReservedBed",lazy=False)(pname="r10_abr", aname="_r10_abr", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._r10_abr = []
                    return
            Holder.__name__ = "cAssertReservedBedList_Holder"
            self.pyclass = Holder

    class cAssertReservedBed_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "cAssertReservedBed")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.cAssertReservedBed_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname="p10_recid", aname="_p10_recid", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://main.dce/","cBedAssertDetail",lazy=False)(pname="p11_brdt", aname="_p11_brdt", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="p12_nzap", aname="_p12_nzap", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._p10_recid = None
                    self._p11_brdt = None
                    self._p12_nzap = None
                    return
            Holder.__name__ = "cAssertReservedBed_Holder"
            self.pyclass = Holder

    class cBedAssertDetail_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "cBedAssertDetail")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.cBedAssertDetail_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname="a10_stcd", aname="_a10_stcd", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname="a11_hsdt", aname="_a11_hsdt", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._a10_stcd = None
                    self._a11_hsdt = None
                    return
            Holder.__name__ = "cBedAssertDetail_Holder"
            self.pyclass = Holder

    class SendTryAssertReservedBedResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "SendTryAssertReservedBedResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.SendTryAssertReservedBedResponse_Def.schema
            TClist = [GTD("http://main.dce/","cResponceAssertBedPackage",lazy=False)(pname="orderpack", aname="_orderpack", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._orderpack = None
                    return
            Holder.__name__ = "SendTryAssertReservedBedResponse_Holder"
            self.pyclass = Holder

    class cResponceAssertBedPackage_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "cResponceAssertBedPackage")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.cResponceAssertBedPackage_Def.schema
            TClist = [GTD("http://main.dce/","cResponceOrdersPackage",lazy=False)(pname="p10_packrespinf", aname="_p10_packrespinf", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://main.dce/","cRecStatusList",lazy=False)(pname="p11_statuslist", aname="_p11_statuslist", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._p10_packrespinf = None
                    self._p11_statuslist = None
                    return
            Holder.__name__ = "cResponceAssertBedPackage_Holder"
            self.pyclass = Holder

    class cRecStatusList_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "cRecStatusList")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.cRecStatusList_Def.schema
            TClist = [GTD("http://main.dce/","cRecStatus",lazy=False)(pname="l10_recl", aname="_l10_recl", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._l10_recl = []
                    return
            Holder.__name__ = "cRecStatusList_Holder"
            self.pyclass = Holder

    class cRecStatus_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "cRecStatus")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.cRecStatus_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname="a10_recid", aname="_a10_recid", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="a11_stcd", aname="_a11_stcd", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._a10_recid = None
                    self._a11_stcd = None
                    return
            Holder.__name__ = "cRecStatus_Holder"
            self.pyclass = Holder

    class GetOrdersNullificationPDG_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "GetOrdersNullificationPDG")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.GetOrdersNullificationPDG_Def.schema
            TClist = [ZSI.TC.String(pname="username", aname="_username", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="password", aname="_password", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sendercode", aname="_sendercode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname="lastsynhdate", aname="_lastsynhdate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._username = None
                    self._password = None
                    self._sendercode = None
                    self._lastsynhdate = None
                    return
            Holder.__name__ = "GetOrdersNullificationPDG_Holder"
            self.pyclass = Holder

    class GetOrdersNullificationPDGResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "GetOrdersNullificationPDGResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.GetOrdersNullificationPDGResponse_Def.schema
            TClist = [GTD("http://main.dce/","cOrderNullificationPackage",lazy=False)(pname="orderpack", aname="_orderpack", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._orderpack = None
                    return
            Holder.__name__ = "GetOrdersNullificationPDGResponse_Holder"
            self.pyclass = Holder

    class MakeAttachAction_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "MakeAttachAction")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.MakeAttachAction_Def.schema
            TClist = [GTD("http://main.dce/","cAttachPersonPackage",lazy=False)(pname="orderpack", aname="_orderpack", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="username", aname="_username", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="password", aname="_password", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sendercode", aname="_sendercode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._orderpack = None
                    self._username = None
                    self._password = None
                    self._sendercode = None
                    return
            Holder.__name__ = "MakeAttachAction_Holder"
            self.pyclass = Holder

    class cAttachPersonPackage_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "cAttachPersonPackage")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.cAttachPersonPackage_Def.schema
            TClist = [GTD("http://main.dce/","cPackageInformation",lazy=False)(pname="p10_packinf", aname="_p10_packinf", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://main.dce/","cAttachList",lazy=False)(pname="p11_atachlist", aname="_p11_atachlist", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._p10_packinf = None
                    self._p11_atachlist = None
                    return
            Holder.__name__ = "cAttachPersonPackage_Holder"
            self.pyclass = Holder

    class MakeAttachActionResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "MakeAttachActionResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.MakeAttachActionResponse_Def.schema
            TClist = [GTD("http://main.dce/","cResponceAttachPackage",lazy=False)(pname="orderpack", aname="_orderpack", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._orderpack = None
                    return
            Holder.__name__ = "MakeAttachActionResponse_Holder"
            self.pyclass = Holder

    class GetOrdersNullificationLDS_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "GetOrdersNullificationLDS")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.GetOrdersNullificationLDS_Def.schema
            TClist = [ZSI.TC.String(pname="username", aname="_username", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="password", aname="_password", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sendercode", aname="_sendercode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname="lastsynhdate", aname="_lastsynhdate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._username = None
                    self._password = None
                    self._sendercode = None
                    self._lastsynhdate = None
                    return
            Holder.__name__ = "GetOrdersNullificationLDS_Holder"
            self.pyclass = Holder

    class GetOrdersNullificationLDSResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "GetOrdersNullificationLDSResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.GetOrdersNullificationLDSResponse_Def.schema
            TClist = [GTD("http://main.dce/","cOrderNullificationPackage",lazy=False)(pname="orderpack", aname="_orderpack", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._orderpack = None
                    return
            Holder.__name__ = "GetOrdersNullificationLDSResponse_Holder"
            self.pyclass = Holder

    class SendOrdersLeave_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "SendOrdersLeave")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.SendOrdersLeave_Def.schema
            TClist = [GTD("http://main.dce/","cOrderLeaveHospitalPackage",lazy=False)(pname="orderpack", aname="_orderpack", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="username", aname="_username", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="password", aname="_password", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sendercode", aname="_sendercode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._orderpack = None
                    self._username = None
                    self._password = None
                    self._sendercode = None
                    return
            Holder.__name__ = "SendOrdersLeave_Holder"
            self.pyclass = Holder

    class SendOrdersLeaveResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "SendOrdersLeaveResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.SendOrdersLeaveResponse_Def.schema
            TClist = [GTD("http://main.dce/","cResponceOrdersPackage",lazy=False)(pname="responcepack", aname="_responcepack", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._responcepack = None
                    return
            Holder.__name__ = "SendOrdersLeaveResponse_Holder"
            self.pyclass = Holder

    class GetKDInformationByMO_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "GetKDInformationByMO")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.GetKDInformationByMO_Def.schema
            TClist = [ZSI.TC.String(pname="username", aname="_username", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="password", aname="_password", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sendercode", aname="_sendercode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="mocode", aname="_mocode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._username = None
                    self._password = None
                    self._sendercode = None
                    self._mocode = None
                    return
            Holder.__name__ = "GetKDInformationByMO_Holder"
            self.pyclass = Holder

    class GetKDInformationByMOResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "GetKDInformationByMOResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.GetKDInformationByMOResponse_Def.schema
            TClist = [GTD("http://main.dce/","ckdInformationPackage",lazy=False)(pname="orderpack", aname="_orderpack", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._orderpack = None
                    return
            Holder.__name__ = "GetKDInformationByMOResponse_Holder"
            self.pyclass = Holder

    class GetAttachMoStreetSection_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "GetAttachMoStreetSection")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.GetAttachMoStreetSection_Def.schema
            TClist = [ZSI.TC.String(pname="username", aname="_username", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="password", aname="_password", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sendercode", aname="_sendercode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._username = None
                    self._password = None
                    self._sendercode = None
                    return
            Holder.__name__ = "GetAttachMoStreetSection_Holder"
            self.pyclass = Holder

    class GetAttachMoStreetSectionResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "GetAttachMoStreetSectionResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.GetAttachMoStreetSectionResponse_Def.schema
            TClist = [GTD("http://main.dce/","cAttachMoStreetSectionPackage",lazy=False)(pname="orderpack", aname="_orderpack", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._orderpack = None
                    return
            Holder.__name__ = "GetAttachMoStreetSectionResponse_Holder"
            self.pyclass = Holder

    class cAttachMoStreetSectionPackage_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "cAttachMoStreetSectionPackage")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.cAttachMoStreetSectionPackage_Def.schema
            TClist = [GTD("http://main.dce/","cPackageInformation",lazy=False)(pname="p10_packinf", aname="_p10_packinf", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://main.dce/","cAttachMoStreetSectionList",lazy=False)(pname="p11_atachmoscstlist", aname="_p11_atachmoscstlist", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._p10_packinf = None
                    self._p11_atachmoscstlist = None
                    return
            Holder.__name__ = "cAttachMoStreetSectionPackage_Holder"
            self.pyclass = Holder

    class cAttachMoStreetSectionList_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "cAttachMoStreetSectionList")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.cAttachMoStreetSectionList_Def.schema
            TClist = [GTD("http://main.dce/","cAttachMoStreetSection",lazy=False)(pname="l10_orcl", aname="_l10_orcl", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._l10_orcl = []
                    return
            Holder.__name__ = "cAttachMoStreetSectionList_Holder"
            self.pyclass = Holder

    class cAttachMoStreetSection_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "cAttachMoStreetSection")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.cAttachMoStreetSection_Def.schema
            TClist = [ZSI.TC.String(pname="a10_mocd", aname="_a10_mocd", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://main.dce/","cAttachMoSectionStreet",lazy=False)(pname="a11_orcl", aname="_a11_orcl", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._a10_mocd = None
                    self._a11_orcl = []
                    return
            Holder.__name__ = "cAttachMoStreetSection_Holder"
            self.pyclass = Holder

    class cAttachMoSectionStreet_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "cAttachMoSectionStreet")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.cAttachMoSectionStreet_Def.schema
            TClist = [ZSI.TC.String(pname="c10_sect", aname="_c10_sect", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://main.dce/","cAttachSectionStreet",lazy=False)(pname="c11_orcl", aname="_c11_orcl", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._c10_sect = None
                    self._c11_orcl = []
                    return
            Holder.__name__ = "cAttachMoSectionStreet_Holder"
            self.pyclass = Holder

    class cAttachSectionStreet_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "cAttachSectionStreet")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.cAttachSectionStreet_Def.schema
            TClist = [ZSI.TC.String(pname="a10_hguid", aname="_a10_hguid", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._a10_hguid = None
                    return
            Holder.__name__ = "cAttachSectionStreet_Holder"
            self.pyclass = Holder

    class GetDeAttachByDate_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "GetDeAttachByDate")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.GetDeAttachByDate_Def.schema
            TClist = [ZSI.TC.String(pname="username", aname="_username", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="password", aname="_password", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sendercode", aname="_sendercode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname="controldate", aname="_controldate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._username = None
                    self._password = None
                    self._sendercode = None
                    self._controldate = None
                    return
            Holder.__name__ = "GetDeAttachByDate_Holder"
            self.pyclass = Holder

    class GetDeAttachByDateResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "GetDeAttachByDateResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.GetDeAttachByDateResponse_Def.schema
            TClist = [GTD("http://main.dce/","cDeAttachPersonPackage",lazy=False)(pname="orderpack", aname="_orderpack", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._orderpack = None
                    return
            Holder.__name__ = "GetDeAttachByDateResponse_Holder"
            self.pyclass = Holder

    class GetOrdersNullification_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "GetOrdersNullification")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.GetOrdersNullification_Def.schema
            TClist = [ZSI.TC.String(pname="username", aname="_username", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="password", aname="_password", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sendercode", aname="_sendercode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._username = None
                    self._password = None
                    self._sendercode = None
                    return
            Holder.__name__ = "GetOrdersNullification_Holder"
            self.pyclass = Holder

    class GetOrdersNullificationResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "GetOrdersNullificationResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.GetOrdersNullificationResponse_Def.schema
            TClist = [GTD("http://main.dce/","cOrderNullificationPackage",lazy=False)(pname="orderpack", aname="_orderpack", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._orderpack = None
                    return
            Holder.__name__ = "GetOrdersNullificationResponse_Holder"
            self.pyclass = Holder

    class SendKDInformation_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "SendKDInformation")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.SendKDInformation_Def.schema
            TClist = [GTD("http://main.dce/","ckdInformationPackage",lazy=False)(pname="orderpack", aname="_orderpack", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="username", aname="_username", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="password", aname="_password", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sendercode", aname="_sendercode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._orderpack = None
                    self._username = None
                    self._password = None
                    self._sendercode = None
                    return
            Holder.__name__ = "SendKDInformation_Holder"
            self.pyclass = Holder

    class SendKDInformationResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "SendKDInformationResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.SendKDInformationResponse_Def.schema
            TClist = [GTD("http://main.dce/","cResponceOrdersPackage",lazy=False)(pname="responcepack", aname="_responcepack", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._responcepack = None
                    return
            Holder.__name__ = "SendKDInformationResponse_Holder"
            self.pyclass = Holder

    class GetRealReservedBedList_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "GetRealReservedBedList")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.GetRealReservedBedList_Def.schema
            TClist = [ZSI.TC.String(pname="username", aname="_username", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="password", aname="_password", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sendercode", aname="_sendercode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="mocode", aname="_mocode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="kpkcode", aname="_kpkcode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="yearcode", aname="_yearcode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="monthcode", aname="_monthcode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._username = None
                    self._password = None
                    self._sendercode = None
                    self._mocode = None
                    self._kpkcode = None
                    self._yearcode = None
                    self._monthcode = None
                    return
            Holder.__name__ = "GetRealReservedBedList_Holder"
            self.pyclass = Holder

    class GetRealReservedBedListResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "GetRealReservedBedListResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.GetRealReservedBedListResponse_Def.schema
            TClist = [GTD("http://main.dce/","cOrderClinicPackage",lazy=False)(pname="orderpack", aname="_orderpack", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._orderpack = None
                    return
            Holder.__name__ = "GetRealReservedBedListResponse_Holder"
            self.pyclass = Holder

    class GetReservedBedStatus_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "GetReservedBedStatus")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.GetReservedBedStatus_Def.schema
            TClist = [GTD("http://main.dce/","cOrderReservedStatusPackage",lazy=False)(pname="orderpack", aname="_orderpack", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="username", aname="_username", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="password", aname="_password", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sendercode", aname="_sendercode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._orderpack = None
                    self._username = None
                    self._password = None
                    self._sendercode = None
                    return
            Holder.__name__ = "GetReservedBedStatus_Holder"
            self.pyclass = Holder

    class cOrderReservedStatusPackage_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "cOrderReservedStatusPackage")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.cOrderReservedStatusPackage_Def.schema
            TClist = [GTD("http://main.dce/","cPackageInformation",lazy=False)(pname="p10_packinf", aname="_p10_packinf", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://main.dce/","cPackGuidList",lazy=False)(pname="p11guid_list", aname="_p11guid_list", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._p10_packinf = None
                    self._p11guid_list = None
                    return
            Holder.__name__ = "cOrderReservedStatusPackage_Holder"
            self.pyclass = Holder

    class cPackGuidList_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "cPackGuidList")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.cPackGuidList_Def.schema
            TClist = [ZSI.TC.String(pname="r10_guid", aname="_r10_guid", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._r10_guid = []
                    return
            Holder.__name__ = "cPackGuidList_Holder"
            self.pyclass = Holder

    class GetReservedBedStatusResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "GetReservedBedStatusResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.GetReservedBedStatusResponse_Def.schema
            TClist = [GTD("http://main.dce/","cResponceReservedStatusPackage",lazy=False)(pname="orderpack", aname="_orderpack", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._orderpack = None
                    return
            Holder.__name__ = "GetReservedBedStatusResponse_Holder"
            self.pyclass = Holder

    class cResponceReservedStatusPackage_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "cResponceReservedStatusPackage")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.cResponceReservedStatusPackage_Def.schema
            TClist = [GTD("http://main.dce/","cResponceOrdersPackage",lazy=False)(pname="p10_packrespinf", aname="_p10_packrespinf", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://main.dce/","cGuidStatusList",lazy=False)(pname="p11_statuslist", aname="_p11_statuslist", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._p10_packrespinf = None
                    self._p11_statuslist = None
                    return
            Holder.__name__ = "cResponceReservedStatusPackage_Holder"
            self.pyclass = Holder

    class cGuidStatusList_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "cGuidStatusList")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.cGuidStatusList_Def.schema
            TClist = [GTD("http://main.dce/","cGuidStatus",lazy=False)(pname="g10_guitst", aname="_g10_guitst", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._g10_guitst = []
                    return
            Holder.__name__ = "cGuidStatusList_Holder"
            self.pyclass = Holder

    class cGuidStatus_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "cGuidStatus")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.cGuidStatus_Def.schema
            TClist = [ZSI.TC.String(pname="r10_guid", aname="_r10_guid", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="r11_stcd", aname="_r11_stcd", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname="r12_hsdt", aname="_r12_hsdt", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._r10_guid = None
                    self._r11_stcd = None
                    self._r12_hsdt = None
                    return
            Holder.__name__ = "cGuidStatus_Holder"
            self.pyclass = Holder

    class GetFreeKDInformationByKPKMO_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "GetFreeKDInformationByKPKMO")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.GetFreeKDInformationByKPKMO_Def.schema
            TClist = [ZSI.TC.String(pname="username", aname="_username", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="password", aname="_password", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sendercode", aname="_sendercode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="mocode", aname="_mocode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="kpkcode", aname="_kpkcode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="yearcode", aname="_yearcode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="monthcode", aname="_monthcode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._username = None
                    self._password = None
                    self._sendercode = None
                    self._mocode = None
                    self._kpkcode = None
                    self._yearcode = None
                    self._monthcode = None
                    return
            Holder.__name__ = "GetFreeKDInformationByKPKMO_Holder"
            self.pyclass = Holder

    class GetFreeKDInformationByKPKMOResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "GetFreeKDInformationByKPKMOResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.GetFreeKDInformationByKPKMOResponse_Def.schema
            TClist = [GTD("http://main.dce/","cRealKDPackage",lazy=False)(pname="orderpack", aname="_orderpack", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._orderpack = None
                    return
            Holder.__name__ = "GetFreeKDInformationByKPKMOResponse_Holder"
            self.pyclass = Holder

    class GetKDInformationByKpk_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "GetKDInformationByKpk")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.GetKDInformationByKpk_Def.schema
            TClist = [ZSI.TC.String(pname="username", aname="_username", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="password", aname="_password", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sendercode", aname="_sendercode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="kpkcode", aname="_kpkcode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._username = None
                    self._password = None
                    self._sendercode = None
                    self._kpkcode = None
                    return
            Holder.__name__ = "GetKDInformationByKpk_Holder"
            self.pyclass = Holder

    class GetKDInformationByKpkResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "GetKDInformationByKpkResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.GetKDInformationByKpkResponse_Def.schema
            TClist = [GTD("http://main.dce/","ckdInformationPackage",lazy=False)(pname="orderpack", aname="_orderpack", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._orderpack = None
                    return
            Holder.__name__ = "GetKDInformationByKpkResponse_Holder"
            self.pyclass = Holder

    class SendAttachMoStreetSection_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "SendAttachMoStreetSection")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.SendAttachMoStreetSection_Def.schema
            TClist = [GTD("http://main.dce/","cAttachMoStreetSectionPackage",lazy=False)(pname="orderpack", aname="_orderpack", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="username", aname="_username", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="password", aname="_password", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sendercode", aname="_sendercode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._orderpack = None
                    self._username = None
                    self._password = None
                    self._sendercode = None
                    return
            Holder.__name__ = "SendAttachMoStreetSection_Holder"
            self.pyclass = Holder

    class SendAttachMoStreetSectionResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "SendAttachMoStreetSectionResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.SendAttachMoStreetSectionResponse_Def.schema
            TClist = [GTD("http://main.dce/","cResponceAttachPackage",lazy=False)(pname="orderpack", aname="_orderpack", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._orderpack = None
                    return
            Holder.__name__ = "SendAttachMoStreetSectionResponse_Holder"
            self.pyclass = Holder

    class GetFactOrdersHospital_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "GetFactOrdersHospital")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.GetFactOrdersHospital_Def.schema
            TClist = [ZSI.TC.String(pname="username", aname="_username", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="password", aname="_password", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sendercode", aname="_sendercode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._username = None
                    self._password = None
                    self._sendercode = None
                    return
            Holder.__name__ = "GetFactOrdersHospital_Holder"
            self.pyclass = Holder

    class GetFactOrdersHospitalResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "GetFactOrdersHospitalResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.GetFactOrdersHospitalResponse_Def.schema
            TClist = [GTD("http://main.dce/","cOrderHospitalPackage",lazy=False)(pname="orderpack", aname="_orderpack", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._orderpack = None
                    return
            Holder.__name__ = "GetFactOrdersHospitalResponse_Holder"
            self.pyclass = Holder

    class GetPlanOrdersClinic_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "GetPlanOrdersClinic")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.GetPlanOrdersClinic_Def.schema
            TClist = [ZSI.TC.String(pname="username", aname="_username", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="password", aname="_password", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sendercode", aname="_sendercode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._username = None
                    self._password = None
                    self._sendercode = None
                    return
            Holder.__name__ = "GetPlanOrdersClinic_Holder"
            self.pyclass = Holder

    class GetPlanOrdersClinicResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "GetPlanOrdersClinicResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.GetPlanOrdersClinicResponse_Def.schema
            TClist = [GTD("http://main.dce/","cOrderClinicPackage",lazy=False)(pname="orderpack", aname="_orderpack", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._orderpack = None
                    return
            Holder.__name__ = "GetPlanOrdersClinicResponse_Holder"
            self.pyclass = Holder

    class SendTryReservedBed_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "SendTryReservedBed")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.SendTryReservedBed_Def.schema
            TClist = [GTD("http://main.dce/","cOrderReservedPackage",lazy=False)(pname="orderpack", aname="_orderpack", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="username", aname="_username", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="password", aname="_password", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sendercode", aname="_sendercode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._orderpack = None
                    self._username = None
                    self._password = None
                    self._sendercode = None
                    return
            Holder.__name__ = "SendTryReservedBed_Holder"
            self.pyclass = Holder

    class cOrderReservedPackage_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "cOrderReservedPackage")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.cOrderReservedPackage_Def.schema
            TClist = [GTD("http://main.dce/","cPackageInformation",lazy=False)(pname="p10_packinf", aname="_p10_packinf", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://main.dce/","cOrderClinic",lazy=False)(pname="p11_orderclinic", aname="_p11_orderclinic", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._p10_packinf = None
                    self._p11_orderclinic = None
                    return
            Holder.__name__ = "cOrderReservedPackage_Holder"
            self.pyclass = Holder

    class SendTryReservedBedResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "SendTryReservedBedResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.SendTryReservedBedResponse_Def.schema
            TClist = [GTD("http://main.dce/","cResponceOrdersPackage",lazy=False)(pname="orderpack", aname="_orderpack", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._orderpack = None
                    return
            Holder.__name__ = "SendTryReservedBedResponse_Holder"
            self.pyclass = Holder

    class SendOrdersHospitalUrgently_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "SendOrdersHospitalUrgently")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.SendOrdersHospitalUrgently_Def.schema
            TClist = [GTD("http://main.dce/","cOrderHospitalUrgentlyPackage",lazy=False)(pname="orderpack", aname="_orderpack", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="username", aname="_username", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="password", aname="_password", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sendercode", aname="_sendercode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._orderpack = None
                    self._username = None
                    self._password = None
                    self._sendercode = None
                    return
            Holder.__name__ = "SendOrdersHospitalUrgently_Holder"
            self.pyclass = Holder

    class SendOrdersHospitalUrgentlyResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "SendOrdersHospitalUrgentlyResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.SendOrdersHospitalUrgentlyResponse_Def.schema
            TClist = [GTD("http://main.dce/","cResponceOrdersPackage",lazy=False)(pname="responcepack", aname="_responcepack", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._responcepack = None
                    return
            Holder.__name__ = "SendOrdersHospitalUrgentlyResponse_Holder"
            self.pyclass = Holder

    class MakeDeAttachActionCancel_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "MakeDeAttachActionCancel")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.MakeDeAttachActionCancel_Def.schema
            TClist = [GTD("http://main.dce/","cAttachPersonPackage",lazy=False)(pname="orderpack", aname="_orderpack", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="username", aname="_username", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="password", aname="_password", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sendercode", aname="_sendercode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._orderpack = None
                    self._username = None
                    self._password = None
                    self._sendercode = None
                    return
            Holder.__name__ = "MakeDeAttachActionCancel_Holder"
            self.pyclass = Holder

    class MakeDeAttachActionCancelResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "MakeDeAttachActionCancelResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.MakeDeAttachActionCancelResponse_Def.schema
            TClist = [GTD("http://main.dce/","cResponceAttachPackage",lazy=False)(pname="orderpack", aname="_orderpack", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._orderpack = None
                    return
            Holder.__name__ = "MakeDeAttachActionCancelResponse_Holder"
            self.pyclass = Holder

    class GetAttachAgregateSmoMoByDate_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "GetAttachAgregateSmoMoByDate")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.GetAttachAgregateSmoMoByDate_Def.schema
            TClist = [ZSI.TC.String(pname="username", aname="_username", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="password", aname="_password", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sendercode", aname="_sendercode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://main.dce/","cAttachReportParam",lazy=False)(pname="params", aname="_params", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._username = None
                    self._password = None
                    self._sendercode = None
                    self._params = None
                    return
            Holder.__name__ = "GetAttachAgregateSmoMoByDate_Holder"
            self.pyclass = Holder

    class cAttachReportParam_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "cAttachReportParam")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.cAttachReportParam_Def.schema
            TClist = [ZSI.TCtimes.gDateTime(pname="d_01", aname="_d_01", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname="d_02", aname="_d_02", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="d_03", aname="_d_03", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="d_04", aname="_d_04", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="d_05", aname="_d_05", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="d_06", aname="_d_06", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="d_07", aname="_d_07", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._d_01 = None
                    self._d_02 = None
                    self._d_03 = None
                    self._d_04 = None
                    self._d_05 = None
                    self._d_06 = None
                    self._d_07 = None
                    return
            Holder.__name__ = "cAttachReportParam_Holder"
            self.pyclass = Holder

    class GetAttachAgregateSmoMoByDateResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "GetAttachAgregateSmoMoByDateResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.GetAttachAgregateSmoMoByDateResponse_Def.schema
            TClist = [GTD("http://main.dce/","cAttachAgregateSmoMoByDate",lazy=False)(pname="orderpack", aname="_orderpack", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._orderpack = None
                    return
            Holder.__name__ = "GetAttachAgregateSmoMoByDateResponse_Holder"
            self.pyclass = Holder

    class cAttachAgregateSmoMoByDate_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "cAttachAgregateSmoMoByDate")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.cAttachAgregateSmoMoByDate_Def.schema
            TClist = [GTD("http://main.dce/","cMoSmoList",lazy=False)(pname="l10_orcl", aname="_l10_orcl", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._l10_orcl = []
                    return
            Holder.__name__ = "cAttachAgregateSmoMoByDate_Holder"
            self.pyclass = Holder

    class cMoSmoList_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "cMoSmoList")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.cMoSmoList_Def.schema
            TClist = [ZSI.TC.String(pname="mo_01", aname="_mo_01", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://main.dce/","cSmoInfo",lazy=False)(pname="smo_inf", aname="_smo_inf", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._mo_01 = None
                    self._smo_inf = None
                    return
            Holder.__name__ = "cMoSmoList_Holder"
            self.pyclass = Holder

    class cSmoInfo_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "cSmoInfo")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.cSmoInfo_Def.schema
            TClist = [GTD("http://main.dce/","cSmoInfoList",lazy=False)(pname="smo_dt", aname="_smo_dt", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._smo_dt = []
                    return
            Holder.__name__ = "cSmoInfo_Holder"
            self.pyclass = Holder

    class cSmoInfoList_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "cSmoInfoList")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.cSmoInfoList_Def.schema
            TClist = [ZSI.TC.String(pname="smo_cd", aname="_smo_cd", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://main.dce/","cSmoDetail",lazy=False)(pname="smo_st", aname="_smo_st", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._smo_cd = None
                    self._smo_st = None
                    return
            Holder.__name__ = "cSmoInfoList_Holder"
            self.pyclass = Holder

    class cSmoDetail_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "cSmoDetail")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.cSmoDetail_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname="c_01", aname="_c_01", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="c_02", aname="_c_02", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="c_03", aname="_c_03", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="c_04", aname="_c_04", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="c_05", aname="_c_05", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="c_06", aname="_c_06", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="c_07", aname="_c_07", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="c_08", aname="_c_08", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="c_09", aname="_c_09", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="c_10", aname="_c_10", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="c_11", aname="_c_11", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._c_01 = None
                    self._c_02 = None
                    self._c_03 = None
                    self._c_04 = None
                    self._c_05 = None
                    self._c_06 = None
                    self._c_07 = None
                    self._c_08 = None
                    self._c_09 = None
                    self._c_10 = None
                    self._c_11 = None
                    return
            Holder.__name__ = "cSmoDetail_Holder"
            self.pyclass = Holder

    class SetLoginAccess_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "SetLoginAccess")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.SetLoginAccess_Def.schema
            TClist = [ZSI.TC.String(pname="sendercode", aname="_sendercode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="username", aname="_username", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="password", aname="_password", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="oldpassword", aname="_oldpassword", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._sendercode = None
                    self._username = None
                    self._password = None
                    self._oldpassword = None
                    return
            Holder.__name__ = "SetLoginAccess_Holder"
            self.pyclass = Holder

    class SetLoginAccessResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "SetLoginAccessResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.SetLoginAccessResponse_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname="return", aname="_return", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = None
                    return
            Holder.__name__ = "SetLoginAccessResponse_Holder"
            self.pyclass = Holder

    class GetPlanOrdersClinicPDG_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "GetPlanOrdersClinicPDG")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.GetPlanOrdersClinicPDG_Def.schema
            TClist = [ZSI.TC.String(pname="username", aname="_username", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="password", aname="_password", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sendercode", aname="_sendercode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname="lastsynhdate", aname="_lastsynhdate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._username = None
                    self._password = None
                    self._sendercode = None
                    self._lastsynhdate = None
                    return
            Holder.__name__ = "GetPlanOrdersClinicPDG_Holder"
            self.pyclass = Holder

    class GetPlanOrdersClinicPDGResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "GetPlanOrdersClinicPDGResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.GetPlanOrdersClinicPDGResponse_Def.schema
            TClist = [GTD("http://main.dce/","cOrderClinicPackage",lazy=False)(pname="orderpack", aname="_orderpack", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._orderpack = None
                    return
            Holder.__name__ = "GetPlanOrdersClinicPDGResponse_Holder"
            self.pyclass = Holder

    class GetOrdersHospitalUrgentlyPDG_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "GetOrdersHospitalUrgentlyPDG")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.GetOrdersHospitalUrgentlyPDG_Def.schema
            TClist = [ZSI.TC.String(pname="username", aname="_username", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="password", aname="_password", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sendercode", aname="_sendercode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname="lastsynhdate", aname="_lastsynhdate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._username = None
                    self._password = None
                    self._sendercode = None
                    self._lastsynhdate = None
                    return
            Holder.__name__ = "GetOrdersHospitalUrgentlyPDG_Holder"
            self.pyclass = Holder

    class GetOrdersHospitalUrgentlyPDGResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "GetOrdersHospitalUrgentlyPDGResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.GetOrdersHospitalUrgentlyPDGResponse_Def.schema
            TClist = [GTD("http://main.dce/","cOrderHospitalUrgentlyPackage",lazy=False)(pname="orderpack", aname="_orderpack", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._orderpack = None
                    return
            Holder.__name__ = "GetOrdersHospitalUrgentlyPDGResponse_Holder"
            self.pyclass = Holder

    class GetOrdersLeaveHospital_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "GetOrdersLeaveHospital")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.GetOrdersLeaveHospital_Def.schema
            TClist = [ZSI.TC.String(pname="username", aname="_username", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="password", aname="_password", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sendercode", aname="_sendercode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._username = None
                    self._password = None
                    self._sendercode = None
                    return
            Holder.__name__ = "GetOrdersLeaveHospital_Holder"
            self.pyclass = Holder

    class GetOrdersLeaveHospitalResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "GetOrdersLeaveHospitalResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.GetOrdersLeaveHospitalResponse_Def.schema
            TClist = [GTD("http://main.dce/","cOrderLeaveHospitalPackage",lazy=False)(pname="orderpack", aname="_orderpack", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._orderpack = None
                    return
            Holder.__name__ = "GetOrdersLeaveHospitalResponse_Holder"
            self.pyclass = Holder

    class SendPlanOrdersClinic_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "SendPlanOrdersClinic")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.SendPlanOrdersClinic_Def.schema
            TClist = [GTD("http://main.dce/","cOrderClinicPackage",lazy=False)(pname="orderpack", aname="_orderpack", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="username", aname="_username", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="password", aname="_password", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sendercode", aname="_sendercode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._orderpack = None
                    self._username = None
                    self._password = None
                    self._sendercode = None
                    return
            Holder.__name__ = "SendPlanOrdersClinic_Holder"
            self.pyclass = Holder

    class SendPlanOrdersClinicResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "SendPlanOrdersClinicResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.SendPlanOrdersClinicResponse_Def.schema
            TClist = [GTD("http://main.dce/","cResponceOrdersPackage",lazy=False)(pname="responcepack", aname="_responcepack", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._responcepack = None
                    return
            Holder.__name__ = "SendPlanOrdersClinicResponse_Holder"
            self.pyclass = Holder

    class MakeTestConnect_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "MakeTestConnect")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.MakeTestConnect_Def.schema
            TClist = []
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "MakeTestConnect_Holder"
            self.pyclass = Holder

    class MakeTestConnectResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "MakeTestConnectResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.MakeTestConnectResponse_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname="retresult", aname="_retresult", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._retresult = None
                    return
            Holder.__name__ = "MakeTestConnectResponse_Holder"
            self.pyclass = Holder

    class GetAttachInformation_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "GetAttachInformation")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.GetAttachInformation_Def.schema
            TClist = [GTD("http://main.dce/","cAttachInformationPackage",lazy=False)(pname="orderpack", aname="_orderpack", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="username", aname="_username", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="password", aname="_password", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sendercode", aname="_sendercode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._orderpack = None
                    self._username = None
                    self._password = None
                    self._sendercode = None
                    return
            Holder.__name__ = "GetAttachInformation_Holder"
            self.pyclass = Holder

    class cAttachInformationPackage_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "cAttachInformationPackage")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.cAttachInformationPackage_Def.schema
            TClist = [GTD("http://main.dce/","cPackageInformation",lazy=False)(pname="p10_packinf", aname="_p10_packinf", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://main.dce/","cPerson",lazy=False)(pname="p11_pr", aname="_p11_pr", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._p10_packinf = None
                    self._p11_pr = None
                    return
            Holder.__name__ = "cAttachInformationPackage_Holder"
            self.pyclass = Holder

    class GetAttachInformationResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "GetAttachInformationResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.GetAttachInformationResponse_Def.schema
            TClist = [GTD("http://main.dce/","cResponceAttachPackage",lazy=False)(pname="responcepack", aname="_responcepack", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._responcepack = None
                    return
            Holder.__name__ = "GetAttachInformationResponse_Holder"
            self.pyclass = Holder

    class SendTryFreeBed_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "SendTryFreeBed")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.SendTryFreeBed_Def.schema
            TClist = [GTD("http://main.dce/","cFreeBedPackage",lazy=False)(pname="orderpack", aname="_orderpack", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="username", aname="_username", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="password", aname="_password", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sendercode", aname="_sendercode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._orderpack = None
                    self._username = None
                    self._password = None
                    self._sendercode = None
                    return
            Holder.__name__ = "SendTryFreeBed_Holder"
            self.pyclass = Holder

    class cFreeBedPackage_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "cFreeBedPackage")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.cFreeBedPackage_Def.schema
            TClist = [GTD("http://main.dce/","cPackageInformation",lazy=False)(pname="p10_packinf", aname="_p10_packinf", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://main.dce/","cOrderLeaveHospital",lazy=False)(pname="p11_orderleavehospital", aname="_p11_orderleavehospital", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._p10_packinf = None
                    self._p11_orderleavehospital = None
                    return
            Holder.__name__ = "cFreeBedPackage_Holder"
            self.pyclass = Holder

    class SendTryFreeBedResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "SendTryFreeBedResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.SendTryFreeBedResponse_Def.schema
            TClist = [GTD("http://main.dce/","cResponceOrdersPackage",lazy=False)(pname="orderpack", aname="_orderpack", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._orderpack = None
                    return
            Holder.__name__ = "SendTryFreeBedResponse_Holder"
            self.pyclass = Holder

    class GetOrdersLeaveHospitalLDS_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "GetOrdersLeaveHospitalLDS")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.GetOrdersLeaveHospitalLDS_Def.schema
            TClist = [ZSI.TC.String(pname="username", aname="_username", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="password", aname="_password", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sendercode", aname="_sendercode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname="lastsynhdate", aname="_lastsynhdate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._username = None
                    self._password = None
                    self._sendercode = None
                    self._lastsynhdate = None
                    return
            Holder.__name__ = "GetOrdersLeaveHospitalLDS_Holder"
            self.pyclass = Holder

    class GetOrdersLeaveHospitalLDSResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "GetOrdersLeaveHospitalLDSResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.GetOrdersLeaveHospitalLDSResponse_Def.schema
            TClist = [GTD("http://main.dce/","cOrderLeaveHospitalPackage",lazy=False)(pname="orderpack", aname="_orderpack", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._orderpack = None
                    return
            Holder.__name__ = "GetOrdersLeaveHospitalLDSResponse_Holder"
            self.pyclass = Holder

    class SendTryCancelBed_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "SendTryCancelBed")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.SendTryCancelBed_Def.schema
            TClist = [GTD("http://main.dce/","cOrderCancelBedPackage",lazy=False)(pname="orderpack", aname="_orderpack", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="username", aname="_username", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="password", aname="_password", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sendercode", aname="_sendercode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._orderpack = None
                    self._username = None
                    self._password = None
                    self._sendercode = None
                    return
            Holder.__name__ = "SendTryCancelBed_Holder"
            self.pyclass = Holder

    class cOrderCancelBedPackage_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "cOrderCancelBedPackage")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.cOrderCancelBedPackage_Def.schema
            TClist = [GTD("http://main.dce/","cPackageInformation",lazy=False)(pname="p10_packinf", aname="_p10_packinf", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://main.dce/","cOrderNullification",lazy=False)(pname="p11_ordernullification", aname="_p11_ordernullification", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._p10_packinf = None
                    self._p11_ordernullification = None
                    return
            Holder.__name__ = "cOrderCancelBedPackage_Holder"
            self.pyclass = Holder

    class SendTryCancelBedResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "SendTryCancelBedResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.SendTryCancelBedResponse_Def.schema
            TClist = [GTD("http://main.dce/","cResponceOrdersPackage",lazy=False)(pname="orderpack", aname="_orderpack", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._orderpack = None
                    return
            Holder.__name__ = "SendTryCancelBedResponse_Holder"
            self.pyclass = Holder

    class GetFreeKDInformationByMO_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "GetFreeKDInformationByMO")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.GetFreeKDInformationByMO_Def.schema
            TClist = [ZSI.TC.String(pname="username", aname="_username", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="password", aname="_password", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sendercode", aname="_sendercode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="mocode", aname="_mocode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="yearcode", aname="_yearcode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="monthcode", aname="_monthcode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._username = None
                    self._password = None
                    self._sendercode = None
                    self._mocode = None
                    self._yearcode = None
                    self._monthcode = None
                    return
            Holder.__name__ = "GetFreeKDInformationByMO_Holder"
            self.pyclass = Holder

    class GetFreeKDInformationByMOResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "GetFreeKDInformationByMOResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.GetFreeKDInformationByMOResponse_Def.schema
            TClist = [GTD("http://main.dce/","cRealKDPackage",lazy=False)(pname="orderpack", aname="_orderpack", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._orderpack = None
                    return
            Holder.__name__ = "GetFreeKDInformationByMOResponse_Holder"
            self.pyclass = Holder

    class GetFactOrdersHospitalLDS_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "GetFactOrdersHospitalLDS")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.GetFactOrdersHospitalLDS_Def.schema
            TClist = [ZSI.TC.String(pname="username", aname="_username", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="password", aname="_password", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sendercode", aname="_sendercode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname="lastsynhdate", aname="_lastsynhdate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._username = None
                    self._password = None
                    self._sendercode = None
                    self._lastsynhdate = None
                    return
            Holder.__name__ = "GetFactOrdersHospitalLDS_Holder"
            self.pyclass = Holder

    class GetFactOrdersHospitalLDSResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://main.dce/"
        type = (schema, "GetFactOrdersHospitalLDSResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.GetFactOrdersHospitalLDSResponse_Def.schema
            TClist = [GTD("http://main.dce/","cOrderHospitalPackage",lazy=False)(pname="orderpack", aname="_orderpack", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._orderpack = None
                    return
            Holder.__name__ = "GetFactOrdersHospitalLDSResponse_Holder"
            self.pyclass = Holder

    class COrderClinicList_Dec(ElementDeclaration):
        literal = "COrderClinicList"
        schema = "http://main.dce/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://main.dce/","COrderClinicList")
            kw["aname"] = "_COrderClinicList"
            if ns0.cOrderClinicList_Def not in ns0.COrderClinicList_Dec.__bases__:
                bases = list(ns0.COrderClinicList_Dec.__bases__)
                bases.insert(0, ns0.cOrderClinicList_Def)
                ns0.COrderClinicList_Dec.__bases__ = tuple(bases)

            ns0.cOrderClinicList_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "COrderClinicList_Dec_Holder"

    class GetAttachAgregateSmoMoByDate_Dec(ElementDeclaration):
        literal = "GetAttachAgregateSmoMoByDate"
        schema = "http://main.dce/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://main.dce/","GetAttachAgregateSmoMoByDate")
            kw["aname"] = "_GetAttachAgregateSmoMoByDate"
            if ns0.GetAttachAgregateSmoMoByDate_Def not in ns0.GetAttachAgregateSmoMoByDate_Dec.__bases__:
                bases = list(ns0.GetAttachAgregateSmoMoByDate_Dec.__bases__)
                bases.insert(0, ns0.GetAttachAgregateSmoMoByDate_Def)
                ns0.GetAttachAgregateSmoMoByDate_Dec.__bases__ = tuple(bases)

            ns0.GetAttachAgregateSmoMoByDate_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "GetAttachAgregateSmoMoByDate_Dec_Holder"

    class GetAttachAgregateSmoMoByDateResponse_Dec(ElementDeclaration):
        literal = "GetAttachAgregateSmoMoByDateResponse"
        schema = "http://main.dce/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://main.dce/","GetAttachAgregateSmoMoByDateResponse")
            kw["aname"] = "_GetAttachAgregateSmoMoByDateResponse"
            if ns0.GetAttachAgregateSmoMoByDateResponse_Def not in ns0.GetAttachAgregateSmoMoByDateResponse_Dec.__bases__:
                bases = list(ns0.GetAttachAgregateSmoMoByDateResponse_Dec.__bases__)
                bases.insert(0, ns0.GetAttachAgregateSmoMoByDateResponse_Def)
                ns0.GetAttachAgregateSmoMoByDateResponse_Dec.__bases__ = tuple(bases)

            ns0.GetAttachAgregateSmoMoByDateResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "GetAttachAgregateSmoMoByDateResponse_Dec_Holder"

    class GetAttachInformation_Dec(ElementDeclaration):
        literal = "GetAttachInformation"
        schema = "http://main.dce/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://main.dce/","GetAttachInformation")
            kw["aname"] = "_GetAttachInformation"
            if ns0.GetAttachInformation_Def not in ns0.GetAttachInformation_Dec.__bases__:
                bases = list(ns0.GetAttachInformation_Dec.__bases__)
                bases.insert(0, ns0.GetAttachInformation_Def)
                ns0.GetAttachInformation_Dec.__bases__ = tuple(bases)

            ns0.GetAttachInformation_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "GetAttachInformation_Dec_Holder"

    class GetAttachInformationResponse_Dec(ElementDeclaration):
        literal = "GetAttachInformationResponse"
        schema = "http://main.dce/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://main.dce/","GetAttachInformationResponse")
            kw["aname"] = "_GetAttachInformationResponse"
            if ns0.GetAttachInformationResponse_Def not in ns0.GetAttachInformationResponse_Dec.__bases__:
                bases = list(ns0.GetAttachInformationResponse_Dec.__bases__)
                bases.insert(0, ns0.GetAttachInformationResponse_Def)
                ns0.GetAttachInformationResponse_Dec.__bases__ = tuple(bases)

            ns0.GetAttachInformationResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "GetAttachInformationResponse_Dec_Holder"

    class GetAttachListByRange_Dec(ElementDeclaration):
        literal = "GetAttachListByRange"
        schema = "http://main.dce/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://main.dce/","GetAttachListByRange")
            kw["aname"] = "_GetAttachListByRange"
            if ns0.GetAttachListByRange_Def not in ns0.GetAttachListByRange_Dec.__bases__:
                bases = list(ns0.GetAttachListByRange_Dec.__bases__)
                bases.insert(0, ns0.GetAttachListByRange_Def)
                ns0.GetAttachListByRange_Dec.__bases__ = tuple(bases)

            ns0.GetAttachListByRange_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "GetAttachListByRange_Dec_Holder"

    class GetAttachListByRangeAct_Dec(ElementDeclaration):
        literal = "GetAttachListByRangeAct"
        schema = "http://main.dce/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://main.dce/","GetAttachListByRangeAct")
            kw["aname"] = "_GetAttachListByRangeAct"
            if ns0.GetAttachListByRangeAct_Def not in ns0.GetAttachListByRangeAct_Dec.__bases__:
                bases = list(ns0.GetAttachListByRangeAct_Dec.__bases__)
                bases.insert(0, ns0.GetAttachListByRangeAct_Def)
                ns0.GetAttachListByRangeAct_Dec.__bases__ = tuple(bases)

            ns0.GetAttachListByRangeAct_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "GetAttachListByRangeAct_Dec_Holder"

    class GetAttachListByRangeActResponse_Dec(ElementDeclaration):
        literal = "GetAttachListByRangeActResponse"
        schema = "http://main.dce/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://main.dce/","GetAttachListByRangeActResponse")
            kw["aname"] = "_GetAttachListByRangeActResponse"
            if ns0.GetAttachListByRangeActResponse_Def not in ns0.GetAttachListByRangeActResponse_Dec.__bases__:
                bases = list(ns0.GetAttachListByRangeActResponse_Dec.__bases__)
                bases.insert(0, ns0.GetAttachListByRangeActResponse_Def)
                ns0.GetAttachListByRangeActResponse_Dec.__bases__ = tuple(bases)

            ns0.GetAttachListByRangeActResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "GetAttachListByRangeActResponse_Dec_Holder"

    class GetAttachListByRangeResponse_Dec(ElementDeclaration):
        literal = "GetAttachListByRangeResponse"
        schema = "http://main.dce/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://main.dce/","GetAttachListByRangeResponse")
            kw["aname"] = "_GetAttachListByRangeResponse"
            if ns0.GetAttachListByRangeResponse_Def not in ns0.GetAttachListByRangeResponse_Dec.__bases__:
                bases = list(ns0.GetAttachListByRangeResponse_Dec.__bases__)
                bases.insert(0, ns0.GetAttachListByRangeResponse_Def)
                ns0.GetAttachListByRangeResponse_Dec.__bases__ = tuple(bases)

            ns0.GetAttachListByRangeResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "GetAttachListByRangeResponse_Dec_Holder"

    class GetAttachMoStreetSection_Dec(ElementDeclaration):
        literal = "GetAttachMoStreetSection"
        schema = "http://main.dce/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://main.dce/","GetAttachMoStreetSection")
            kw["aname"] = "_GetAttachMoStreetSection"
            if ns0.GetAttachMoStreetSection_Def not in ns0.GetAttachMoStreetSection_Dec.__bases__:
                bases = list(ns0.GetAttachMoStreetSection_Dec.__bases__)
                bases.insert(0, ns0.GetAttachMoStreetSection_Def)
                ns0.GetAttachMoStreetSection_Dec.__bases__ = tuple(bases)

            ns0.GetAttachMoStreetSection_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "GetAttachMoStreetSection_Dec_Holder"

    class GetAttachMoStreetSectionResponse_Dec(ElementDeclaration):
        literal = "GetAttachMoStreetSectionResponse"
        schema = "http://main.dce/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://main.dce/","GetAttachMoStreetSectionResponse")
            kw["aname"] = "_GetAttachMoStreetSectionResponse"
            if ns0.GetAttachMoStreetSectionResponse_Def not in ns0.GetAttachMoStreetSectionResponse_Dec.__bases__:
                bases = list(ns0.GetAttachMoStreetSectionResponse_Dec.__bases__)
                bases.insert(0, ns0.GetAttachMoStreetSectionResponse_Def)
                ns0.GetAttachMoStreetSectionResponse_Dec.__bases__ = tuple(bases)

            ns0.GetAttachMoStreetSectionResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "GetAttachMoStreetSectionResponse_Dec_Holder"

    class GetDeAttachByDate_Dec(ElementDeclaration):
        literal = "GetDeAttachByDate"
        schema = "http://main.dce/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://main.dce/","GetDeAttachByDate")
            kw["aname"] = "_GetDeAttachByDate"
            if ns0.GetDeAttachByDate_Def not in ns0.GetDeAttachByDate_Dec.__bases__:
                bases = list(ns0.GetDeAttachByDate_Dec.__bases__)
                bases.insert(0, ns0.GetDeAttachByDate_Def)
                ns0.GetDeAttachByDate_Dec.__bases__ = tuple(bases)

            ns0.GetDeAttachByDate_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "GetDeAttachByDate_Dec_Holder"

    class GetDeAttachByDateResponse_Dec(ElementDeclaration):
        literal = "GetDeAttachByDateResponse"
        schema = "http://main.dce/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://main.dce/","GetDeAttachByDateResponse")
            kw["aname"] = "_GetDeAttachByDateResponse"
            if ns0.GetDeAttachByDateResponse_Def not in ns0.GetDeAttachByDateResponse_Dec.__bases__:
                bases = list(ns0.GetDeAttachByDateResponse_Dec.__bases__)
                bases.insert(0, ns0.GetDeAttachByDateResponse_Def)
                ns0.GetDeAttachByDateResponse_Dec.__bases__ = tuple(bases)

            ns0.GetDeAttachByDateResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "GetDeAttachByDateResponse_Dec_Holder"

    class GetFactOrdersHospital_Dec(ElementDeclaration):
        literal = "GetFactOrdersHospital"
        schema = "http://main.dce/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://main.dce/","GetFactOrdersHospital")
            kw["aname"] = "_GetFactOrdersHospital"
            if ns0.GetFactOrdersHospital_Def not in ns0.GetFactOrdersHospital_Dec.__bases__:
                bases = list(ns0.GetFactOrdersHospital_Dec.__bases__)
                bases.insert(0, ns0.GetFactOrdersHospital_Def)
                ns0.GetFactOrdersHospital_Dec.__bases__ = tuple(bases)

            ns0.GetFactOrdersHospital_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "GetFactOrdersHospital_Dec_Holder"

    class GetFactOrdersHospitalLDS_Dec(ElementDeclaration):
        literal = "GetFactOrdersHospitalLDS"
        schema = "http://main.dce/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://main.dce/","GetFactOrdersHospitalLDS")
            kw["aname"] = "_GetFactOrdersHospitalLDS"
            if ns0.GetFactOrdersHospitalLDS_Def not in ns0.GetFactOrdersHospitalLDS_Dec.__bases__:
                bases = list(ns0.GetFactOrdersHospitalLDS_Dec.__bases__)
                bases.insert(0, ns0.GetFactOrdersHospitalLDS_Def)
                ns0.GetFactOrdersHospitalLDS_Dec.__bases__ = tuple(bases)

            ns0.GetFactOrdersHospitalLDS_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "GetFactOrdersHospitalLDS_Dec_Holder"

    class GetFactOrdersHospitalLDSResponse_Dec(ElementDeclaration):
        literal = "GetFactOrdersHospitalLDSResponse"
        schema = "http://main.dce/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://main.dce/","GetFactOrdersHospitalLDSResponse")
            kw["aname"] = "_GetFactOrdersHospitalLDSResponse"
            if ns0.GetFactOrdersHospitalLDSResponse_Def not in ns0.GetFactOrdersHospitalLDSResponse_Dec.__bases__:
                bases = list(ns0.GetFactOrdersHospitalLDSResponse_Dec.__bases__)
                bases.insert(0, ns0.GetFactOrdersHospitalLDSResponse_Def)
                ns0.GetFactOrdersHospitalLDSResponse_Dec.__bases__ = tuple(bases)

            ns0.GetFactOrdersHospitalLDSResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "GetFactOrdersHospitalLDSResponse_Dec_Holder"

    class GetFactOrdersHospitalPDG_Dec(ElementDeclaration):
        literal = "GetFactOrdersHospitalPDG"
        schema = "http://main.dce/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://main.dce/","GetFactOrdersHospitalPDG")
            kw["aname"] = "_GetFactOrdersHospitalPDG"
            if ns0.GetFactOrdersHospitalPDG_Def not in ns0.GetFactOrdersHospitalPDG_Dec.__bases__:
                bases = list(ns0.GetFactOrdersHospitalPDG_Dec.__bases__)
                bases.insert(0, ns0.GetFactOrdersHospitalPDG_Def)
                ns0.GetFactOrdersHospitalPDG_Dec.__bases__ = tuple(bases)

            ns0.GetFactOrdersHospitalPDG_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "GetFactOrdersHospitalPDG_Dec_Holder"

    class GetFactOrdersHospitalPDGResponse_Dec(ElementDeclaration):
        literal = "GetFactOrdersHospitalPDGResponse"
        schema = "http://main.dce/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://main.dce/","GetFactOrdersHospitalPDGResponse")
            kw["aname"] = "_GetFactOrdersHospitalPDGResponse"
            if ns0.GetFactOrdersHospitalPDGResponse_Def not in ns0.GetFactOrdersHospitalPDGResponse_Dec.__bases__:
                bases = list(ns0.GetFactOrdersHospitalPDGResponse_Dec.__bases__)
                bases.insert(0, ns0.GetFactOrdersHospitalPDGResponse_Def)
                ns0.GetFactOrdersHospitalPDGResponse_Dec.__bases__ = tuple(bases)

            ns0.GetFactOrdersHospitalPDGResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "GetFactOrdersHospitalPDGResponse_Dec_Holder"

    class GetFactOrdersHospitalResponse_Dec(ElementDeclaration):
        literal = "GetFactOrdersHospitalResponse"
        schema = "http://main.dce/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://main.dce/","GetFactOrdersHospitalResponse")
            kw["aname"] = "_GetFactOrdersHospitalResponse"
            if ns0.GetFactOrdersHospitalResponse_Def not in ns0.GetFactOrdersHospitalResponse_Dec.__bases__:
                bases = list(ns0.GetFactOrdersHospitalResponse_Dec.__bases__)
                bases.insert(0, ns0.GetFactOrdersHospitalResponse_Def)
                ns0.GetFactOrdersHospitalResponse_Dec.__bases__ = tuple(bases)

            ns0.GetFactOrdersHospitalResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "GetFactOrdersHospitalResponse_Dec_Holder"

    class GetFreeKDInformation_Dec(ElementDeclaration):
        literal = "GetFreeKDInformation"
        schema = "http://main.dce/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://main.dce/","GetFreeKDInformation")
            kw["aname"] = "_GetFreeKDInformation"
            if ns0.GetFreeKDInformation_Def not in ns0.GetFreeKDInformation_Dec.__bases__:
                bases = list(ns0.GetFreeKDInformation_Dec.__bases__)
                bases.insert(0, ns0.GetFreeKDInformation_Def)
                ns0.GetFreeKDInformation_Dec.__bases__ = tuple(bases)

            ns0.GetFreeKDInformation_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "GetFreeKDInformation_Dec_Holder"

    class GetFreeKDInformationByKPK_Dec(ElementDeclaration):
        literal = "GetFreeKDInformationByKPK"
        schema = "http://main.dce/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://main.dce/","GetFreeKDInformationByKPK")
            kw["aname"] = "_GetFreeKDInformationByKPK"
            if ns0.GetFreeKDInformationByKPK_Def not in ns0.GetFreeKDInformationByKPK_Dec.__bases__:
                bases = list(ns0.GetFreeKDInformationByKPK_Dec.__bases__)
                bases.insert(0, ns0.GetFreeKDInformationByKPK_Def)
                ns0.GetFreeKDInformationByKPK_Dec.__bases__ = tuple(bases)

            ns0.GetFreeKDInformationByKPK_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "GetFreeKDInformationByKPK_Dec_Holder"

    class GetFreeKDInformationByKPKMO_Dec(ElementDeclaration):
        literal = "GetFreeKDInformationByKPKMO"
        schema = "http://main.dce/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://main.dce/","GetFreeKDInformationByKPKMO")
            kw["aname"] = "_GetFreeKDInformationByKPKMO"
            if ns0.GetFreeKDInformationByKPKMO_Def not in ns0.GetFreeKDInformationByKPKMO_Dec.__bases__:
                bases = list(ns0.GetFreeKDInformationByKPKMO_Dec.__bases__)
                bases.insert(0, ns0.GetFreeKDInformationByKPKMO_Def)
                ns0.GetFreeKDInformationByKPKMO_Dec.__bases__ = tuple(bases)

            ns0.GetFreeKDInformationByKPKMO_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "GetFreeKDInformationByKPKMO_Dec_Holder"

    class GetFreeKDInformationByKPKMOResponse_Dec(ElementDeclaration):
        literal = "GetFreeKDInformationByKPKMOResponse"
        schema = "http://main.dce/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://main.dce/","GetFreeKDInformationByKPKMOResponse")
            kw["aname"] = "_GetFreeKDInformationByKPKMOResponse"
            if ns0.GetFreeKDInformationByKPKMOResponse_Def not in ns0.GetFreeKDInformationByKPKMOResponse_Dec.__bases__:
                bases = list(ns0.GetFreeKDInformationByKPKMOResponse_Dec.__bases__)
                bases.insert(0, ns0.GetFreeKDInformationByKPKMOResponse_Def)
                ns0.GetFreeKDInformationByKPKMOResponse_Dec.__bases__ = tuple(bases)

            ns0.GetFreeKDInformationByKPKMOResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "GetFreeKDInformationByKPKMOResponse_Dec_Holder"

    class GetFreeKDInformationByKPKResponse_Dec(ElementDeclaration):
        literal = "GetFreeKDInformationByKPKResponse"
        schema = "http://main.dce/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://main.dce/","GetFreeKDInformationByKPKResponse")
            kw["aname"] = "_GetFreeKDInformationByKPKResponse"
            if ns0.GetFreeKDInformationByKPKResponse_Def not in ns0.GetFreeKDInformationByKPKResponse_Dec.__bases__:
                bases = list(ns0.GetFreeKDInformationByKPKResponse_Dec.__bases__)
                bases.insert(0, ns0.GetFreeKDInformationByKPKResponse_Def)
                ns0.GetFreeKDInformationByKPKResponse_Dec.__bases__ = tuple(bases)

            ns0.GetFreeKDInformationByKPKResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "GetFreeKDInformationByKPKResponse_Dec_Holder"

    class GetFreeKDInformationByMO_Dec(ElementDeclaration):
        literal = "GetFreeKDInformationByMO"
        schema = "http://main.dce/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://main.dce/","GetFreeKDInformationByMO")
            kw["aname"] = "_GetFreeKDInformationByMO"
            if ns0.GetFreeKDInformationByMO_Def not in ns0.GetFreeKDInformationByMO_Dec.__bases__:
                bases = list(ns0.GetFreeKDInformationByMO_Dec.__bases__)
                bases.insert(0, ns0.GetFreeKDInformationByMO_Def)
                ns0.GetFreeKDInformationByMO_Dec.__bases__ = tuple(bases)

            ns0.GetFreeKDInformationByMO_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "GetFreeKDInformationByMO_Dec_Holder"

    class GetFreeKDInformationByMOResponse_Dec(ElementDeclaration):
        literal = "GetFreeKDInformationByMOResponse"
        schema = "http://main.dce/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://main.dce/","GetFreeKDInformationByMOResponse")
            kw["aname"] = "_GetFreeKDInformationByMOResponse"
            if ns0.GetFreeKDInformationByMOResponse_Def not in ns0.GetFreeKDInformationByMOResponse_Dec.__bases__:
                bases = list(ns0.GetFreeKDInformationByMOResponse_Dec.__bases__)
                bases.insert(0, ns0.GetFreeKDInformationByMOResponse_Def)
                ns0.GetFreeKDInformationByMOResponse_Dec.__bases__ = tuple(bases)

            ns0.GetFreeKDInformationByMOResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "GetFreeKDInformationByMOResponse_Dec_Holder"

    class GetFreeKDInformationResponse_Dec(ElementDeclaration):
        literal = "GetFreeKDInformationResponse"
        schema = "http://main.dce/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://main.dce/","GetFreeKDInformationResponse")
            kw["aname"] = "_GetFreeKDInformationResponse"
            if ns0.GetFreeKDInformationResponse_Def not in ns0.GetFreeKDInformationResponse_Dec.__bases__:
                bases = list(ns0.GetFreeKDInformationResponse_Dec.__bases__)
                bases.insert(0, ns0.GetFreeKDInformationResponse_Def)
                ns0.GetFreeKDInformationResponse_Dec.__bases__ = tuple(bases)

            ns0.GetFreeKDInformationResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "GetFreeKDInformationResponse_Dec_Holder"

    class GetKDInformation_Dec(ElementDeclaration):
        literal = "GetKDInformation"
        schema = "http://main.dce/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://main.dce/","GetKDInformation")
            kw["aname"] = "_GetKDInformation"
            if ns0.GetKDInformation_Def not in ns0.GetKDInformation_Dec.__bases__:
                bases = list(ns0.GetKDInformation_Dec.__bases__)
                bases.insert(0, ns0.GetKDInformation_Def)
                ns0.GetKDInformation_Dec.__bases__ = tuple(bases)

            ns0.GetKDInformation_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "GetKDInformation_Dec_Holder"

    class GetKDInformationByKPKMO_Dec(ElementDeclaration):
        literal = "GetKDInformationByKPKMO"
        schema = "http://main.dce/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://main.dce/","GetKDInformationByKPKMO")
            kw["aname"] = "_GetKDInformationByKPKMO"
            if ns0.GetKDInformationByKPKMO_Def not in ns0.GetKDInformationByKPKMO_Dec.__bases__:
                bases = list(ns0.GetKDInformationByKPKMO_Dec.__bases__)
                bases.insert(0, ns0.GetKDInformationByKPKMO_Def)
                ns0.GetKDInformationByKPKMO_Dec.__bases__ = tuple(bases)

            ns0.GetKDInformationByKPKMO_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "GetKDInformationByKPKMO_Dec_Holder"

    class GetKDInformationByKPKMOResponse_Dec(ElementDeclaration):
        literal = "GetKDInformationByKPKMOResponse"
        schema = "http://main.dce/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://main.dce/","GetKDInformationByKPKMOResponse")
            kw["aname"] = "_GetKDInformationByKPKMOResponse"
            if ns0.GetKDInformationByKPKMOResponse_Def not in ns0.GetKDInformationByKPKMOResponse_Dec.__bases__:
                bases = list(ns0.GetKDInformationByKPKMOResponse_Dec.__bases__)
                bases.insert(0, ns0.GetKDInformationByKPKMOResponse_Def)
                ns0.GetKDInformationByKPKMOResponse_Dec.__bases__ = tuple(bases)

            ns0.GetKDInformationByKPKMOResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "GetKDInformationByKPKMOResponse_Dec_Holder"

    class GetKDInformationByKpk_Dec(ElementDeclaration):
        literal = "GetKDInformationByKpk"
        schema = "http://main.dce/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://main.dce/","GetKDInformationByKpk")
            kw["aname"] = "_GetKDInformationByKpk"
            if ns0.GetKDInformationByKpk_Def not in ns0.GetKDInformationByKpk_Dec.__bases__:
                bases = list(ns0.GetKDInformationByKpk_Dec.__bases__)
                bases.insert(0, ns0.GetKDInformationByKpk_Def)
                ns0.GetKDInformationByKpk_Dec.__bases__ = tuple(bases)

            ns0.GetKDInformationByKpk_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "GetKDInformationByKpk_Dec_Holder"

    class GetKDInformationByKpkResponse_Dec(ElementDeclaration):
        literal = "GetKDInformationByKpkResponse"
        schema = "http://main.dce/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://main.dce/","GetKDInformationByKpkResponse")
            kw["aname"] = "_GetKDInformationByKpkResponse"
            if ns0.GetKDInformationByKpkResponse_Def not in ns0.GetKDInformationByKpkResponse_Dec.__bases__:
                bases = list(ns0.GetKDInformationByKpkResponse_Dec.__bases__)
                bases.insert(0, ns0.GetKDInformationByKpkResponse_Def)
                ns0.GetKDInformationByKpkResponse_Dec.__bases__ = tuple(bases)

            ns0.GetKDInformationByKpkResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "GetKDInformationByKpkResponse_Dec_Holder"

    class GetKDInformationByMO_Dec(ElementDeclaration):
        literal = "GetKDInformationByMO"
        schema = "http://main.dce/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://main.dce/","GetKDInformationByMO")
            kw["aname"] = "_GetKDInformationByMO"
            if ns0.GetKDInformationByMO_Def not in ns0.GetKDInformationByMO_Dec.__bases__:
                bases = list(ns0.GetKDInformationByMO_Dec.__bases__)
                bases.insert(0, ns0.GetKDInformationByMO_Def)
                ns0.GetKDInformationByMO_Dec.__bases__ = tuple(bases)

            ns0.GetKDInformationByMO_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "GetKDInformationByMO_Dec_Holder"

    class GetKDInformationByMOResponse_Dec(ElementDeclaration):
        literal = "GetKDInformationByMOResponse"
        schema = "http://main.dce/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://main.dce/","GetKDInformationByMOResponse")
            kw["aname"] = "_GetKDInformationByMOResponse"
            if ns0.GetKDInformationByMOResponse_Def not in ns0.GetKDInformationByMOResponse_Dec.__bases__:
                bases = list(ns0.GetKDInformationByMOResponse_Dec.__bases__)
                bases.insert(0, ns0.GetKDInformationByMOResponse_Def)
                ns0.GetKDInformationByMOResponse_Dec.__bases__ = tuple(bases)

            ns0.GetKDInformationByMOResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "GetKDInformationByMOResponse_Dec_Holder"

    class GetKDInformationLDS_Dec(ElementDeclaration):
        literal = "GetKDInformationLDS"
        schema = "http://main.dce/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://main.dce/","GetKDInformationLDS")
            kw["aname"] = "_GetKDInformationLDS"
            if ns0.GetKDInformationLDS_Def not in ns0.GetKDInformationLDS_Dec.__bases__:
                bases = list(ns0.GetKDInformationLDS_Dec.__bases__)
                bases.insert(0, ns0.GetKDInformationLDS_Def)
                ns0.GetKDInformationLDS_Dec.__bases__ = tuple(bases)

            ns0.GetKDInformationLDS_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "GetKDInformationLDS_Dec_Holder"

    class GetKDInformationLDSResponse_Dec(ElementDeclaration):
        literal = "GetKDInformationLDSResponse"
        schema = "http://main.dce/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://main.dce/","GetKDInformationLDSResponse")
            kw["aname"] = "_GetKDInformationLDSResponse"
            if ns0.GetKDInformationLDSResponse_Def not in ns0.GetKDInformationLDSResponse_Dec.__bases__:
                bases = list(ns0.GetKDInformationLDSResponse_Dec.__bases__)
                bases.insert(0, ns0.GetKDInformationLDSResponse_Def)
                ns0.GetKDInformationLDSResponse_Dec.__bases__ = tuple(bases)

            ns0.GetKDInformationLDSResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "GetKDInformationLDSResponse_Dec_Holder"

    class GetKDInformationPDG_Dec(ElementDeclaration):
        literal = "GetKDInformationPDG"
        schema = "http://main.dce/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://main.dce/","GetKDInformationPDG")
            kw["aname"] = "_GetKDInformationPDG"
            if ns0.GetKDInformationPDG_Def not in ns0.GetKDInformationPDG_Dec.__bases__:
                bases = list(ns0.GetKDInformationPDG_Dec.__bases__)
                bases.insert(0, ns0.GetKDInformationPDG_Def)
                ns0.GetKDInformationPDG_Dec.__bases__ = tuple(bases)

            ns0.GetKDInformationPDG_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "GetKDInformationPDG_Dec_Holder"

    class GetKDInformationPDGResponse_Dec(ElementDeclaration):
        literal = "GetKDInformationPDGResponse"
        schema = "http://main.dce/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://main.dce/","GetKDInformationPDGResponse")
            kw["aname"] = "_GetKDInformationPDGResponse"
            if ns0.GetKDInformationPDGResponse_Def not in ns0.GetKDInformationPDGResponse_Dec.__bases__:
                bases = list(ns0.GetKDInformationPDGResponse_Dec.__bases__)
                bases.insert(0, ns0.GetKDInformationPDGResponse_Def)
                ns0.GetKDInformationPDGResponse_Dec.__bases__ = tuple(bases)

            ns0.GetKDInformationPDGResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "GetKDInformationPDGResponse_Dec_Holder"

    class GetKDInformationResponse_Dec(ElementDeclaration):
        literal = "GetKDInformationResponse"
        schema = "http://main.dce/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://main.dce/","GetKDInformationResponse")
            kw["aname"] = "_GetKDInformationResponse"
            if ns0.GetKDInformationResponse_Def not in ns0.GetKDInformationResponse_Dec.__bases__:
                bases = list(ns0.GetKDInformationResponse_Dec.__bases__)
                bases.insert(0, ns0.GetKDInformationResponse_Def)
                ns0.GetKDInformationResponse_Dec.__bases__ = tuple(bases)

            ns0.GetKDInformationResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "GetKDInformationResponse_Dec_Holder"

    class GetOrdersHospitalUrgently_Dec(ElementDeclaration):
        literal = "GetOrdersHospitalUrgently"
        schema = "http://main.dce/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://main.dce/","GetOrdersHospitalUrgently")
            kw["aname"] = "_GetOrdersHospitalUrgently"
            if ns0.GetOrdersHospitalUrgently_Def not in ns0.GetOrdersHospitalUrgently_Dec.__bases__:
                bases = list(ns0.GetOrdersHospitalUrgently_Dec.__bases__)
                bases.insert(0, ns0.GetOrdersHospitalUrgently_Def)
                ns0.GetOrdersHospitalUrgently_Dec.__bases__ = tuple(bases)

            ns0.GetOrdersHospitalUrgently_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "GetOrdersHospitalUrgently_Dec_Holder"

    class GetOrdersHospitalUrgentlyLDS_Dec(ElementDeclaration):
        literal = "GetOrdersHospitalUrgentlyLDS"
        schema = "http://main.dce/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://main.dce/","GetOrdersHospitalUrgentlyLDS")
            kw["aname"] = "_GetOrdersHospitalUrgentlyLDS"
            if ns0.GetOrdersHospitalUrgentlyLDS_Def not in ns0.GetOrdersHospitalUrgentlyLDS_Dec.__bases__:
                bases = list(ns0.GetOrdersHospitalUrgentlyLDS_Dec.__bases__)
                bases.insert(0, ns0.GetOrdersHospitalUrgentlyLDS_Def)
                ns0.GetOrdersHospitalUrgentlyLDS_Dec.__bases__ = tuple(bases)

            ns0.GetOrdersHospitalUrgentlyLDS_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "GetOrdersHospitalUrgentlyLDS_Dec_Holder"

    class GetOrdersHospitalUrgentlyLDSResponse_Dec(ElementDeclaration):
        literal = "GetOrdersHospitalUrgentlyLDSResponse"
        schema = "http://main.dce/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://main.dce/","GetOrdersHospitalUrgentlyLDSResponse")
            kw["aname"] = "_GetOrdersHospitalUrgentlyLDSResponse"
            if ns0.GetOrdersHospitalUrgentlyLDSResponse_Def not in ns0.GetOrdersHospitalUrgentlyLDSResponse_Dec.__bases__:
                bases = list(ns0.GetOrdersHospitalUrgentlyLDSResponse_Dec.__bases__)
                bases.insert(0, ns0.GetOrdersHospitalUrgentlyLDSResponse_Def)
                ns0.GetOrdersHospitalUrgentlyLDSResponse_Dec.__bases__ = tuple(bases)

            ns0.GetOrdersHospitalUrgentlyLDSResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "GetOrdersHospitalUrgentlyLDSResponse_Dec_Holder"

    class GetOrdersHospitalUrgentlyPDG_Dec(ElementDeclaration):
        literal = "GetOrdersHospitalUrgentlyPDG"
        schema = "http://main.dce/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://main.dce/","GetOrdersHospitalUrgentlyPDG")
            kw["aname"] = "_GetOrdersHospitalUrgentlyPDG"
            if ns0.GetOrdersHospitalUrgentlyPDG_Def not in ns0.GetOrdersHospitalUrgentlyPDG_Dec.__bases__:
                bases = list(ns0.GetOrdersHospitalUrgentlyPDG_Dec.__bases__)
                bases.insert(0, ns0.GetOrdersHospitalUrgentlyPDG_Def)
                ns0.GetOrdersHospitalUrgentlyPDG_Dec.__bases__ = tuple(bases)

            ns0.GetOrdersHospitalUrgentlyPDG_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "GetOrdersHospitalUrgentlyPDG_Dec_Holder"

    class GetOrdersHospitalUrgentlyPDGResponse_Dec(ElementDeclaration):
        literal = "GetOrdersHospitalUrgentlyPDGResponse"
        schema = "http://main.dce/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://main.dce/","GetOrdersHospitalUrgentlyPDGResponse")
            kw["aname"] = "_GetOrdersHospitalUrgentlyPDGResponse"
            if ns0.GetOrdersHospitalUrgentlyPDGResponse_Def not in ns0.GetOrdersHospitalUrgentlyPDGResponse_Dec.__bases__:
                bases = list(ns0.GetOrdersHospitalUrgentlyPDGResponse_Dec.__bases__)
                bases.insert(0, ns0.GetOrdersHospitalUrgentlyPDGResponse_Def)
                ns0.GetOrdersHospitalUrgentlyPDGResponse_Dec.__bases__ = tuple(bases)

            ns0.GetOrdersHospitalUrgentlyPDGResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "GetOrdersHospitalUrgentlyPDGResponse_Dec_Holder"

    class GetOrdersHospitalUrgentlyResponse_Dec(ElementDeclaration):
        literal = "GetOrdersHospitalUrgentlyResponse"
        schema = "http://main.dce/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://main.dce/","GetOrdersHospitalUrgentlyResponse")
            kw["aname"] = "_GetOrdersHospitalUrgentlyResponse"
            if ns0.GetOrdersHospitalUrgentlyResponse_Def not in ns0.GetOrdersHospitalUrgentlyResponse_Dec.__bases__:
                bases = list(ns0.GetOrdersHospitalUrgentlyResponse_Dec.__bases__)
                bases.insert(0, ns0.GetOrdersHospitalUrgentlyResponse_Def)
                ns0.GetOrdersHospitalUrgentlyResponse_Dec.__bases__ = tuple(bases)

            ns0.GetOrdersHospitalUrgentlyResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "GetOrdersHospitalUrgentlyResponse_Dec_Holder"

    class GetOrdersLeaveHospital_Dec(ElementDeclaration):
        literal = "GetOrdersLeaveHospital"
        schema = "http://main.dce/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://main.dce/","GetOrdersLeaveHospital")
            kw["aname"] = "_GetOrdersLeaveHospital"
            if ns0.GetOrdersLeaveHospital_Def not in ns0.GetOrdersLeaveHospital_Dec.__bases__:
                bases = list(ns0.GetOrdersLeaveHospital_Dec.__bases__)
                bases.insert(0, ns0.GetOrdersLeaveHospital_Def)
                ns0.GetOrdersLeaveHospital_Dec.__bases__ = tuple(bases)

            ns0.GetOrdersLeaveHospital_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "GetOrdersLeaveHospital_Dec_Holder"

    class GetOrdersLeaveHospitalLDS_Dec(ElementDeclaration):
        literal = "GetOrdersLeaveHospitalLDS"
        schema = "http://main.dce/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://main.dce/","GetOrdersLeaveHospitalLDS")
            kw["aname"] = "_GetOrdersLeaveHospitalLDS"
            if ns0.GetOrdersLeaveHospitalLDS_Def not in ns0.GetOrdersLeaveHospitalLDS_Dec.__bases__:
                bases = list(ns0.GetOrdersLeaveHospitalLDS_Dec.__bases__)
                bases.insert(0, ns0.GetOrdersLeaveHospitalLDS_Def)
                ns0.GetOrdersLeaveHospitalLDS_Dec.__bases__ = tuple(bases)

            ns0.GetOrdersLeaveHospitalLDS_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "GetOrdersLeaveHospitalLDS_Dec_Holder"

    class GetOrdersLeaveHospitalLDSResponse_Dec(ElementDeclaration):
        literal = "GetOrdersLeaveHospitalLDSResponse"
        schema = "http://main.dce/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://main.dce/","GetOrdersLeaveHospitalLDSResponse")
            kw["aname"] = "_GetOrdersLeaveHospitalLDSResponse"
            if ns0.GetOrdersLeaveHospitalLDSResponse_Def not in ns0.GetOrdersLeaveHospitalLDSResponse_Dec.__bases__:
                bases = list(ns0.GetOrdersLeaveHospitalLDSResponse_Dec.__bases__)
                bases.insert(0, ns0.GetOrdersLeaveHospitalLDSResponse_Def)
                ns0.GetOrdersLeaveHospitalLDSResponse_Dec.__bases__ = tuple(bases)

            ns0.GetOrdersLeaveHospitalLDSResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "GetOrdersLeaveHospitalLDSResponse_Dec_Holder"

    class GetOrdersLeaveHospitalPDG_Dec(ElementDeclaration):
        literal = "GetOrdersLeaveHospitalPDG"
        schema = "http://main.dce/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://main.dce/","GetOrdersLeaveHospitalPDG")
            kw["aname"] = "_GetOrdersLeaveHospitalPDG"
            if ns0.GetOrdersLeaveHospitalPDG_Def not in ns0.GetOrdersLeaveHospitalPDG_Dec.__bases__:
                bases = list(ns0.GetOrdersLeaveHospitalPDG_Dec.__bases__)
                bases.insert(0, ns0.GetOrdersLeaveHospitalPDG_Def)
                ns0.GetOrdersLeaveHospitalPDG_Dec.__bases__ = tuple(bases)

            ns0.GetOrdersLeaveHospitalPDG_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "GetOrdersLeaveHospitalPDG_Dec_Holder"

    class GetOrdersLeaveHospitalPDGResponse_Dec(ElementDeclaration):
        literal = "GetOrdersLeaveHospitalPDGResponse"
        schema = "http://main.dce/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://main.dce/","GetOrdersLeaveHospitalPDGResponse")
            kw["aname"] = "_GetOrdersLeaveHospitalPDGResponse"
            if ns0.GetOrdersLeaveHospitalPDGResponse_Def not in ns0.GetOrdersLeaveHospitalPDGResponse_Dec.__bases__:
                bases = list(ns0.GetOrdersLeaveHospitalPDGResponse_Dec.__bases__)
                bases.insert(0, ns0.GetOrdersLeaveHospitalPDGResponse_Def)
                ns0.GetOrdersLeaveHospitalPDGResponse_Dec.__bases__ = tuple(bases)

            ns0.GetOrdersLeaveHospitalPDGResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "GetOrdersLeaveHospitalPDGResponse_Dec_Holder"

    class GetOrdersLeaveHospitalResponse_Dec(ElementDeclaration):
        literal = "GetOrdersLeaveHospitalResponse"
        schema = "http://main.dce/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://main.dce/","GetOrdersLeaveHospitalResponse")
            kw["aname"] = "_GetOrdersLeaveHospitalResponse"
            if ns0.GetOrdersLeaveHospitalResponse_Def not in ns0.GetOrdersLeaveHospitalResponse_Dec.__bases__:
                bases = list(ns0.GetOrdersLeaveHospitalResponse_Dec.__bases__)
                bases.insert(0, ns0.GetOrdersLeaveHospitalResponse_Def)
                ns0.GetOrdersLeaveHospitalResponse_Dec.__bases__ = tuple(bases)

            ns0.GetOrdersLeaveHospitalResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "GetOrdersLeaveHospitalResponse_Dec_Holder"

    class GetOrdersNullification_Dec(ElementDeclaration):
        literal = "GetOrdersNullification"
        schema = "http://main.dce/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://main.dce/","GetOrdersNullification")
            kw["aname"] = "_GetOrdersNullification"
            if ns0.GetOrdersNullification_Def not in ns0.GetOrdersNullification_Dec.__bases__:
                bases = list(ns0.GetOrdersNullification_Dec.__bases__)
                bases.insert(0, ns0.GetOrdersNullification_Def)
                ns0.GetOrdersNullification_Dec.__bases__ = tuple(bases)

            ns0.GetOrdersNullification_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "GetOrdersNullification_Dec_Holder"

    class GetOrdersNullificationLDS_Dec(ElementDeclaration):
        literal = "GetOrdersNullificationLDS"
        schema = "http://main.dce/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://main.dce/","GetOrdersNullificationLDS")
            kw["aname"] = "_GetOrdersNullificationLDS"
            if ns0.GetOrdersNullificationLDS_Def not in ns0.GetOrdersNullificationLDS_Dec.__bases__:
                bases = list(ns0.GetOrdersNullificationLDS_Dec.__bases__)
                bases.insert(0, ns0.GetOrdersNullificationLDS_Def)
                ns0.GetOrdersNullificationLDS_Dec.__bases__ = tuple(bases)

            ns0.GetOrdersNullificationLDS_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "GetOrdersNullificationLDS_Dec_Holder"

    class GetOrdersNullificationLDSResponse_Dec(ElementDeclaration):
        literal = "GetOrdersNullificationLDSResponse"
        schema = "http://main.dce/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://main.dce/","GetOrdersNullificationLDSResponse")
            kw["aname"] = "_GetOrdersNullificationLDSResponse"
            if ns0.GetOrdersNullificationLDSResponse_Def not in ns0.GetOrdersNullificationLDSResponse_Dec.__bases__:
                bases = list(ns0.GetOrdersNullificationLDSResponse_Dec.__bases__)
                bases.insert(0, ns0.GetOrdersNullificationLDSResponse_Def)
                ns0.GetOrdersNullificationLDSResponse_Dec.__bases__ = tuple(bases)

            ns0.GetOrdersNullificationLDSResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "GetOrdersNullificationLDSResponse_Dec_Holder"

    class GetOrdersNullificationPDG_Dec(ElementDeclaration):
        literal = "GetOrdersNullificationPDG"
        schema = "http://main.dce/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://main.dce/","GetOrdersNullificationPDG")
            kw["aname"] = "_GetOrdersNullificationPDG"
            if ns0.GetOrdersNullificationPDG_Def not in ns0.GetOrdersNullificationPDG_Dec.__bases__:
                bases = list(ns0.GetOrdersNullificationPDG_Dec.__bases__)
                bases.insert(0, ns0.GetOrdersNullificationPDG_Def)
                ns0.GetOrdersNullificationPDG_Dec.__bases__ = tuple(bases)

            ns0.GetOrdersNullificationPDG_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "GetOrdersNullificationPDG_Dec_Holder"

    class GetOrdersNullificationPDGResponse_Dec(ElementDeclaration):
        literal = "GetOrdersNullificationPDGResponse"
        schema = "http://main.dce/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://main.dce/","GetOrdersNullificationPDGResponse")
            kw["aname"] = "_GetOrdersNullificationPDGResponse"
            if ns0.GetOrdersNullificationPDGResponse_Def not in ns0.GetOrdersNullificationPDGResponse_Dec.__bases__:
                bases = list(ns0.GetOrdersNullificationPDGResponse_Dec.__bases__)
                bases.insert(0, ns0.GetOrdersNullificationPDGResponse_Def)
                ns0.GetOrdersNullificationPDGResponse_Dec.__bases__ = tuple(bases)

            ns0.GetOrdersNullificationPDGResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "GetOrdersNullificationPDGResponse_Dec_Holder"

    class GetOrdersNullificationResponse_Dec(ElementDeclaration):
        literal = "GetOrdersNullificationResponse"
        schema = "http://main.dce/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://main.dce/","GetOrdersNullificationResponse")
            kw["aname"] = "_GetOrdersNullificationResponse"
            if ns0.GetOrdersNullificationResponse_Def not in ns0.GetOrdersNullificationResponse_Dec.__bases__:
                bases = list(ns0.GetOrdersNullificationResponse_Dec.__bases__)
                bases.insert(0, ns0.GetOrdersNullificationResponse_Def)
                ns0.GetOrdersNullificationResponse_Dec.__bases__ = tuple(bases)

            ns0.GetOrdersNullificationResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "GetOrdersNullificationResponse_Dec_Holder"

    class GetPlanOrdersClinic_Dec(ElementDeclaration):
        literal = "GetPlanOrdersClinic"
        schema = "http://main.dce/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://main.dce/","GetPlanOrdersClinic")
            kw["aname"] = "_GetPlanOrdersClinic"
            if ns0.GetPlanOrdersClinic_Def not in ns0.GetPlanOrdersClinic_Dec.__bases__:
                bases = list(ns0.GetPlanOrdersClinic_Dec.__bases__)
                bases.insert(0, ns0.GetPlanOrdersClinic_Def)
                ns0.GetPlanOrdersClinic_Dec.__bases__ = tuple(bases)

            ns0.GetPlanOrdersClinic_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "GetPlanOrdersClinic_Dec_Holder"

    class GetPlanOrdersClinicLDS_Dec(ElementDeclaration):
        literal = "GetPlanOrdersClinicLDS"
        schema = "http://main.dce/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://main.dce/","GetPlanOrdersClinicLDS")
            kw["aname"] = "_GetPlanOrdersClinicLDS"
            if ns0.GetPlanOrdersClinicLDS_Def not in ns0.GetPlanOrdersClinicLDS_Dec.__bases__:
                bases = list(ns0.GetPlanOrdersClinicLDS_Dec.__bases__)
                bases.insert(0, ns0.GetPlanOrdersClinicLDS_Def)
                ns0.GetPlanOrdersClinicLDS_Dec.__bases__ = tuple(bases)

            ns0.GetPlanOrdersClinicLDS_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "GetPlanOrdersClinicLDS_Dec_Holder"

    class GetPlanOrdersClinicLDSResponse_Dec(ElementDeclaration):
        literal = "GetPlanOrdersClinicLDSResponse"
        schema = "http://main.dce/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://main.dce/","GetPlanOrdersClinicLDSResponse")
            kw["aname"] = "_GetPlanOrdersClinicLDSResponse"
            if ns0.GetPlanOrdersClinicLDSResponse_Def not in ns0.GetPlanOrdersClinicLDSResponse_Dec.__bases__:
                bases = list(ns0.GetPlanOrdersClinicLDSResponse_Dec.__bases__)
                bases.insert(0, ns0.GetPlanOrdersClinicLDSResponse_Def)
                ns0.GetPlanOrdersClinicLDSResponse_Dec.__bases__ = tuple(bases)

            ns0.GetPlanOrdersClinicLDSResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "GetPlanOrdersClinicLDSResponse_Dec_Holder"

    class GetPlanOrdersClinicPDG_Dec(ElementDeclaration):
        literal = "GetPlanOrdersClinicPDG"
        schema = "http://main.dce/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://main.dce/","GetPlanOrdersClinicPDG")
            kw["aname"] = "_GetPlanOrdersClinicPDG"
            if ns0.GetPlanOrdersClinicPDG_Def not in ns0.GetPlanOrdersClinicPDG_Dec.__bases__:
                bases = list(ns0.GetPlanOrdersClinicPDG_Dec.__bases__)
                bases.insert(0, ns0.GetPlanOrdersClinicPDG_Def)
                ns0.GetPlanOrdersClinicPDG_Dec.__bases__ = tuple(bases)

            ns0.GetPlanOrdersClinicPDG_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "GetPlanOrdersClinicPDG_Dec_Holder"

    class GetPlanOrdersClinicPDGResponse_Dec(ElementDeclaration):
        literal = "GetPlanOrdersClinicPDGResponse"
        schema = "http://main.dce/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://main.dce/","GetPlanOrdersClinicPDGResponse")
            kw["aname"] = "_GetPlanOrdersClinicPDGResponse"
            if ns0.GetPlanOrdersClinicPDGResponse_Def not in ns0.GetPlanOrdersClinicPDGResponse_Dec.__bases__:
                bases = list(ns0.GetPlanOrdersClinicPDGResponse_Dec.__bases__)
                bases.insert(0, ns0.GetPlanOrdersClinicPDGResponse_Def)
                ns0.GetPlanOrdersClinicPDGResponse_Dec.__bases__ = tuple(bases)

            ns0.GetPlanOrdersClinicPDGResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "GetPlanOrdersClinicPDGResponse_Dec_Holder"

    class GetPlanOrdersClinicResponse_Dec(ElementDeclaration):
        literal = "GetPlanOrdersClinicResponse"
        schema = "http://main.dce/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://main.dce/","GetPlanOrdersClinicResponse")
            kw["aname"] = "_GetPlanOrdersClinicResponse"
            if ns0.GetPlanOrdersClinicResponse_Def not in ns0.GetPlanOrdersClinicResponse_Dec.__bases__:
                bases = list(ns0.GetPlanOrdersClinicResponse_Dec.__bases__)
                bases.insert(0, ns0.GetPlanOrdersClinicResponse_Def)
                ns0.GetPlanOrdersClinicResponse_Dec.__bases__ = tuple(bases)

            ns0.GetPlanOrdersClinicResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "GetPlanOrdersClinicResponse_Dec_Holder"

    class GetQueryForDeAttachForMO_Dec(ElementDeclaration):
        literal = "GetQueryForDeAttachForMO"
        schema = "http://main.dce/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://main.dce/","GetQueryForDeAttachForMO")
            kw["aname"] = "_GetQueryForDeAttachForMO"
            if ns0.GetQueryForDeAttachForMO_Def not in ns0.GetQueryForDeAttachForMO_Dec.__bases__:
                bases = list(ns0.GetQueryForDeAttachForMO_Dec.__bases__)
                bases.insert(0, ns0.GetQueryForDeAttachForMO_Def)
                ns0.GetQueryForDeAttachForMO_Dec.__bases__ = tuple(bases)

            ns0.GetQueryForDeAttachForMO_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "GetQueryForDeAttachForMO_Dec_Holder"

    class GetQueryForDeAttachForMOResponse_Dec(ElementDeclaration):
        literal = "GetQueryForDeAttachForMOResponse"
        schema = "http://main.dce/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://main.dce/","GetQueryForDeAttachForMOResponse")
            kw["aname"] = "_GetQueryForDeAttachForMOResponse"
            if ns0.GetQueryForDeAttachForMOResponse_Def not in ns0.GetQueryForDeAttachForMOResponse_Dec.__bases__:
                bases = list(ns0.GetQueryForDeAttachForMOResponse_Dec.__bases__)
                bases.insert(0, ns0.GetQueryForDeAttachForMOResponse_Def)
                ns0.GetQueryForDeAttachForMOResponse_Dec.__bases__ = tuple(bases)

            ns0.GetQueryForDeAttachForMOResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "GetQueryForDeAttachForMOResponse_Dec_Holder"

    class GetRealReservedBedList_Dec(ElementDeclaration):
        literal = "GetRealReservedBedList"
        schema = "http://main.dce/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://main.dce/","GetRealReservedBedList")
            kw["aname"] = "_GetRealReservedBedList"
            if ns0.GetRealReservedBedList_Def not in ns0.GetRealReservedBedList_Dec.__bases__:
                bases = list(ns0.GetRealReservedBedList_Dec.__bases__)
                bases.insert(0, ns0.GetRealReservedBedList_Def)
                ns0.GetRealReservedBedList_Dec.__bases__ = tuple(bases)

            ns0.GetRealReservedBedList_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "GetRealReservedBedList_Dec_Holder"

    class GetRealReservedBedListResponse_Dec(ElementDeclaration):
        literal = "GetRealReservedBedListResponse"
        schema = "http://main.dce/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://main.dce/","GetRealReservedBedListResponse")
            kw["aname"] = "_GetRealReservedBedListResponse"
            if ns0.GetRealReservedBedListResponse_Def not in ns0.GetRealReservedBedListResponse_Dec.__bases__:
                bases = list(ns0.GetRealReservedBedListResponse_Dec.__bases__)
                bases.insert(0, ns0.GetRealReservedBedListResponse_Def)
                ns0.GetRealReservedBedListResponse_Dec.__bases__ = tuple(bases)

            ns0.GetRealReservedBedListResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "GetRealReservedBedListResponse_Dec_Holder"

    class GetReservedBedStatus_Dec(ElementDeclaration):
        literal = "GetReservedBedStatus"
        schema = "http://main.dce/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://main.dce/","GetReservedBedStatus")
            kw["aname"] = "_GetReservedBedStatus"
            if ns0.GetReservedBedStatus_Def not in ns0.GetReservedBedStatus_Dec.__bases__:
                bases = list(ns0.GetReservedBedStatus_Dec.__bases__)
                bases.insert(0, ns0.GetReservedBedStatus_Def)
                ns0.GetReservedBedStatus_Dec.__bases__ = tuple(bases)

            ns0.GetReservedBedStatus_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "GetReservedBedStatus_Dec_Holder"

    class GetReservedBedStatusResponse_Dec(ElementDeclaration):
        literal = "GetReservedBedStatusResponse"
        schema = "http://main.dce/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://main.dce/","GetReservedBedStatusResponse")
            kw["aname"] = "_GetReservedBedStatusResponse"
            if ns0.GetReservedBedStatusResponse_Def not in ns0.GetReservedBedStatusResponse_Dec.__bases__:
                bases = list(ns0.GetReservedBedStatusResponse_Dec.__bases__)
                bases.insert(0, ns0.GetReservedBedStatusResponse_Def)
                ns0.GetReservedBedStatusResponse_Dec.__bases__ = tuple(bases)

            ns0.GetReservedBedStatusResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "GetReservedBedStatusResponse_Dec_Holder"

    class MakeAttachAction_Dec(ElementDeclaration):
        literal = "MakeAttachAction"
        schema = "http://main.dce/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://main.dce/","MakeAttachAction")
            kw["aname"] = "_MakeAttachAction"
            if ns0.MakeAttachAction_Def not in ns0.MakeAttachAction_Dec.__bases__:
                bases = list(ns0.MakeAttachAction_Dec.__bases__)
                bases.insert(0, ns0.MakeAttachAction_Def)
                ns0.MakeAttachAction_Dec.__bases__ = tuple(bases)

            ns0.MakeAttachAction_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "MakeAttachAction_Dec_Holder"

    class MakeAttachActionResponse_Dec(ElementDeclaration):
        literal = "MakeAttachActionResponse"
        schema = "http://main.dce/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://main.dce/","MakeAttachActionResponse")
            kw["aname"] = "_MakeAttachActionResponse"
            if ns0.MakeAttachActionResponse_Def not in ns0.MakeAttachActionResponse_Dec.__bases__:
                bases = list(ns0.MakeAttachActionResponse_Dec.__bases__)
                bases.insert(0, ns0.MakeAttachActionResponse_Def)
                ns0.MakeAttachActionResponse_Dec.__bases__ = tuple(bases)

            ns0.MakeAttachActionResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "MakeAttachActionResponse_Dec_Holder"

    class MakeDeAttachAction_Dec(ElementDeclaration):
        literal = "MakeDeAttachAction"
        schema = "http://main.dce/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://main.dce/","MakeDeAttachAction")
            kw["aname"] = "_MakeDeAttachAction"
            if ns0.MakeDeAttachAction_Def not in ns0.MakeDeAttachAction_Dec.__bases__:
                bases = list(ns0.MakeDeAttachAction_Dec.__bases__)
                bases.insert(0, ns0.MakeDeAttachAction_Def)
                ns0.MakeDeAttachAction_Dec.__bases__ = tuple(bases)

            ns0.MakeDeAttachAction_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "MakeDeAttachAction_Dec_Holder"

    class MakeDeAttachActionCancel_Dec(ElementDeclaration):
        literal = "MakeDeAttachActionCancel"
        schema = "http://main.dce/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://main.dce/","MakeDeAttachActionCancel")
            kw["aname"] = "_MakeDeAttachActionCancel"
            if ns0.MakeDeAttachActionCancel_Def not in ns0.MakeDeAttachActionCancel_Dec.__bases__:
                bases = list(ns0.MakeDeAttachActionCancel_Dec.__bases__)
                bases.insert(0, ns0.MakeDeAttachActionCancel_Def)
                ns0.MakeDeAttachActionCancel_Dec.__bases__ = tuple(bases)

            ns0.MakeDeAttachActionCancel_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "MakeDeAttachActionCancel_Dec_Holder"

    class MakeDeAttachActionCancelResponse_Dec(ElementDeclaration):
        literal = "MakeDeAttachActionCancelResponse"
        schema = "http://main.dce/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://main.dce/","MakeDeAttachActionCancelResponse")
            kw["aname"] = "_MakeDeAttachActionCancelResponse"
            if ns0.MakeDeAttachActionCancelResponse_Def not in ns0.MakeDeAttachActionCancelResponse_Dec.__bases__:
                bases = list(ns0.MakeDeAttachActionCancelResponse_Dec.__bases__)
                bases.insert(0, ns0.MakeDeAttachActionCancelResponse_Def)
                ns0.MakeDeAttachActionCancelResponse_Dec.__bases__ = tuple(bases)

            ns0.MakeDeAttachActionCancelResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "MakeDeAttachActionCancelResponse_Dec_Holder"

    class MakeDeAttachActionResponse_Dec(ElementDeclaration):
        literal = "MakeDeAttachActionResponse"
        schema = "http://main.dce/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://main.dce/","MakeDeAttachActionResponse")
            kw["aname"] = "_MakeDeAttachActionResponse"
            if ns0.MakeDeAttachActionResponse_Def not in ns0.MakeDeAttachActionResponse_Dec.__bases__:
                bases = list(ns0.MakeDeAttachActionResponse_Dec.__bases__)
                bases.insert(0, ns0.MakeDeAttachActionResponse_Def)
                ns0.MakeDeAttachActionResponse_Dec.__bases__ = tuple(bases)

            ns0.MakeDeAttachActionResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "MakeDeAttachActionResponse_Dec_Holder"

    class MakeTestConnect_Dec(ElementDeclaration):
        literal = "MakeTestConnect"
        schema = "http://main.dce/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://main.dce/","MakeTestConnect")
            kw["aname"] = "_MakeTestConnect"
            if ns0.MakeTestConnect_Def not in ns0.MakeTestConnect_Dec.__bases__:
                bases = list(ns0.MakeTestConnect_Dec.__bases__)
                bases.insert(0, ns0.MakeTestConnect_Def)
                ns0.MakeTestConnect_Dec.__bases__ = tuple(bases)

            ns0.MakeTestConnect_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "MakeTestConnect_Dec_Holder"

    class MakeTestConnectResponse_Dec(ElementDeclaration):
        literal = "MakeTestConnectResponse"
        schema = "http://main.dce/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://main.dce/","MakeTestConnectResponse")
            kw["aname"] = "_MakeTestConnectResponse"
            if ns0.MakeTestConnectResponse_Def not in ns0.MakeTestConnectResponse_Dec.__bases__:
                bases = list(ns0.MakeTestConnectResponse_Dec.__bases__)
                bases.insert(0, ns0.MakeTestConnectResponse_Def)
                ns0.MakeTestConnectResponse_Dec.__bases__ = tuple(bases)

            ns0.MakeTestConnectResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "MakeTestConnectResponse_Dec_Holder"

    class SendAttachDoctorInformation_Dec(ElementDeclaration):
        literal = "SendAttachDoctorInformation"
        schema = "http://main.dce/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://main.dce/","SendAttachDoctorInformation")
            kw["aname"] = "_SendAttachDoctorInformation"
            if ns0.SendAttachDoctorInformation_Def not in ns0.SendAttachDoctorInformation_Dec.__bases__:
                bases = list(ns0.SendAttachDoctorInformation_Dec.__bases__)
                bases.insert(0, ns0.SendAttachDoctorInformation_Def)
                ns0.SendAttachDoctorInformation_Dec.__bases__ = tuple(bases)

            ns0.SendAttachDoctorInformation_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "SendAttachDoctorInformation_Dec_Holder"

    class SendAttachDoctorInformationResponse_Dec(ElementDeclaration):
        literal = "SendAttachDoctorInformationResponse"
        schema = "http://main.dce/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://main.dce/","SendAttachDoctorInformationResponse")
            kw["aname"] = "_SendAttachDoctorInformationResponse"
            if ns0.SendAttachDoctorInformationResponse_Def not in ns0.SendAttachDoctorInformationResponse_Dec.__bases__:
                bases = list(ns0.SendAttachDoctorInformationResponse_Dec.__bases__)
                bases.insert(0, ns0.SendAttachDoctorInformationResponse_Def)
                ns0.SendAttachDoctorInformationResponse_Dec.__bases__ = tuple(bases)

            ns0.SendAttachDoctorInformationResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "SendAttachDoctorInformationResponse_Dec_Holder"

    class SendAttachDoctorSectionInformation_Dec(ElementDeclaration):
        literal = "SendAttachDoctorSectionInformation"
        schema = "http://main.dce/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://main.dce/","SendAttachDoctorSectionInformation")
            kw["aname"] = "_SendAttachDoctorSectionInformation"
            if ns0.SendAttachDoctorSectionInformation_Def not in ns0.SendAttachDoctorSectionInformation_Dec.__bases__:
                bases = list(ns0.SendAttachDoctorSectionInformation_Dec.__bases__)
                bases.insert(0, ns0.SendAttachDoctorSectionInformation_Def)
                ns0.SendAttachDoctorSectionInformation_Dec.__bases__ = tuple(bases)

            ns0.SendAttachDoctorSectionInformation_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "SendAttachDoctorSectionInformation_Dec_Holder"

    class SendAttachDoctorSectionInformationResponse_Dec(ElementDeclaration):
        literal = "SendAttachDoctorSectionInformationResponse"
        schema = "http://main.dce/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://main.dce/","SendAttachDoctorSectionInformationResponse")
            kw["aname"] = "_SendAttachDoctorSectionInformationResponse"
            if ns0.SendAttachDoctorSectionInformationResponse_Def not in ns0.SendAttachDoctorSectionInformationResponse_Dec.__bases__:
                bases = list(ns0.SendAttachDoctorSectionInformationResponse_Dec.__bases__)
                bases.insert(0, ns0.SendAttachDoctorSectionInformationResponse_Def)
                ns0.SendAttachDoctorSectionInformationResponse_Dec.__bases__ = tuple(bases)

            ns0.SendAttachDoctorSectionInformationResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "SendAttachDoctorSectionInformationResponse_Dec_Holder"

    class SendAttachMoStreetSection_Dec(ElementDeclaration):
        literal = "SendAttachMoStreetSection"
        schema = "http://main.dce/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://main.dce/","SendAttachMoStreetSection")
            kw["aname"] = "_SendAttachMoStreetSection"
            if ns0.SendAttachMoStreetSection_Def not in ns0.SendAttachMoStreetSection_Dec.__bases__:
                bases = list(ns0.SendAttachMoStreetSection_Dec.__bases__)
                bases.insert(0, ns0.SendAttachMoStreetSection_Def)
                ns0.SendAttachMoStreetSection_Dec.__bases__ = tuple(bases)

            ns0.SendAttachMoStreetSection_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "SendAttachMoStreetSection_Dec_Holder"

    class SendAttachMoStreetSectionResponse_Dec(ElementDeclaration):
        literal = "SendAttachMoStreetSectionResponse"
        schema = "http://main.dce/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://main.dce/","SendAttachMoStreetSectionResponse")
            kw["aname"] = "_SendAttachMoStreetSectionResponse"
            if ns0.SendAttachMoStreetSectionResponse_Def not in ns0.SendAttachMoStreetSectionResponse_Dec.__bases__:
                bases = list(ns0.SendAttachMoStreetSectionResponse_Dec.__bases__)
                bases.insert(0, ns0.SendAttachMoStreetSectionResponse_Def)
                ns0.SendAttachMoStreetSectionResponse_Dec.__bases__ = tuple(bases)

            ns0.SendAttachMoStreetSectionResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "SendAttachMoStreetSectionResponse_Dec_Holder"

    class SendFactOrdersHospital_Dec(ElementDeclaration):
        literal = "SendFactOrdersHospital"
        schema = "http://main.dce/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://main.dce/","SendFactOrdersHospital")
            kw["aname"] = "_SendFactOrdersHospital"
            if ns0.SendFactOrdersHospital_Def not in ns0.SendFactOrdersHospital_Dec.__bases__:
                bases = list(ns0.SendFactOrdersHospital_Dec.__bases__)
                bases.insert(0, ns0.SendFactOrdersHospital_Def)
                ns0.SendFactOrdersHospital_Dec.__bases__ = tuple(bases)

            ns0.SendFactOrdersHospital_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "SendFactOrdersHospital_Dec_Holder"

    class SendFactOrdersHospitalResponse_Dec(ElementDeclaration):
        literal = "SendFactOrdersHospitalResponse"
        schema = "http://main.dce/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://main.dce/","SendFactOrdersHospitalResponse")
            kw["aname"] = "_SendFactOrdersHospitalResponse"
            if ns0.SendFactOrdersHospitalResponse_Def not in ns0.SendFactOrdersHospitalResponse_Dec.__bases__:
                bases = list(ns0.SendFactOrdersHospitalResponse_Dec.__bases__)
                bases.insert(0, ns0.SendFactOrdersHospitalResponse_Def)
                ns0.SendFactOrdersHospitalResponse_Dec.__bases__ = tuple(bases)

            ns0.SendFactOrdersHospitalResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "SendFactOrdersHospitalResponse_Dec_Holder"

    class SendKDInformation_Dec(ElementDeclaration):
        literal = "SendKDInformation"
        schema = "http://main.dce/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://main.dce/","SendKDInformation")
            kw["aname"] = "_SendKDInformation"
            if ns0.SendKDInformation_Def not in ns0.SendKDInformation_Dec.__bases__:
                bases = list(ns0.SendKDInformation_Dec.__bases__)
                bases.insert(0, ns0.SendKDInformation_Def)
                ns0.SendKDInformation_Dec.__bases__ = tuple(bases)

            ns0.SendKDInformation_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "SendKDInformation_Dec_Holder"

    class SendKDInformationResponse_Dec(ElementDeclaration):
        literal = "SendKDInformationResponse"
        schema = "http://main.dce/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://main.dce/","SendKDInformationResponse")
            kw["aname"] = "_SendKDInformationResponse"
            if ns0.SendKDInformationResponse_Def not in ns0.SendKDInformationResponse_Dec.__bases__:
                bases = list(ns0.SendKDInformationResponse_Dec.__bases__)
                bases.insert(0, ns0.SendKDInformationResponse_Def)
                ns0.SendKDInformationResponse_Dec.__bases__ = tuple(bases)

            ns0.SendKDInformationResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "SendKDInformationResponse_Dec_Holder"

    class SendOrdersHospitalUrgently_Dec(ElementDeclaration):
        literal = "SendOrdersHospitalUrgently"
        schema = "http://main.dce/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://main.dce/","SendOrdersHospitalUrgently")
            kw["aname"] = "_SendOrdersHospitalUrgently"
            if ns0.SendOrdersHospitalUrgently_Def not in ns0.SendOrdersHospitalUrgently_Dec.__bases__:
                bases = list(ns0.SendOrdersHospitalUrgently_Dec.__bases__)
                bases.insert(0, ns0.SendOrdersHospitalUrgently_Def)
                ns0.SendOrdersHospitalUrgently_Dec.__bases__ = tuple(bases)

            ns0.SendOrdersHospitalUrgently_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "SendOrdersHospitalUrgently_Dec_Holder"

    class SendOrdersHospitalUrgentlyResponse_Dec(ElementDeclaration):
        literal = "SendOrdersHospitalUrgentlyResponse"
        schema = "http://main.dce/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://main.dce/","SendOrdersHospitalUrgentlyResponse")
            kw["aname"] = "_SendOrdersHospitalUrgentlyResponse"
            if ns0.SendOrdersHospitalUrgentlyResponse_Def not in ns0.SendOrdersHospitalUrgentlyResponse_Dec.__bases__:
                bases = list(ns0.SendOrdersHospitalUrgentlyResponse_Dec.__bases__)
                bases.insert(0, ns0.SendOrdersHospitalUrgentlyResponse_Def)
                ns0.SendOrdersHospitalUrgentlyResponse_Dec.__bases__ = tuple(bases)

            ns0.SendOrdersHospitalUrgentlyResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "SendOrdersHospitalUrgentlyResponse_Dec_Holder"

    class SendOrdersLeave_Dec(ElementDeclaration):
        literal = "SendOrdersLeave"
        schema = "http://main.dce/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://main.dce/","SendOrdersLeave")
            kw["aname"] = "_SendOrdersLeave"
            if ns0.SendOrdersLeave_Def not in ns0.SendOrdersLeave_Dec.__bases__:
                bases = list(ns0.SendOrdersLeave_Dec.__bases__)
                bases.insert(0, ns0.SendOrdersLeave_Def)
                ns0.SendOrdersLeave_Dec.__bases__ = tuple(bases)

            ns0.SendOrdersLeave_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "SendOrdersLeave_Dec_Holder"

    class SendOrdersLeaveResponse_Dec(ElementDeclaration):
        literal = "SendOrdersLeaveResponse"
        schema = "http://main.dce/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://main.dce/","SendOrdersLeaveResponse")
            kw["aname"] = "_SendOrdersLeaveResponse"
            if ns0.SendOrdersLeaveResponse_Def not in ns0.SendOrdersLeaveResponse_Dec.__bases__:
                bases = list(ns0.SendOrdersLeaveResponse_Dec.__bases__)
                bases.insert(0, ns0.SendOrdersLeaveResponse_Def)
                ns0.SendOrdersLeaveResponse_Dec.__bases__ = tuple(bases)

            ns0.SendOrdersLeaveResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "SendOrdersLeaveResponse_Dec_Holder"

    class SendOrdersNullification_Dec(ElementDeclaration):
        literal = "SendOrdersNullification"
        schema = "http://main.dce/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://main.dce/","SendOrdersNullification")
            kw["aname"] = "_SendOrdersNullification"
            if ns0.SendOrdersNullification_Def not in ns0.SendOrdersNullification_Dec.__bases__:
                bases = list(ns0.SendOrdersNullification_Dec.__bases__)
                bases.insert(0, ns0.SendOrdersNullification_Def)
                ns0.SendOrdersNullification_Dec.__bases__ = tuple(bases)

            ns0.SendOrdersNullification_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "SendOrdersNullification_Dec_Holder"

    class SendOrdersNullificationResponse_Dec(ElementDeclaration):
        literal = "SendOrdersNullificationResponse"
        schema = "http://main.dce/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://main.dce/","SendOrdersNullificationResponse")
            kw["aname"] = "_SendOrdersNullificationResponse"
            if ns0.SendOrdersNullificationResponse_Def not in ns0.SendOrdersNullificationResponse_Dec.__bases__:
                bases = list(ns0.SendOrdersNullificationResponse_Dec.__bases__)
                bases.insert(0, ns0.SendOrdersNullificationResponse_Def)
                ns0.SendOrdersNullificationResponse_Dec.__bases__ = tuple(bases)

            ns0.SendOrdersNullificationResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "SendOrdersNullificationResponse_Dec_Holder"

    class SendPlanOrdersClinic_Dec(ElementDeclaration):
        literal = "SendPlanOrdersClinic"
        schema = "http://main.dce/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://main.dce/","SendPlanOrdersClinic")
            kw["aname"] = "_SendPlanOrdersClinic"
            if ns0.SendPlanOrdersClinic_Def not in ns0.SendPlanOrdersClinic_Dec.__bases__:
                bases = list(ns0.SendPlanOrdersClinic_Dec.__bases__)
                bases.insert(0, ns0.SendPlanOrdersClinic_Def)
                ns0.SendPlanOrdersClinic_Dec.__bases__ = tuple(bases)

            ns0.SendPlanOrdersClinic_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "SendPlanOrdersClinic_Dec_Holder"

    class SendPlanOrdersClinicResponse_Dec(ElementDeclaration):
        literal = "SendPlanOrdersClinicResponse"
        schema = "http://main.dce/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://main.dce/","SendPlanOrdersClinicResponse")
            kw["aname"] = "_SendPlanOrdersClinicResponse"
            if ns0.SendPlanOrdersClinicResponse_Def not in ns0.SendPlanOrdersClinicResponse_Dec.__bases__:
                bases = list(ns0.SendPlanOrdersClinicResponse_Dec.__bases__)
                bases.insert(0, ns0.SendPlanOrdersClinicResponse_Def)
                ns0.SendPlanOrdersClinicResponse_Dec.__bases__ = tuple(bases)

            ns0.SendPlanOrdersClinicResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "SendPlanOrdersClinicResponse_Dec_Holder"

    class SendQueryForDeAttachForMO_Dec(ElementDeclaration):
        literal = "SendQueryForDeAttachForMO"
        schema = "http://main.dce/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://main.dce/","SendQueryForDeAttachForMO")
            kw["aname"] = "_SendQueryForDeAttachForMO"
            if ns0.SendQueryForDeAttachForMO_Def not in ns0.SendQueryForDeAttachForMO_Dec.__bases__:
                bases = list(ns0.SendQueryForDeAttachForMO_Dec.__bases__)
                bases.insert(0, ns0.SendQueryForDeAttachForMO_Def)
                ns0.SendQueryForDeAttachForMO_Dec.__bases__ = tuple(bases)

            ns0.SendQueryForDeAttachForMO_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "SendQueryForDeAttachForMO_Dec_Holder"

    class SendQueryForDeAttachForMOResponse_Dec(ElementDeclaration):
        literal = "SendQueryForDeAttachForMOResponse"
        schema = "http://main.dce/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://main.dce/","SendQueryForDeAttachForMOResponse")
            kw["aname"] = "_SendQueryForDeAttachForMOResponse"
            if ns0.SendQueryForDeAttachForMOResponse_Def not in ns0.SendQueryForDeAttachForMOResponse_Dec.__bases__:
                bases = list(ns0.SendQueryForDeAttachForMOResponse_Dec.__bases__)
                bases.insert(0, ns0.SendQueryForDeAttachForMOResponse_Def)
                ns0.SendQueryForDeAttachForMOResponse_Dec.__bases__ = tuple(bases)

            ns0.SendQueryForDeAttachForMOResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "SendQueryForDeAttachForMOResponse_Dec_Holder"

    class SendReservedBedUrgently_Dec(ElementDeclaration):
        literal = "SendReservedBedUrgently"
        schema = "http://main.dce/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://main.dce/","SendReservedBedUrgently")
            kw["aname"] = "_SendReservedBedUrgently"
            if ns0.SendReservedBedUrgently_Def not in ns0.SendReservedBedUrgently_Dec.__bases__:
                bases = list(ns0.SendReservedBedUrgently_Dec.__bases__)
                bases.insert(0, ns0.SendReservedBedUrgently_Def)
                ns0.SendReservedBedUrgently_Dec.__bases__ = tuple(bases)

            ns0.SendReservedBedUrgently_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "SendReservedBedUrgently_Dec_Holder"

    class SendReservedBedUrgentlyResponse_Dec(ElementDeclaration):
        literal = "SendReservedBedUrgentlyResponse"
        schema = "http://main.dce/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://main.dce/","SendReservedBedUrgentlyResponse")
            kw["aname"] = "_SendReservedBedUrgentlyResponse"
            if ns0.SendReservedBedUrgentlyResponse_Def not in ns0.SendReservedBedUrgentlyResponse_Dec.__bases__:
                bases = list(ns0.SendReservedBedUrgentlyResponse_Dec.__bases__)
                bases.insert(0, ns0.SendReservedBedUrgentlyResponse_Def)
                ns0.SendReservedBedUrgentlyResponse_Dec.__bases__ = tuple(bases)

            ns0.SendReservedBedUrgentlyResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "SendReservedBedUrgentlyResponse_Dec_Holder"

    class SendTryAssertReservedBed_Dec(ElementDeclaration):
        literal = "SendTryAssertReservedBed"
        schema = "http://main.dce/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://main.dce/","SendTryAssertReservedBed")
            kw["aname"] = "_SendTryAssertReservedBed"
            if ns0.SendTryAssertReservedBed_Def not in ns0.SendTryAssertReservedBed_Dec.__bases__:
                bases = list(ns0.SendTryAssertReservedBed_Dec.__bases__)
                bases.insert(0, ns0.SendTryAssertReservedBed_Def)
                ns0.SendTryAssertReservedBed_Dec.__bases__ = tuple(bases)

            ns0.SendTryAssertReservedBed_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "SendTryAssertReservedBed_Dec_Holder"

    class SendTryAssertReservedBedResponse_Dec(ElementDeclaration):
        literal = "SendTryAssertReservedBedResponse"
        schema = "http://main.dce/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://main.dce/","SendTryAssertReservedBedResponse")
            kw["aname"] = "_SendTryAssertReservedBedResponse"
            if ns0.SendTryAssertReservedBedResponse_Def not in ns0.SendTryAssertReservedBedResponse_Dec.__bases__:
                bases = list(ns0.SendTryAssertReservedBedResponse_Dec.__bases__)
                bases.insert(0, ns0.SendTryAssertReservedBedResponse_Def)
                ns0.SendTryAssertReservedBedResponse_Dec.__bases__ = tuple(bases)

            ns0.SendTryAssertReservedBedResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "SendTryAssertReservedBedResponse_Dec_Holder"

    class SendTryCancelBed_Dec(ElementDeclaration):
        literal = "SendTryCancelBed"
        schema = "http://main.dce/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://main.dce/","SendTryCancelBed")
            kw["aname"] = "_SendTryCancelBed"
            if ns0.SendTryCancelBed_Def not in ns0.SendTryCancelBed_Dec.__bases__:
                bases = list(ns0.SendTryCancelBed_Dec.__bases__)
                bases.insert(0, ns0.SendTryCancelBed_Def)
                ns0.SendTryCancelBed_Dec.__bases__ = tuple(bases)

            ns0.SendTryCancelBed_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "SendTryCancelBed_Dec_Holder"

    class SendTryCancelBedResponse_Dec(ElementDeclaration):
        literal = "SendTryCancelBedResponse"
        schema = "http://main.dce/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://main.dce/","SendTryCancelBedResponse")
            kw["aname"] = "_SendTryCancelBedResponse"
            if ns0.SendTryCancelBedResponse_Def not in ns0.SendTryCancelBedResponse_Dec.__bases__:
                bases = list(ns0.SendTryCancelBedResponse_Dec.__bases__)
                bases.insert(0, ns0.SendTryCancelBedResponse_Def)
                ns0.SendTryCancelBedResponse_Dec.__bases__ = tuple(bases)

            ns0.SendTryCancelBedResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "SendTryCancelBedResponse_Dec_Holder"

    class SendTryFreeBed_Dec(ElementDeclaration):
        literal = "SendTryFreeBed"
        schema = "http://main.dce/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://main.dce/","SendTryFreeBed")
            kw["aname"] = "_SendTryFreeBed"
            if ns0.SendTryFreeBed_Def not in ns0.SendTryFreeBed_Dec.__bases__:
                bases = list(ns0.SendTryFreeBed_Dec.__bases__)
                bases.insert(0, ns0.SendTryFreeBed_Def)
                ns0.SendTryFreeBed_Dec.__bases__ = tuple(bases)

            ns0.SendTryFreeBed_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "SendTryFreeBed_Dec_Holder"

    class SendTryFreeBedResponse_Dec(ElementDeclaration):
        literal = "SendTryFreeBedResponse"
        schema = "http://main.dce/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://main.dce/","SendTryFreeBedResponse")
            kw["aname"] = "_SendTryFreeBedResponse"
            if ns0.SendTryFreeBedResponse_Def not in ns0.SendTryFreeBedResponse_Dec.__bases__:
                bases = list(ns0.SendTryFreeBedResponse_Dec.__bases__)
                bases.insert(0, ns0.SendTryFreeBedResponse_Def)
                ns0.SendTryFreeBedResponse_Dec.__bases__ = tuple(bases)

            ns0.SendTryFreeBedResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "SendTryFreeBedResponse_Dec_Holder"

    class SendTryReservedBed_Dec(ElementDeclaration):
        literal = "SendTryReservedBed"
        schema = "http://main.dce/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://main.dce/","SendTryReservedBed")
            kw["aname"] = "_SendTryReservedBed"
            if ns0.SendTryReservedBed_Def not in ns0.SendTryReservedBed_Dec.__bases__:
                bases = list(ns0.SendTryReservedBed_Dec.__bases__)
                bases.insert(0, ns0.SendTryReservedBed_Def)
                ns0.SendTryReservedBed_Dec.__bases__ = tuple(bases)

            ns0.SendTryReservedBed_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "SendTryReservedBed_Dec_Holder"

    class SendTryReservedBedResponse_Dec(ElementDeclaration):
        literal = "SendTryReservedBedResponse"
        schema = "http://main.dce/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://main.dce/","SendTryReservedBedResponse")
            kw["aname"] = "_SendTryReservedBedResponse"
            if ns0.SendTryReservedBedResponse_Def not in ns0.SendTryReservedBedResponse_Dec.__bases__:
                bases = list(ns0.SendTryReservedBedResponse_Dec.__bases__)
                bases.insert(0, ns0.SendTryReservedBedResponse_Def)
                ns0.SendTryReservedBedResponse_Dec.__bases__ = tuple(bases)

            ns0.SendTryReservedBedResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "SendTryReservedBedResponse_Dec_Holder"

    class SetLoginAccess_Dec(ElementDeclaration):
        literal = "SetLoginAccess"
        schema = "http://main.dce/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://main.dce/","SetLoginAccess")
            kw["aname"] = "_SetLoginAccess"
            if ns0.SetLoginAccess_Def not in ns0.SetLoginAccess_Dec.__bases__:
                bases = list(ns0.SetLoginAccess_Dec.__bases__)
                bases.insert(0, ns0.SetLoginAccess_Def)
                ns0.SetLoginAccess_Dec.__bases__ = tuple(bases)

            ns0.SetLoginAccess_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "SetLoginAccess_Dec_Holder"

    class SetLoginAccessResponse_Dec(ElementDeclaration):
        literal = "SetLoginAccessResponse"
        schema = "http://main.dce/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://main.dce/","SetLoginAccessResponse")
            kw["aname"] = "_SetLoginAccessResponse"
            if ns0.SetLoginAccessResponse_Def not in ns0.SetLoginAccessResponse_Dec.__bases__:
                bases = list(ns0.SetLoginAccessResponse_Dec.__bases__)
                bases.insert(0, ns0.SetLoginAccessResponse_Def)
                ns0.SetLoginAccessResponse_Dec.__bases__ = tuple(bases)

            ns0.SetLoginAccessResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "SetLoginAccessResponse_Dec_Holder"

    class orderpack_Dec(ZSI.TC.AnyType, ElementDeclaration):
        literal = "orderpack"
        schema = "http://main.dce/"
        def __init__(self, **kw):
            kw["pname"] = ("http://main.dce/","orderpack")
            kw["aname"] = "_orderpack"
            ZSI.TC.AnyType.__init__(self, **kw)

    class params_Dec(ElementDeclaration):
        literal = "params"
        schema = "http://main.dce/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://main.dce/","params")
            kw["aname"] = "_params"
            if ns0.cAttachReportParam_Def not in ns0.params_Dec.__bases__:
                bases = list(ns0.params_Dec.__bases__)
                bases.insert(0, ns0.cAttachReportParam_Def)
                ns0.params_Dec.__bases__ = tuple(bases)

            ns0.cAttachReportParam_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "params_Dec_Holder"

    class rep_pack_Dec(ElementDeclaration):
        literal = "rep_pack"
        schema = "http://main.dce/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://main.dce/","rep_pack")
            kw["aname"] = "_rep_pack"
            if ns0.cAttachAgregateSmoMoByDate_Def not in ns0.rep_pack_Dec.__bases__:
                bases = list(ns0.rep_pack_Dec.__bases__)
                bases.insert(0, ns0.cAttachAgregateSmoMoByDate_Def)
                ns0.rep_pack_Dec.__bases__ = tuple(bases)

            ns0.cAttachAgregateSmoMoByDate_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "rep_pack_Dec_Holder"

    class responcepack_Dec(ZSI.TC.AnyType, ElementDeclaration):
        literal = "responcepack"
        schema = "http://main.dce/"
        def __init__(self, **kw):
            kw["pname"] = ("http://main.dce/","responcepack")
            kw["aname"] = "_responcepack"
            ZSI.TC.AnyType.__init__(self, **kw)

# end class ns0 (tns: http://main.dce/)
