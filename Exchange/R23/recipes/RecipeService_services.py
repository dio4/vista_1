################################################## 
# RecipeService_services.py 
# generated by ZSI.generate.wsdl2python
##################################################


from RecipeService_services_types import *
from ZSI import client

# Locator
class RecipeServiceLocator:
    RecipeServiceSoap_address = "http://10.0.1.155/drugstore/RecipeService.asmx"
    def getRecipeServiceSoapAddress(self):
        return RecipeServiceLocator.RecipeServiceSoap_address
    def getRecipeServiceSoap(self, url=None, **kw):
        return RecipeServiceSoapSOAP(url or RecipeServiceLocator.RecipeServiceSoap_address, **kw)

# Methods
class RecipeServiceSoapSOAP:
    def __init__(self, url, **kw):
        kw.setdefault("readerclass", None)
        kw.setdefault("writerclass", None)
        # no resource properties
        self.binding = client.Binding(url=url, **kw)
        # no ws-addressing

    # op: RecipeRequest
    def RecipeRequest(self, request):
        if isinstance(request, RecipeRequestSoapIn) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="http://tempuri.org/RecipeRequest", **kw)
        # no output wsaction
        response = self.binding.Receive(RecipeRequestSoapOut.typecode)
        return response

    # op: RecipeRequestRepeat
    def RecipeRequestRepeat(self, request):
        if isinstance(request, RecipeRequestRepeatSoapIn) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="http://tempuri.org/RecipeRequestRepeat", **kw)
        # no output wsaction
        response = self.binding.Receive(RecipeRequestRepeatSoapOut.typecode)
        return response

    # op: RecipeResponse
    def RecipeResponse(self, request):
        if isinstance(request, RecipeResponseSoapIn) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="http://tempuri.org/RecipeResponse", **kw)
        # no output wsaction
        response = self.binding.Receive(RecipeResponseSoapOut.typecode)
        return response

    # op: RecipeFind
    def RecipeFind(self, request):
        if isinstance(request, RecipeFindSoapIn) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="http://tempuri.org/RecipeFind", **kw)
        # no output wsaction
        response = self.binding.Receive(RecipeFindSoapOut.typecode)
        return response

    # op: RecipeCheck
    def RecipeCheck(self, request):
        if isinstance(request, RecipeCheckSoapIn) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="http://tempuri.org/RecipeCheck", **kw)
        # no output wsaction
        response = self.binding.Receive(RecipeCheckSoapOut.typecode)
        return response

    # op: RecipeEditCheck
    def RecipeEditCheck(self, request):
        if isinstance(request, RecipeEditCheckSoapIn) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="http://tempuri.org/RecipeEditCheck", **kw)
        # no output wsaction
        response = self.binding.Receive(RecipeEditCheckSoapOut.typecode)
        return response

    # op: RecipeDelay
    def RecipeDelay(self, request):
        if isinstance(request, RecipeDelaySoapIn) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="http://tempuri.org/RecipeDelay", **kw)
        # no output wsaction
        response = self.binding.Receive(RecipeDelaySoapOut.typecode)
        return response

    # op: RecipeClientSave
    def RecipeClientSave(self, request):
        if isinstance(request, RecipeClientSaveSoapIn) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="http://tempuri.org/RecipeClientSave", **kw)
        # no output wsaction
        response = self.binding.Receive(RecipeClientSaveSoapOut.typecode)
        return response

    # op: RecipesClientSave
    def RecipesClientSave(self, request):
        if isinstance(request, RecipesClientSaveSoapIn) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="http://tempuri.org/RecipesClientSave", **kw)
        # no output wsaction
        response = self.binding.Receive(RecipesClientSaveSoapOut.typecode)
        return response

    # op: RecipeReestrRequest
    def RecipeReestrRequest(self, request):
        if isinstance(request, RecipeReestrRequestSoapIn) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="http://tempuri.org/RecipeReestrRequest", **kw)
        # no output wsaction
        response = self.binding.Receive(RecipeReestrRequestSoapOut.typecode)
        return response

RecipeRequestSoapIn = ns0.RecipeRequest_Dec().pyclass

RecipeRequestSoapOut = ns0.RecipeRequestResponse_Dec().pyclass

RecipeRequestRepeatSoapIn = ns0.RecipeRequestRepeat_Dec().pyclass

RecipeRequestRepeatSoapOut = ns0.RecipeRequestRepeatResponse_Dec().pyclass

RecipeResponseSoapIn = ns0.RecipeResponse_Dec().pyclass

RecipeResponseSoapOut = ns0.RecipeResponseResponse_Dec().pyclass

RecipeFindSoapIn = ns0.RecipeFind_Dec().pyclass

RecipeFindSoapOut = ns0.RecipeFindResponse_Dec().pyclass

RecipeCheckSoapIn = ns0.RecipeCheck_Dec().pyclass

RecipeCheckSoapOut = ns0.RecipeCheckResponse_Dec().pyclass

RecipeEditCheckSoapIn = ns0.RecipeEditCheck_Dec().pyclass

RecipeEditCheckSoapOut = ns0.RecipeEditCheckResponse_Dec().pyclass

RecipeDelaySoapIn = ns0.RecipeDelay_Dec().pyclass

RecipeDelaySoapOut = ns0.RecipeDelayResponse_Dec().pyclass

RecipeClientSaveSoapIn = ns0.RecipeClientSave_Dec().pyclass

RecipeClientSaveSoapOut = ns0.RecipeClientSaveResponse_Dec().pyclass

RecipesClientSaveSoapIn = ns0.RecipesClientSave_Dec().pyclass

RecipesClientSaveSoapOut = ns0.RecipesClientSaveResponse_Dec().pyclass

RecipeReestrRequestSoapIn = ns0.RecipeReestrRequest_Dec().pyclass

RecipeReestrRequestSoapOut = ns0.RecipeReestrRequestResponse_Dec().pyclass
