##################################################
# file: DrugstoreService_services_types.py
#
# schema types generated by "ZSI.generate.wsdl2python.WriteServiceModule"
#    /usr/lib/python-exec/python2.7/wsdl2py drugstore.wsdl
#
##################################################

import ZSI
import ZSI.TCcompound
from ZSI.schema import LocalElementDeclaration, ElementDeclaration, TypeDefinition, GTD, GED

##############################
# targetNamespace
# http://tempuri.org/
##############################

class ns0:
    targetNamespace = "http://tempuri.org/"

    class ArrayOfRemain_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://tempuri.org/"
        type = (schema, "ArrayOfRemain")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ArrayOfRemain_Def.schema
            TClist = [GTD("http://tempuri.org/","Remain",lazy=False)(pname=(ns,"Remain"), aname="_Remain", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Remain = []
                    return
            Holder.__name__ = "ArrayOfRemain_Holder"
            self.pyclass = Holder

    class Remain_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://tempuri.org/"
        type = (schema, "Remain")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.Remain_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"GUID"), aname="_GUID", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname=(ns,"CONTRACTOR_ID"), aname="_CONTRACTOR_ID", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"DRUGSTORE_LOT_GUID"), aname="_DRUGSTORE_LOT_GUID", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"UNIFY_GUID"), aname="_UNIFY_GUID", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"CONTRACT_ITEM_GUID"), aname="_CONTRACT_ITEM_GUID", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"STORE"), aname="_STORE", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"SUPPLIER"), aname="_SUPPLIER", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"PRODUCT"), aname="_PRODUCT", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"UNIT"), aname="_UNIT", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"SERIA"), aname="_SERIA", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"DOCUMENT_TYPE"), aname="_DOCUMENT_TYPE", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"DOCUMENT_ID"), aname="_DOCUMENT_ID", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"DOCUMENT_NUMBER"), aname="_DOCUMENT_NUMBER", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"DOCUMENT_ITEM_ID"), aname="_DOCUMENT_ITEM_ID", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname=(ns,"DOCUMENT_DATE"), aname="_DOCUMENT_DATE", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname=(ns,"INVOICE_DATE"), aname="_INVOICE_DATE", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"INVOICE_NUMBER"), aname="_INVOICE_NUMBER", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"BARCODE"), aname="_BARCODE", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"NUMERATOR"), aname="_NUMERATOR", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"DENOMINATOR"), aname="_DENOMINATOR", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Decimal(pname=(ns,"QUANTITY_ADD"), aname="_QUANTITY_ADD", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Decimal(pname=(ns,"QUANTITY_SUB"), aname="_QUANTITY_SUB", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Decimal(pname=(ns,"QUANTITY_RES"), aname="_QUANTITY_RES", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Decimal(pname=(ns,"QUANTITY_REM"), aname="_QUANTITY_REM", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Decimal(pname=(ns,"QUANTITY_INVOICE"), aname="_QUANTITY_INVOICE", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Decimal(pname=(ns,"QUANTITY_RETURN_SUPPLIER"), aname="_QUANTITY_RETURN_SUPPLIER", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Decimal(pname=(ns,"PRODUCER_VAT"), aname="_PRODUCER_VAT", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Decimal(pname=(ns,"PRODUCER_PRICE"), aname="_PRODUCER_PRICE", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Decimal(pname=(ns,"PRODUCER_PRICE_VAT"), aname="_PRODUCER_PRICE_VAT", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Decimal(pname=(ns,"SUPPLIER_VAT"), aname="_SUPPLIER_VAT", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Decimal(pname=(ns,"SUPPLIER_PRICE"), aname="_SUPPLIER_PRICE", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Decimal(pname=(ns,"SUPPLIER_PRICE_VAT"), aname="_SUPPLIER_PRICE_VAT", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Decimal(pname=(ns,"RETAIL_VAT"), aname="_RETAIL_VAT", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Decimal(pname=(ns,"RETAIL_PRICE"), aname="_RETAIL_PRICE", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Decimal(pname=(ns,"RETAIL_PRICE_VAT"), aname="_RETAIL_PRICE_VAT", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname=(ns,"INTERNAL_INVOICE_DATE"), aname="_INTERNAL_INVOICE_DATE", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"INTERNAL_INVOICE_NUMBER"), aname="_INTERNAL_INVOICE_NUMBER", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname=(ns,"STORE_ID"), aname="_STORE_ID", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Entity_Def not in ns0.Remain_Def.__bases__:
                bases = list(ns0.Remain_Def.__bases__)
                bases.insert(0, ns0.Entity_Def)
                ns0.Remain_Def.__bases__ = tuple(bases)

            ns0.Entity_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class Entity_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://tempuri.org/"
        type = (schema, "Entity")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.Entity_Def.schema
            TClist = []
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "Entity_Holder"
            self.pyclass = Holder

    class ArrayOfRemainOutput_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://tempuri.org/"
        type = (schema, "ArrayOfRemainOutput")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ArrayOfRemainOutput_Def.schema
            TClist = [GTD("http://tempuri.org/","RemainOutput",lazy=False)(pname=(ns,"RemainOutput"), aname="_RemainOutput", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._RemainOutput = []
                    return
            Holder.__name__ = "ArrayOfRemainOutput_Holder"
            self.pyclass = Holder

    class RemainOutput_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://tempuri.org/"
        type = (schema, "RemainOutput")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.RemainOutput_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"Id"), aname="_Id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"DrugstoreId"), aname="_DrugstoreId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"DrugstoreName"), aname="_DrugstoreName", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ProductUnifyId"), aname="_ProductUnifyId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ProductName"), aname="_ProductName", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ProducerName"), aname="_ProducerName", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"CountryName"), aname="_CountryName", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Mnn"), aname="_Mnn", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Trn"), aname="_Trn", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Cureform"), aname="_Cureform", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Dosage"), aname="_Dosage", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"Package"), aname="_Package", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"Denominator"), aname="_Denominator", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Decimal(pname=(ns,"Price"), aname="_Price", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Decimal(pname=(ns,"Quantity"), aname="_Quantity", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Entity_Def not in ns0.RemainOutput_Def.__bases__:
                bases = list(ns0.RemainOutput_Def.__bases__)
                bases.insert(0, ns0.Entity_Def)
                ns0.RemainOutput_Def.__bases__ = tuple(bases)

            ns0.Entity_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ArrayOfShipment_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://tempuri.org/"
        type = (schema, "ArrayOfShipment")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ArrayOfShipment_Def.schema
            TClist = [GTD("http://tempuri.org/","Shipment",lazy=False)(pname=(ns,"Shipment"), aname="_Shipment", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Shipment = []
                    return
            Holder.__name__ = "ArrayOfShipment_Holder"
            self.pyclass = Holder

    class Shipment_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://tempuri.org/"
        type = (schema, "Shipment")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.Shipment_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"GUID"), aname="_GUID", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname=(ns,"CLIENT_ID"), aname="_CLIENT_ID", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"CONTRACTOR_GUID"), aname="_CONTRACTOR_GUID", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"UNIFY_GUID"), aname="_UNIFY_GUID", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"OPERATIONAL_OFFER_LPU_ITEM_GUID"), aname="_OPERATIONAL_OFFER_LPU_ITEM_GUID", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ORDER_LPU_ITEM_GUID"), aname="_ORDER_LPU_ITEM_GUID", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ID_GOS_CONTRACT_GOODS"), aname="_ID_GOS_CONTRACT_GOODS", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ID_INVOICE_OUT_GLOBAL"), aname="_ID_INVOICE_OUT_GLOBAL", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ID_INVOICE_OUT_ITEM_GLOBAL"), aname="_ID_INVOICE_OUT_ITEM_GLOBAL", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"DOCUMENT_NUMBER"), aname="_DOCUMENT_NUMBER", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"DOCUMENT_STATE"), aname="_DOCUMENT_STATE", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname=(ns,"DOCUMENT_DATE"), aname="_DOCUMENT_DATE", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"CONTRACTOR"), aname="_CONTRACTOR", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"STORE"), aname="_STORE", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"PRODUCT"), aname="_PRODUCT", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"UNIT"), aname="_UNIT", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"SERIA"), aname="_SERIA", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"NUMERATOR"), aname="_NUMERATOR", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"DENOMINATOR"), aname="_DENOMINATOR", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Decimal(pname=(ns,"QUANTITY"), aname="_QUANTITY", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Decimal(pname=(ns,"QUANTITY_ADD"), aname="_QUANTITY_ADD", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Decimal(pname=(ns,"QUANTITY_SUB"), aname="_QUANTITY_SUB", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Decimal(pname=(ns,"QUANTITY_RES"), aname="_QUANTITY_RES", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Decimal(pname=(ns,"QUANTITY_REM"), aname="_QUANTITY_REM", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"PRICE"), aname="_PRICE", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"RETAIL_VAT"), aname="_RETAIL_VAT", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"RETAIL_PRICE"), aname="_RETAIL_PRICE", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"RETAIL_PRICE_VAT"), aname="_RETAIL_PRICE_VAT", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Entity_Def not in ns0.Shipment_Def.__bases__:
                bases = list(ns0.Shipment_Def.__bases__)
                bases.insert(0, ns0.Entity_Def)
                ns0.Shipment_Def.__bases__ = tuple(bases)

            ns0.Entity_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ArrayOfContractor_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://tempuri.org/"
        type = (schema, "ArrayOfContractor")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ArrayOfContractor_Def.schema
            TClist = [GTD("http://tempuri.org/","Contractor",lazy=False)(pname=(ns,"Contractor"), aname="_Contractor", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Contractor = []
                    return
            Holder.__name__ = "ArrayOfContractor_Holder"
            self.pyclass = Holder

    class Contractor_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://tempuri.org/"
        type = (schema, "Contractor")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.Contractor_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"ID_CONTRACTOR_GLOBAL"), aname="_ID_CONTRACTOR_GLOBAL", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"NAME"), aname="_NAME", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"FULL_NAME"), aname="_FULL_NAME", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"INN"), aname="_INN", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ADDRESS"), aname="_ADDRESS", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"PHONE"), aname="_PHONE", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"OKPO"), aname="_OKPO", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"OKONH"), aname="_OKONH", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"KPP"), aname="_KPP", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"EMAIL"), aname="_EMAIL", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"BANK"), aname="_BANK", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"CORR_BANK"), aname="_CORR_BANK", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ACCOUNT"), aname="_ACCOUNT", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"BANK_ADDRESS"), aname="_BANK_ADDRESS", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"CORR_ACCOUNT"), aname="_CORR_ACCOUNT", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"BIK"), aname="_BIK", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"MNEMOCODE"), aname="_MNEMOCODE", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname=(ns,"COD_ID"), aname="_COD_ID", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"COD_OUT_ID"), aname="_COD_OUT_ID", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"COD_Source"), aname="_COD_Source", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname=(ns,"Depts"), aname="_Depts", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"FO_OGRN"), aname="_FO_OGRN", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname=(ns,"A_COD"), aname="_A_COD", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname=(ns,"DATE_MODIFIED"), aname="_DATE_MODIFIED", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname=(ns,"INSERTDATE"), aname="_INSERTDATE", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname=(ns,"DATE_DELETED"), aname="_DATE_DELETED", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname=(ns,"ID_FOLDER"), aname="_ID_FOLDER", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"IMPORT_PROVIDER"), aname="_IMPORT_PROVIDER", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ESFI_EXPORT_PATH"), aname="_ESFI_EXPORT_PATH", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ESFI_CODE"), aname="_ESFI_CODE", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"XML_DETAIL"), aname="_XML_DETAIL", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname=(ns,"ID_PRICING_PRICING_MODEL"), aname="_ID_PRICING_PRICING_MODEL", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"INVOICE_LOADER_SETTINGS_FILE_NAME"), aname="_INVOICE_LOADER_SETTINGS_FILE_NAME", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"CODE"), aname="_CODE", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"MAKE_SCHET_FACTURA"), aname="_MAKE_SCHET_FACTURA", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"DIRECTOR_FIO"), aname="_DIRECTOR_FIO", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"BUH_FIO"), aname="_BUH_FIO", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"INVOICE_ACCESS_POINT"), aname="_INVOICE_ACCESS_POINT", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ID_MOL"), aname="_ID_MOL", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"CHECK_CONTRACTS"), aname="_CHECK_CONTRACTS", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"USE_VAT"), aname="_USE_VAT", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"NAME_PREFIX"), aname="_NAME_PREFIX", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"NAME_SUFFIX"), aname="_NAME_SUFFIX", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"TAX_REG_CERT"), aname="_TAX_REG_CERT", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"UR_ADDRESS"), aname="_UR_ADDRESS", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"CONTRACT_NAME"), aname="_CONTRACT_NAME", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"LEGAL_PERS_SHORT"), aname="_LEGAL_PERS_SHORT", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"LEGAL_PERS"), aname="_LEGAL_PERS", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"EXPORT_ACCESS_POINT"), aname="_EXPORT_ACCESS_POINT", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"DIRECTOR_DOC"), aname="_DIRECTOR_DOC", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"BUH_DOC"), aname="_BUH_DOC", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"MED_LIC"), aname="_MED_LIC", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"FARM_LIC"), aname="_FARM_LIC", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"LIC_2"), aname="_LIC_2", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"LIC_3"), aname="_LIC_3", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname=(ns,"MED_DATE"), aname="_MED_DATE", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname=(ns,"FARM_DATE"), aname="_FARM_DATE", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname=(ns,"LIC2_DATE"), aname="_LIC2_DATE", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname=(ns,"LIC3_DATE"), aname="_LIC3_DATE", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"IS_FILIAL"), aname="_IS_FILIAL", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname=(ns,"OWNER_ID"), aname="_OWNER_ID", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Entity_Def not in ns0.Contractor_Def.__bases__:
                bases = list(ns0.Contractor_Def.__bases__)
                bases.insert(0, ns0.Entity_Def)
                ns0.Contractor_Def.__bases__ = tuple(bases)

            ns0.Entity_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ContractorLotWinner_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://tempuri.org/"
        type = (schema, "ContractorLotWinner")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.ContractorLotWinner_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Contractor_Def not in ns0.ContractorLotWinner_Def.__bases__:
                bases = list(ns0.ContractorLotWinner_Def.__bases__)
                bases.insert(0, ns0.Contractor_Def)
                ns0.ContractorLotWinner_Def.__bases__ = tuple(bases)

            ns0.Contractor_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ArrayOfResultProcessing_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://tempuri.org/"
        type = (schema, "ArrayOfResultProcessing")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ArrayOfResultProcessing_Def.schema
            TClist = [GTD("http://tempuri.org/","ResultProcessing",lazy=False)(pname=(ns,"ResultProcessing"), aname="_ResultProcessing", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ResultProcessing = []
                    return
            Holder.__name__ = "ArrayOfResultProcessing_Holder"
            self.pyclass = Holder

    class ResultProcessing_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://tempuri.org/"
        type = (schema, "ResultProcessing")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ResultProcessing_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"Id"), aname="_Id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Code"), aname="_Code", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Note"), aname="_Note", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Id = None
                    self._Code = None
                    self._Note = None
                    return
            Holder.__name__ = "ResultProcessing_Holder"
            self.pyclass = Holder

    class RemainRequest_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "RemainRequest"
        schema = "http://tempuri.org/"
        def __init__(self, **kw):
            ns = ns0.RemainRequest_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"clientId"), aname="_clientId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://tempuri.org/","RemainRequest")
            kw["aname"] = "_RemainRequest"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._clientId = None
                    return
            Holder.__name__ = "RemainRequest_Holder"
            self.pyclass = Holder

    class RemainRequestResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "RemainRequestResponse"
        schema = "http://tempuri.org/"
        def __init__(self, **kw):
            ns = ns0.RemainRequestResponse_Dec.schema
            TClist = [ZSI.TCnumbers.Ilong(pname=(ns,"RemainRequestResult"), aname="_RemainRequestResult", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://tempuri.org/","RemainRequestResponse")
            kw["aname"] = "_RemainRequestResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._RemainRequestResult = None
                    return
            Holder.__name__ = "RemainRequestResponse_Holder"
            self.pyclass = Holder

    class RemainResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "RemainResponse"
        schema = "http://tempuri.org/"
        def __init__(self, **kw):
            ns = ns0.RemainResponse_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"clientId"), aname="_clientId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname=(ns,"timestamp"), aname="_timestamp", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://tempuri.org/","ArrayOfRemain",lazy=False)(pname=(ns,"remains"), aname="_remains", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://tempuri.org/","RemainResponse")
            kw["aname"] = "_RemainResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._clientId = None
                    self._timestamp = None
                    self._remains = None
                    return
            Holder.__name__ = "RemainResponse_Holder"
            self.pyclass = Holder

    class RemainResponseResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "RemainResponseResponse"
        schema = "http://tempuri.org/"
        def __init__(self, **kw):
            ns = ns0.RemainResponseResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname=(ns,"RemainResponseResult"), aname="_RemainResponseResult", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://tempuri.org/","RemainResponseResponse")
            kw["aname"] = "_RemainResponseResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._RemainResponseResult = None
                    return
            Holder.__name__ = "RemainResponseResponse_Holder"
            self.pyclass = Holder

    class RemainDownload_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "RemainDownload"
        schema = "http://tempuri.org/"
        def __init__(self, **kw):
            ns = ns0.RemainDownload_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"clientId"), aname="_clientId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://tempuri.org/","RemainDownload")
            kw["aname"] = "_RemainDownload"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._clientId = None
                    return
            Holder.__name__ = "RemainDownload_Holder"
            self.pyclass = Holder

    class RemainDownloadResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "RemainDownloadResponse"
        schema = "http://tempuri.org/"
        def __init__(self, **kw):
            ns = ns0.RemainDownloadResponse_Dec.schema
            TClist = [GTD("http://tempuri.org/","ArrayOfRemainOutput",lazy=False)(pname=(ns,"RemainDownloadResult"), aname="_RemainDownloadResult", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://tempuri.org/","RemainDownloadResponse")
            kw["aname"] = "_RemainDownloadResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._RemainDownloadResult = None
                    return
            Holder.__name__ = "RemainDownloadResponse_Holder"
            self.pyclass = Holder

    class ShipmentRequest_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ShipmentRequest"
        schema = "http://tempuri.org/"
        def __init__(self, **kw):
            ns = ns0.ShipmentRequest_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"clientId"), aname="_clientId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://tempuri.org/","ShipmentRequest")
            kw["aname"] = "_ShipmentRequest"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._clientId = None
                    return
            Holder.__name__ = "ShipmentRequest_Holder"
            self.pyclass = Holder

    class ShipmentRequestResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ShipmentRequestResponse"
        schema = "http://tempuri.org/"
        def __init__(self, **kw):
            ns = ns0.ShipmentRequestResponse_Dec.schema
            TClist = [ZSI.TCnumbers.Ilong(pname=(ns,"ShipmentRequestResult"), aname="_ShipmentRequestResult", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://tempuri.org/","ShipmentRequestResponse")
            kw["aname"] = "_ShipmentRequestResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ShipmentRequestResult = None
                    return
            Holder.__name__ = "ShipmentRequestResponse_Holder"
            self.pyclass = Holder

    class ShipmentResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ShipmentResponse"
        schema = "http://tempuri.org/"
        def __init__(self, **kw):
            ns = ns0.ShipmentResponse_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"clientId"), aname="_clientId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname=(ns,"timestamp"), aname="_timestamp", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://tempuri.org/","ArrayOfShipment",lazy=False)(pname=(ns,"shipments"), aname="_shipments", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://tempuri.org/","ShipmentResponse")
            kw["aname"] = "_ShipmentResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._clientId = None
                    self._timestamp = None
                    self._shipments = None
                    return
            Holder.__name__ = "ShipmentResponse_Holder"
            self.pyclass = Holder

    class ShipmentResponseResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ShipmentResponseResponse"
        schema = "http://tempuri.org/"
        def __init__(self, **kw):
            ns = ns0.ShipmentResponseResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname=(ns,"ShipmentResponseResult"), aname="_ShipmentResponseResult", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://tempuri.org/","ShipmentResponseResponse")
            kw["aname"] = "_ShipmentResponseResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ShipmentResponseResult = None
                    return
            Holder.__name__ = "ShipmentResponseResponse_Holder"
            self.pyclass = Holder

    class ContractorRequest_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ContractorRequest"
        schema = "http://tempuri.org/"
        def __init__(self, **kw):
            ns = ns0.ContractorRequest_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"clientId"), aname="_clientId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://tempuri.org/","ContractorRequest")
            kw["aname"] = "_ContractorRequest"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._clientId = None
                    return
            Holder.__name__ = "ContractorRequest_Holder"
            self.pyclass = Holder

    class ContractorRequestResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ContractorRequestResponse"
        schema = "http://tempuri.org/"
        def __init__(self, **kw):
            ns = ns0.ContractorRequestResponse_Dec.schema
            TClist = [ZSI.TCnumbers.Ilong(pname=(ns,"ContractorRequestResult"), aname="_ContractorRequestResult", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://tempuri.org/","ContractorRequestResponse")
            kw["aname"] = "_ContractorRequestResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ContractorRequestResult = None
                    return
            Holder.__name__ = "ContractorRequestResponse_Holder"
            self.pyclass = Holder

    class ContractorResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ContractorResponse"
        schema = "http://tempuri.org/"
        def __init__(self, **kw):
            ns = ns0.ContractorResponse_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"clientId"), aname="_clientId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname=(ns,"timestamp"), aname="_timestamp", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://tempuri.org/","ArrayOfContractor",lazy=False)(pname=(ns,"contractors"), aname="_contractors", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://tempuri.org/","ContractorResponse")
            kw["aname"] = "_ContractorResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._clientId = None
                    self._timestamp = None
                    self._contractors = None
                    return
            Holder.__name__ = "ContractorResponse_Holder"
            self.pyclass = Holder

    class ContractorResponseResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ContractorResponseResponse"
        schema = "http://tempuri.org/"
        def __init__(self, **kw):
            ns = ns0.ContractorResponseResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname=(ns,"ContractorResponseResult"), aname="_ContractorResponseResult", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://tempuri.org/","ContractorResponseResponse")
            kw["aname"] = "_ContractorResponseResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ContractorResponseResult = None
                    return
            Holder.__name__ = "ContractorResponseResponse_Holder"
            self.pyclass = Holder

    class ServerContractorRequest_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ServerContractorRequest"
        schema = "http://tempuri.org/"
        def __init__(self, **kw):
            ns = ns0.ServerContractorRequest_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"clientId"), aname="_clientId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://tempuri.org/","ServerContractorRequest")
            kw["aname"] = "_ServerContractorRequest"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._clientId = None
                    return
            Holder.__name__ = "ServerContractorRequest_Holder"
            self.pyclass = Holder

    class ServerContractorRequestResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ServerContractorRequestResponse"
        schema = "http://tempuri.org/"
        def __init__(self, **kw):
            ns = ns0.ServerContractorRequestResponse_Dec.schema
            TClist = [GTD("http://tempuri.org/","ArrayOfContractor",lazy=False)(pname=(ns,"ServerContractorRequestResult"), aname="_ServerContractorRequestResult", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://tempuri.org/","ServerContractorRequestResponse")
            kw["aname"] = "_ServerContractorRequestResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ServerContractorRequestResult = None
                    return
            Holder.__name__ = "ServerContractorRequestResponse_Holder"
            self.pyclass = Holder

    class ServerContractorResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ServerContractorResponse"
        schema = "http://tempuri.org/"
        def __init__(self, **kw):
            ns = ns0.ServerContractorResponse_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"clientId"), aname="_clientId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://tempuri.org/","ArrayOfResultProcessing",lazy=False)(pname=(ns,"stateRecipes"), aname="_stateRecipes", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://tempuri.org/","ServerContractorResponse")
            kw["aname"] = "_ServerContractorResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._clientId = None
                    self._stateRecipes = None
                    return
            Holder.__name__ = "ServerContractorResponse_Holder"
            self.pyclass = Holder

    class ServerContractorResponseResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ServerContractorResponseResponse"
        schema = "http://tempuri.org/"
        def __init__(self, **kw):
            ns = ns0.ServerContractorResponseResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://tempuri.org/","ServerContractorResponseResponse")
            kw["aname"] = "_ServerContractorResponseResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "ServerContractorResponseResponse_Holder"
            self.pyclass = Holder

    class long_Dec(ZSI.TCnumbers.Ilong, ElementDeclaration):
        literal = "long"
        schema = "http://tempuri.org/"
        def __init__(self, **kw):
            kw["pname"] = ("http://tempuri.org/","long")
            kw["aname"] = "_long"
            class IHolder(int): typecode=self
            kw["pyclass"] = IHolder
            IHolder.__name__ = "_long_immutable_holder"
            ZSI.TCnumbers.Ilong.__init__(self, **kw)

    class ArrayOfRemainOutput_Dec(ElementDeclaration):
        literal = "ArrayOfRemainOutput"
        schema = "http://tempuri.org/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://tempuri.org/","ArrayOfRemainOutput")
            kw["aname"] = "_ArrayOfRemainOutput"
            if ns0.ArrayOfRemainOutput_Def not in ns0.ArrayOfRemainOutput_Dec.__bases__:
                bases = list(ns0.ArrayOfRemainOutput_Dec.__bases__)
                bases.insert(0, ns0.ArrayOfRemainOutput_Def)
                ns0.ArrayOfRemainOutput_Dec.__bases__ = tuple(bases)

            ns0.ArrayOfRemainOutput_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "ArrayOfRemainOutput_Dec_Holder"

    class ArrayOfContractor_Dec(ElementDeclaration):
        literal = "ArrayOfContractor"
        schema = "http://tempuri.org/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://tempuri.org/","ArrayOfContractor")
            kw["aname"] = "_ArrayOfContractor"
            if ns0.ArrayOfContractor_Def not in ns0.ArrayOfContractor_Dec.__bases__:
                bases = list(ns0.ArrayOfContractor_Dec.__bases__)
                bases.insert(0, ns0.ArrayOfContractor_Def)
                ns0.ArrayOfContractor_Dec.__bases__ = tuple(bases)

            ns0.ArrayOfContractor_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "ArrayOfContractor_Dec_Holder"

# end class ns0 (tns: http://tempuri.org/)
