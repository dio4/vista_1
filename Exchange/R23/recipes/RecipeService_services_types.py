################################################## 
# RecipeService_services_types.py 
# generated by ZSI.generate.wsdl2python
##################################################


import ZSI
import ZSI.TCcompound
from ZSI.schema import ElementDeclaration, TypeDefinition, GTD

##############################
# targetNamespace
# http://tempuri.org/
##############################

class ns0:
    targetNamespace = "http://tempuri.org/"

    class ArrayOfRecipe_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://tempuri.org/"
        type = (schema, "ArrayOfRecipe")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ArrayOfRecipe_Def.schema
            TClist = [GTD("http://tempuri.org/","Recipe",lazy=False)(pname=(ns,"Recipe"), aname="_Recipe", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Recipe = []
                    return
            Holder.__name__ = "ArrayOfRecipe_Holder"
            self.pyclass = Holder

    class Recipe_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://tempuri.org/"
        type = (schema, "Recipe")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.Recipe_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"Seria"), aname="_Seria", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Number"), aname="_Number", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Fio"), aname="_Fio", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"UnifyId"), aname="_UnifyId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"UnifyName"), aname="_UnifyName", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"UnifyCode"), aname="_UnifyCode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"TradeName"), aname="_TradeName", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"NonproprietaryName"), aname="_NonproprietaryName", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Dosage"), aname="_Dosage", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"CureForm"), aname="_CureForm", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"CureFormId"), aname="_CureFormId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Decimal(pname=(ns,"Quantity"), aname="_Quantity", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Decimal(pname=(ns,"QuantityElements"), aname="_QuantityElements", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"PackageSize"), aname="_PackageSize", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"Denominator"), aname="_Denominator", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Decimal(pname=(ns,"Credit"), aname="_Credit", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"IdLotGlobal"), aname="_IdLotGlobal", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname=(ns,"ExpirationDate"), aname="_ExpirationDate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"AllowRecipeReserveMultiSupplier"), aname="_AllowRecipeReserveMultiSupplier", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"AllowRecipeReserveMultiGoscontract"), aname="_AllowRecipeReserveMultiGoscontract", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Invalid"), aname="_Invalid", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://tempuri.org/","ArrayOfRecipeReserveInfo",lazy=False)(pname=(ns,"RecipeReserveInfos"), aname="_RecipeReserveInfos", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://tempuri.org/","ArrayOfMnnItem",lazy=False)(pname=(ns,"MnnItems"), aname="_MnnItems", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Entity_Def not in ns0.Recipe_Def.__bases__:
                bases = list(ns0.Recipe_Def.__bases__)
                bases.insert(0, ns0.Entity_Def)
                ns0.Recipe_Def.__bases__ = tuple(bases)

            ns0.Entity_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class Entity_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://tempuri.org/"
        type = (schema, "Entity")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.Entity_Def.schema
            TClist = []
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "Entity_Holder"
            self.pyclass = Holder

    class MnnItem_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://tempuri.org/"
        type = (schema, "MnnItem")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.MnnItem_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"Seria"), aname="_Seria", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Number"), aname="_Number", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Id"), aname="_Id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"MnnId"), aname="_MnnId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"MnnName"), aname="_MnnName", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Code"), aname="_Code", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Name"), aname="_Name", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"NameLat"), aname="_NameLat", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Note"), aname="_Note", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Entity_Def not in ns0.MnnItem_Def.__bases__:
                bases = list(ns0.MnnItem_Def.__bases__)
                bases.insert(0, ns0.Entity_Def)
                ns0.MnnItem_Def.__bases__ = tuple(bases)

            ns0.Entity_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class RecipeReserveInfo_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://tempuri.org/"
        type = (schema, "RecipeReserveInfo")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.RecipeReserveInfo_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"Seria"), aname="_Seria", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Number"), aname="_Number", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ProgramId"), aname="_ProgramId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ProgramName"), aname="_ProgramName", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ContractId"), aname="_ContractId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ContractNumber"), aname="_ContractNumber", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ContractName"), aname="_ContractName", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Entity_Def not in ns0.RecipeReserveInfo_Def.__bases__:
                bases = list(ns0.RecipeReserveInfo_Def.__bases__)
                bases.insert(0, ns0.Entity_Def)
                ns0.RecipeReserveInfo_Def.__bases__ = tuple(bases)

            ns0.Entity_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ArrayOfRecipeReserveInfo_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://tempuri.org/"
        type = (schema, "ArrayOfRecipeReserveInfo")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ArrayOfRecipeReserveInfo_Def.schema
            TClist = [GTD("http://tempuri.org/","RecipeReserveInfo",lazy=False)(pname=(ns,"RecipeReserveInfo"), aname="_RecipeReserveInfo", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._RecipeReserveInfo = []
                    return
            Holder.__name__ = "ArrayOfRecipeReserveInfo_Holder"
            self.pyclass = Holder

    class ArrayOfMnnItem_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://tempuri.org/"
        type = (schema, "ArrayOfMnnItem")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ArrayOfMnnItem_Def.schema
            TClist = [GTD("http://tempuri.org/","MnnItem",lazy=False)(pname=(ns,"MnnItem"), aname="_MnnItem", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._MnnItem = []
                    return
            Holder.__name__ = "ArrayOfMnnItem_Holder"
            self.pyclass = Holder

    class ArrayOfRecipeResponseInfo_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://tempuri.org/"
        type = (schema, "ArrayOfRecipeResponseInfo")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ArrayOfRecipeResponseInfo_Def.schema
            TClist = [GTD("http://tempuri.org/","RecipeResponseInfo",lazy=False)(pname=(ns,"RecipeResponseInfo"), aname="_RecipeResponseInfo", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._RecipeResponseInfo = []
                    return
            Holder.__name__ = "ArrayOfRecipeResponseInfo_Holder"
            self.pyclass = Holder

    class RecipeResponseInfo_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://tempuri.org/"
        type = (schema, "RecipeResponseInfo")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.RecipeResponseInfo_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"Id"), aname="_Id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Code"), aname="_Code", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"UnifyId"), aname="_UnifyId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ContractorId"), aname="_ContractorId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"SupplierId"), aname="_SupplierId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"IdGosContract"), aname="_IdGosContract", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"IdGosContractGoods"), aname="_IdGosContractGoods", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"IdChequeItemGlobal"), aname="_IdChequeItemGlobal", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"IdLotGlobal"), aname="_IdLotGlobal", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Decimal(pname=(ns,"RetailPrice"), aname="_RetailPrice", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Decimal(pname=(ns,"Quantity"), aname="_Quantity", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname=(ns,"SaleDate"), aname="_SaleDate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname=(ns,"ChequeDate"), aname="_ChequeDate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"Denominator"), aname="_Denominator", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Note"), aname="_Note", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Id = None
                    self._Code = None
                    self._UnifyId = None
                    self._ContractorId = None
                    self._SupplierId = None
                    self._IdGosContract = None
                    self._IdGosContractGoods = None
                    self._IdChequeItemGlobal = None
                    self._IdLotGlobal = None
                    self._RetailPrice = None
                    self._Quantity = None
                    self._SaleDate = None
                    self._ChequeDate = None
                    self._Denominator = None
                    self._Note = None
                    return
            Holder.__name__ = "RecipeResponseInfo_Holder"
            self.pyclass = Holder

    class RecipeClient_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://tempuri.org/"
        type = (schema, "RecipeClient")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.RecipeClient_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"Seria"), aname="_Seria", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Number"), aname="_Number", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Snils"), aname="_Snils", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"PatientFound"), aname="_PatientFound", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"LpuOgrn"), aname="_LpuOgrn", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"LpuFoms"), aname="_LpuFoms", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"LpuFound"), aname="_LpuFound", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"DoctorCode"), aname="_DoctorCode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"DoctorFound"), aname="_DoctorFound", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"MkbCode"), aname="_MkbCode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"MkbFound"), aname="_MkbFound", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"FundingSourceCode"), aname="_FundingSourceCode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"FundingSourceFound"), aname="_FundingSourceFound", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"NosologyCode"), aname="_NosologyCode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"NosologyFound"), aname="_NosologyFound", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"PrivilegeCode"), aname="_PrivilegeCode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"ProgramFound"), aname="_ProgramFound", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ValidPeriodCode"), aname="_ValidPeriodCode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"ValidPeriodFound"), aname="_ValidPeriodFound", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"PayPercent"), aname="_PayPercent", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"PayPercentFound"), aname="_PayPercentFound", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"IsTrn"), aname="_IsTrn", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"TrnCode"), aname="_TrnCode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"TrnFound"), aname="_TrnFound", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"MnnCode"), aname="_MnnCode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"MnnFound"), aname="_MnnFound", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"CureformCode"), aname="_CureformCode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"CureformFound"), aname="_CureformFound", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"UnitCode"), aname="_UnitCode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"UnitFound"), aname="_UnitFound", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"IsVk"), aname="_IsVk", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Dosage"), aname="_Dosage", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Decimal(pname=(ns,"Quantity"), aname="_Quantity", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname=(ns,"SaleDate"), aname="_SaleDate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname=(ns,"IssueDate"), aname="_IssueDate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname=(ns,"ExpirationDate"), aname="_ExpirationDate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"RecipeCheck"), aname="_RecipeCheck", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"Uploaded"), aname="_Uploaded", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"IsAnnulled"), aname="_IsAnnulled", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"CauseOfAnnulment"), aname="_CauseOfAnnulment", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"CauseOfAnnulmentFound"), aname="_CauseOfAnnulmentFound", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Entity_Def not in ns0.RecipeClient_Def.__bases__:
                bases = list(ns0.RecipeClient_Def.__bases__)
                bases.insert(0, ns0.Entity_Def)
                ns0.RecipeClient_Def.__bases__ = tuple(bases)

            ns0.Entity_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ArrayOfRecipeClient_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://tempuri.org/"
        type = (schema, "ArrayOfRecipeClient")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ArrayOfRecipeClient_Def.schema
            TClist = [GTD("http://tempuri.org/","RecipeClient",lazy=False)(pname=(ns,"RecipeClient"), aname="_RecipeClient", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._RecipeClient = []
                    return
            Holder.__name__ = "ArrayOfRecipeClient_Holder"
            self.pyclass = Holder

    class ArrayOfRecipeReestr_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://tempuri.org/"
        type = (schema, "ArrayOfRecipeReestr")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ArrayOfRecipeReestr_Def.schema
            TClist = [GTD("http://tempuri.org/","RecipeReestr",lazy=False)(pname=(ns,"RecipeReestr"), aname="_RecipeReestr", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._RecipeReestr = []
                    return
            Holder.__name__ = "ArrayOfRecipeReestr_Holder"
            self.pyclass = Holder

    class RecipeReestr_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://tempuri.org/"
        type = (schema, "RecipeReestr")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.RecipeReestr_Def.schema
            TClist = [GTD("http://microsoft.com/wsdl/types/","guid",lazy=False)(pname=(ns,"ReestrGuid"), aname="_ReestrGuid", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://microsoft.com/wsdl/types/","guid",lazy=False)(pname=(ns,"ReestrItemGuid"), aname="_ReestrItemGuid", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://microsoft.com/wsdl/types/","guid",lazy=False)(pname=(ns,"ReestrItemDetailGuid"), aname="_ReestrItemDetailGuid", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://microsoft.com/wsdl/types/","guid",lazy=False)(pname=(ns,"IdChequeItemGlobal"), aname="_IdChequeItemGlobal", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname=(ns,"ReestrDate"), aname="_ReestrDate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ReestrNumber"), aname="_ReestrNumber", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ReestrState"), aname="_ReestrState", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ReestrItemDetailState"), aname="_ReestrItemDetailState", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname=(ns,"Deleted"), aname="_Deleted", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Entity_Def not in ns0.RecipeReestr_Def.__bases__:
                bases = list(ns0.RecipeReestr_Def.__bases__)
                bases.insert(0, ns0.Entity_Def)
                ns0.RecipeReestr_Def.__bases__ = tuple(bases)

            ns0.Entity_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class RecipeRequest_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "RecipeRequest"
        schema = "http://tempuri.org/"
        def __init__(self, **kw):
            ns = ns0.RecipeRequest_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"clientId"), aname="_clientId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://tempuri.org/","RecipeRequest")
            kw["aname"] = "_RecipeRequest"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._clientId = None
                    return
            Holder.__name__ = "RecipeRequest_Holder"
            self.pyclass = Holder

    class RecipeRequestResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "RecipeRequestResponse"
        schema = "http://tempuri.org/"
        def __init__(self, **kw):
            ns = ns0.RecipeRequestResponse_Dec.schema
            TClist = [GTD("http://tempuri.org/","ArrayOfRecipe",lazy=False)(pname=(ns,"RecipeRequestResult"), aname="_RecipeRequestResult", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://tempuri.org/","RecipeRequestResponse")
            kw["aname"] = "_RecipeRequestResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._RecipeRequestResult = None
                    return
            Holder.__name__ = "RecipeRequestResponse_Holder"
            self.pyclass = Holder

    class RecipeRequestRepeat_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "RecipeRequestRepeat"
        schema = "http://tempuri.org/"
        def __init__(self, **kw):
            ns = ns0.RecipeRequestRepeat_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"clientId"), aname="_clientId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://tempuri.org/","RecipeRequestRepeat")
            kw["aname"] = "_RecipeRequestRepeat"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._clientId = None
                    return
            Holder.__name__ = "RecipeRequestRepeat_Holder"
            self.pyclass = Holder

    class RecipeRequestRepeatResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "RecipeRequestRepeatResponse"
        schema = "http://tempuri.org/"
        def __init__(self, **kw):
            ns = ns0.RecipeRequestRepeatResponse_Dec.schema
            TClist = [GTD("http://tempuri.org/","ArrayOfRecipe",lazy=False)(pname=(ns,"RecipeRequestRepeatResult"), aname="_RecipeRequestRepeatResult", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://tempuri.org/","RecipeRequestRepeatResponse")
            kw["aname"] = "_RecipeRequestRepeatResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._RecipeRequestRepeatResult = None
                    return
            Holder.__name__ = "RecipeRequestRepeatResponse_Holder"
            self.pyclass = Holder

    class RecipeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "RecipeResponse"
        schema = "http://tempuri.org/"
        def __init__(self, **kw):
            ns = ns0.RecipeResponse_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"clientId"), aname="_clientId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://tempuri.org/","ArrayOfRecipeResponseInfo",lazy=False)(pname=(ns,"recipes"), aname="_recipes", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://tempuri.org/","RecipeResponse")
            kw["aname"] = "_RecipeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._clientId = None
                    self._recipes = None
                    return
            Holder.__name__ = "RecipeResponse_Holder"
            self.pyclass = Holder

    class RecipeResponseResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "RecipeResponseResponse"
        schema = "http://tempuri.org/"
        def __init__(self, **kw):
            ns = ns0.RecipeResponseResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://tempuri.org/","RecipeResponseResponse")
            kw["aname"] = "_RecipeResponseResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "RecipeResponseResponse_Holder"
            self.pyclass = Holder

    class RecipeFind_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "RecipeFind"
        schema = "http://tempuri.org/"
        def __init__(self, **kw):
            ns = ns0.RecipeFind_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"clientId"), aname="_clientId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"seria"), aname="_seria", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"number"), aname="_number", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname=(ns,"saleDate"), aname="_saleDate", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://tempuri.org/","RecipeFind")
            kw["aname"] = "_RecipeFind"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._clientId = None
                    self._seria = None
                    self._number = None
                    self._saleDate = None
                    return
            Holder.__name__ = "RecipeFind_Holder"
            self.pyclass = Holder

    class RecipeFindResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "RecipeFindResponse"
        schema = "http://tempuri.org/"
        def __init__(self, **kw):
            ns = ns0.RecipeFindResponse_Dec.schema
            TClist = [GTD("http://tempuri.org/","Recipe",lazy=False)(pname=(ns,"RecipeFindResult"), aname="_RecipeFindResult", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://tempuri.org/","RecipeFindResponse")
            kw["aname"] = "_RecipeFindResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._RecipeFindResult = None
                    return
            Holder.__name__ = "RecipeFindResponse_Holder"
            self.pyclass = Holder

    class RecipeCheck_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "RecipeCheck"
        schema = "http://tempuri.org/"
        def __init__(self, **kw):
            ns = ns0.RecipeCheck_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"clientId"), aname="_clientId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://tempuri.org/","RecipeResponseInfo",lazy=False)(pname=(ns,"recipeInfo"), aname="_recipeInfo", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://tempuri.org/","RecipeCheck")
            kw["aname"] = "_RecipeCheck"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._clientId = None
                    self._recipeInfo = None
                    return
            Holder.__name__ = "RecipeCheck_Holder"
            self.pyclass = Holder

    class RecipeCheckResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "RecipeCheckResponse"
        schema = "http://tempuri.org/"
        def __init__(self, **kw):
            ns = ns0.RecipeCheckResponse_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"RecipeCheckResult"), aname="_RecipeCheckResult", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://tempuri.org/","RecipeCheckResponse")
            kw["aname"] = "_RecipeCheckResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._RecipeCheckResult = None
                    return
            Holder.__name__ = "RecipeCheckResponse_Holder"
            self.pyclass = Holder

    class RecipeEditCheck_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "RecipeEditCheck"
        schema = "http://tempuri.org/"
        def __init__(self, **kw):
            ns = ns0.RecipeEditCheck_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"clientId"), aname="_clientId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://tempuri.org/","RecipeResponseInfo",lazy=False)(pname=(ns,"recipeInfo"), aname="_recipeInfo", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://tempuri.org/","RecipeEditCheck")
            kw["aname"] = "_RecipeEditCheck"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._clientId = None
                    self._recipeInfo = None
                    return
            Holder.__name__ = "RecipeEditCheck_Holder"
            self.pyclass = Holder

    class RecipeEditCheckResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "RecipeEditCheckResponse"
        schema = "http://tempuri.org/"
        def __init__(self, **kw):
            ns = ns0.RecipeEditCheckResponse_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"RecipeEditCheckResult"), aname="_RecipeEditCheckResult", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://tempuri.org/","RecipeEditCheckResponse")
            kw["aname"] = "_RecipeEditCheckResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._RecipeEditCheckResult = None
                    return
            Holder.__name__ = "RecipeEditCheckResponse_Holder"
            self.pyclass = Holder

    class RecipeDelay_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "RecipeDelay"
        schema = "http://tempuri.org/"
        def __init__(self, **kw):
            ns = ns0.RecipeDelay_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"clientId"), aname="_clientId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"seria"), aname="_seria", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"number"), aname="_number", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname=(ns,"incomeDate"), aname="_incomeDate", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://tempuri.org/","RecipeDelay")
            kw["aname"] = "_RecipeDelay"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._clientId = None
                    self._seria = None
                    self._number = None
                    self._incomeDate = None
                    return
            Holder.__name__ = "RecipeDelay_Holder"
            self.pyclass = Holder

    class RecipeDelayResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "RecipeDelayResponse"
        schema = "http://tempuri.org/"
        def __init__(self, **kw):
            ns = ns0.RecipeDelayResponse_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"RecipeDelayResult"), aname="_RecipeDelayResult", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://tempuri.org/","RecipeDelayResponse")
            kw["aname"] = "_RecipeDelayResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._RecipeDelayResult = None
                    return
            Holder.__name__ = "RecipeDelayResponse_Holder"
            self.pyclass = Holder

    class RecipeClientSave_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "RecipeClientSave"
        schema = "http://tempuri.org/"
        def __init__(self, **kw):
            ns = ns0.RecipeClientSave_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"clientId"), aname="_clientId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://tempuri.org/","RecipeClient",lazy=False)(pname=(ns,"recipe"), aname="_recipe", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://tempuri.org/","RecipeClientSave")
            kw["aname"] = "_RecipeClientSave"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._clientId = None
                    self._recipe = None
                    return
            Holder.__name__ = "RecipeClientSave_Holder"
            self.pyclass = Holder

    class RecipeClientSaveResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "RecipeClientSaveResponse"
        schema = "http://tempuri.org/"
        def __init__(self, **kw):
            ns = ns0.RecipeClientSaveResponse_Dec.schema
            TClist = [GTD("http://tempuri.org/","RecipeClient",lazy=False)(pname=(ns,"RecipeClientSaveResult"), aname="_RecipeClientSaveResult", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://tempuri.org/","RecipeClientSaveResponse")
            kw["aname"] = "_RecipeClientSaveResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._RecipeClientSaveResult = None
                    return
            Holder.__name__ = "RecipeClientSaveResponse_Holder"
            self.pyclass = Holder

    class RecipesClientSave_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "RecipesClientSave"
        schema = "http://tempuri.org/"
        def __init__(self, **kw):
            ns = ns0.RecipesClientSave_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"clientId"), aname="_clientId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://tempuri.org/","ArrayOfRecipeClient",lazy=False)(pname=(ns,"recipes"), aname="_recipes", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://tempuri.org/","RecipesClientSave")
            kw["aname"] = "_RecipesClientSave"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._clientId = None
                    self._recipes = None
                    return
            Holder.__name__ = "RecipesClientSave_Holder"
            self.pyclass = Holder

    class RecipesClientSaveResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "RecipesClientSaveResponse"
        schema = "http://tempuri.org/"
        def __init__(self, **kw):
            ns = ns0.RecipesClientSaveResponse_Dec.schema
            TClist = [GTD("http://tempuri.org/","ArrayOfRecipeClient",lazy=False)(pname=(ns,"RecipesClientSaveResult"), aname="_RecipesClientSaveResult", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://tempuri.org/","RecipesClientSaveResponse")
            kw["aname"] = "_RecipesClientSaveResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._RecipesClientSaveResult = None
                    return
            Holder.__name__ = "RecipesClientSaveResponse_Holder"
            self.pyclass = Holder

    class RecipeReestrRequest_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "RecipeReestrRequest"
        schema = "http://tempuri.org/"
        def __init__(self, **kw):
            ns = ns0.RecipeReestrRequest_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"clientId"), aname="_clientId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://tempuri.org/","RecipeReestrRequest")
            kw["aname"] = "_RecipeReestrRequest"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._clientId = None
                    return
            Holder.__name__ = "RecipeReestrRequest_Holder"
            self.pyclass = Holder

    class RecipeReestrRequestResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "RecipeReestrRequestResponse"
        schema = "http://tempuri.org/"
        def __init__(self, **kw):
            ns = ns0.RecipeReestrRequestResponse_Dec.schema
            TClist = [GTD("http://tempuri.org/","ArrayOfRecipeReestr",lazy=False)(pname=(ns,"RecipeReestrRequestResult"), aname="_RecipeReestrRequestResult", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://tempuri.org/","RecipeReestrRequestResponse")
            kw["aname"] = "_RecipeReestrRequestResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._RecipeReestrRequestResult = None
                    return
            Holder.__name__ = "RecipeReestrRequestResponse_Holder"
            self.pyclass = Holder

    class ArrayOfRecipe_Dec(ElementDeclaration):
        literal = "ArrayOfRecipe"
        schema = "http://tempuri.org/"
        def __init__(self, **kw):
            kw["pname"] = ("http://tempuri.org/","ArrayOfRecipe")
            kw["aname"] = "_ArrayOfRecipe"
            if ns0.ArrayOfRecipe_Def not in ns0.ArrayOfRecipe_Dec.__bases__:
                bases = list(ns0.ArrayOfRecipe_Dec.__bases__)
                bases.insert(0, ns0.ArrayOfRecipe_Def)
                ns0.ArrayOfRecipe_Dec.__bases__ = tuple(bases)

            ns0.ArrayOfRecipe_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "ArrayOfRecipe_Dec_Holder"

    class Recipe_Dec(ElementDeclaration):
        literal = "Recipe"
        schema = "http://tempuri.org/"
        def __init__(self, **kw):
            kw["pname"] = ("http://tempuri.org/","Recipe")
            kw["aname"] = "_Recipe"
            if ns0.Recipe_Def not in ns0.Recipe_Dec.__bases__:
                bases = list(ns0.Recipe_Dec.__bases__)
                bases.insert(0, ns0.Recipe_Def)
                ns0.Recipe_Dec.__bases__ = tuple(bases)

            ns0.Recipe_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "Recipe_Dec_Holder"

    class string_Dec(ZSI.TC.String, ElementDeclaration):
        literal = "string"
        schema = "http://tempuri.org/"
        def __init__(self, **kw):
            kw["pname"] = ("http://tempuri.org/","string")
            kw["aname"] = "_string"
            class IHolder(str): typecode=self
            kw["pyclass"] = IHolder
            IHolder.__name__ = "_string_immutable_holder"
            ZSI.TC.String.__init__(self, **kw)

    class ArrayOfRecipeReestr_Dec(ElementDeclaration):
        literal = "ArrayOfRecipeReestr"
        schema = "http://tempuri.org/"
        def __init__(self, **kw):
            kw["pname"] = ("http://tempuri.org/","ArrayOfRecipeReestr")
            kw["aname"] = "_ArrayOfRecipeReestr"
            if ns0.ArrayOfRecipeReestr_Def not in ns0.ArrayOfRecipeReestr_Dec.__bases__:
                bases = list(ns0.ArrayOfRecipeReestr_Dec.__bases__)
                bases.insert(0, ns0.ArrayOfRecipeReestr_Def)
                ns0.ArrayOfRecipeReestr_Dec.__bases__ = tuple(bases)

            ns0.ArrayOfRecipeReestr_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "ArrayOfRecipeReestr_Dec_Holder"

# end class ns0 (tns: http://tempuri.org/)

##############################
# targetNamespace
# http://microsoft.com/wsdl/types/
##############################

class ns1:
    targetNamespace = "http://microsoft.com/wsdl/types/"

    class guid_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://microsoft.com/wsdl/types/"
        type = (schema, "guid")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

# end class ns1 (tns: http://microsoft.com/wsdl/types/)
