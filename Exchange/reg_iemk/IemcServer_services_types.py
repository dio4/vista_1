################################################## 
# IemcServer_services_types.py 
# generated by ZSI.generate.wsdl2python
##################################################


import ZSI
import ZSI.TCcompound
from ZSI.schema import ElementDeclaration, TypeDefinition, GTD
from ZSI.generate.pyclass import pyclass_type

##############################
# targetNamespace
# urn:ZSI
##############################

class ns0:
    targetNamespace = "urn:ZSI"

    class ClientListType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:ZSI"
        type = (schema, "ClientListType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ClientListType_Def.schema
            TClist = [GTD("urn:ZSI","ClientType",lazy=False)(pname=(ns,"Client"), aname="_Client", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Client = []
                    return
            Holder.__name__ = "ClientListType_Holder"
            self.pyclass = Holder

    class ClientType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:ZSI"
        type = (schema, "ClientType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ClientType_Def.schema
            TClist = [ZSI.TCnumbers.Iinteger(pname=(ns,"ClientId"), aname="_ClientId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"modifyDatetime"), aname="_modifyDatetime", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"lastName"), aname="_lastName", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"firstName"), aname="_firstName", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"patrName"), aname="_patrName", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iinteger(pname=(ns,"sex"), aname="_sex", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"birthDate"), aname="_birthDate", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"birthPlace"), aname="_birthPlace", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"SNILS"), aname="_SNILS", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:ZSI","DocumentType",lazy=False)(pname=(ns,"document"), aname="_document", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:ZSI","PolicyType",lazy=False)(pname=(ns,"policy"), aname="_policy", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"RegAddress"), aname="_RegAddress", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"LocAddress"), aname="_LocAddress", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:ZSI","EventType",lazy=False)(pname=(ns,"Event"), aname="_Event", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ClientId = None
                    self._modifyDatetime = None
                    self._lastName = None
                    self._firstName = None
                    self._patrName = None
                    self._sex = None
                    self._birthDate = None
                    self._birthPlace = None
                    self._SNILS = None
                    self._document = None
                    self._policy = None
                    self._RegAddress = None
                    self._LocAddress = None
                    self._Event = []
                    return
            Holder.__name__ = "ClientType_Holder"
            self.pyclass = Holder

    class DocumentType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:ZSI"
        type = (schema, "DocumentType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.DocumentType_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"documentTypeCode"), aname="_documentTypeCode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"serial"), aname="_serial", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"number"), aname="_number", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"date"), aname="_date", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"origin"), aname="_origin", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._documentTypeCode = None
                    self._serial = None
                    self._number = None
                    self._date = None
                    self._origin = None
                    return
            Holder.__name__ = "DocumentType_Holder"
            self.pyclass = Holder

    class PolicyType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:ZSI"
        type = (schema, "PolicyType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.PolicyType_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"policyTypeCode"), aname="_policyTypeCode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"policyKindCode"), aname="_policyKindCode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"serial"), aname="_serial", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"number"), aname="_number", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"begDate"), aname="_begDate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"endDate"), aname="_endDate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"name"), aname="_name", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"insurerCode"), aname="_insurerCode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._policyTypeCode = None
                    self._policyKindCode = None
                    self._serial = None
                    self._number = None
                    self._begDate = None
                    self._endDate = None
                    self._name = None
                    self._insurerCode = None
                    return
            Holder.__name__ = "PolicyType_Holder"
            self.pyclass = Holder

    class EventType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:ZSI"
        type = (schema, "EventType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.EventType_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"modifyDatetime"), aname="_modifyDatetime", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"setDate"), aname="_setDate", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"execDate"), aname="_execDate", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"eventTypeCode"), aname="_eventTypeCode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"execPersonCode"), aname="_execPersonCode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iinteger(pname=(ns,"externalId"), aname="_externalId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iinteger(pname=(ns,"isPrimary"), aname="_isPrimary", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iinteger(pname=(ns,"order"), aname="_order", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"orgCode"), aname="_orgCode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"resultCode"), aname="_resultCode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"MESCode"), aname="_MESCode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:ZSI","DiagnosisType",lazy=False)(pname=(ns,"Diagnosis"), aname="_Diagnosis", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:ZSI","VisitType",lazy=False)(pname=(ns,"Visit"), aname="_Visit", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:ZSI","ActionType",lazy=False)(pname=(ns,"Action"), aname="_Action", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._modifyDatetime = None
                    self._setDate = None
                    self._execDate = None
                    self._eventTypeCode = None
                    self._execPersonCode = None
                    self._externalId = None
                    self._isPrimary = None
                    self._order = None
                    self._orgCode = None
                    self._resultCode = None
                    self._MESCode = None
                    self._Diagnosis = []
                    self._Visit = []
                    self._Action = []
                    return
            Holder.__name__ = "EventType_Holder"
            self.pyclass = Holder

    class DiagnosisType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:ZSI"
        type = (schema, "DiagnosisType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.DiagnosisType_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"diagnosticTypeCode"), aname="_diagnosticTypeCode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"diagnosticCharacterCode"), aname="_diagnosticCharacterCode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"diagnosticStageCode"), aname="_diagnosticStageCode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"diagnosticPhaseCode"), aname="_diagnosticPhaseCode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"diagnosticSetDate"), aname="_diagnosticSetDate", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"diagnosticEndDate"), aname="_diagnosticEndDate", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"diagnosticPersonCode"), aname="_diagnosticPersonCode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"diagnosticResultCode"), aname="_diagnosticResultCode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"MKB"), aname="_MKB", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._diagnosticTypeCode = None
                    self._diagnosticCharacterCode = None
                    self._diagnosticStageCode = None
                    self._diagnosticPhaseCode = None
                    self._diagnosticSetDate = None
                    self._diagnosticEndDate = None
                    self._diagnosticPersonCode = None
                    self._diagnosticResultCode = None
                    self._MKB = None
                    return
            Holder.__name__ = "DiagnosisType_Holder"
            self.pyclass = Holder

    class VisitType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:ZSI"
        type = (schema, "VisitType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.VisitType_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"sceneCode"), aname="_sceneCode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"visitTypeCode"), aname="_visitTypeCode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"personCode"), aname="_personCode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iinteger(pname=(ns,"isPrimary"), aname="_isPrimary", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"date"), aname="_date", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"serviceCode"), aname="_serviceCode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"financeCode"), aname="_financeCode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._sceneCode = None
                    self._visitTypeCode = None
                    self._personCode = None
                    self._isPrimary = None
                    self._date = None
                    self._serviceCode = None
                    self._financeCode = None
                    return
            Holder.__name__ = "VisitType_Holder"
            self.pyclass = Holder

    class ActionType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:ZSI"
        type = (schema, "ActionType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ActionType_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"actionTypeCode"), aname="_actionTypeCode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iinteger(pname=(ns,"status"), aname="_status", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"begDate"), aname="_begDate", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"endDate"), aname="_endDate", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"personCode"), aname="_personCode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Decimal(pname=(ns,"amount"), aname="_amount", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Decimal(pname=(ns,"uet"), aname="_uet", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"MKB"), aname="_MKB", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"orgCode"), aname="_orgCode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iinteger(pname=(ns,"duration"), aname="_duration", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:ZSI","ActionPropertyType",lazy=False)(pname=(ns,"ActionProperty"), aname="_ActionProperty", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._actionTypeCode = None
                    self._status = None
                    self._begDate = None
                    self._endDate = None
                    self._personCode = None
                    self._amount = None
                    self._uet = None
                    self._MKB = None
                    self._orgCode = None
                    self._duration = None
                    self._ActionProperty = []
                    return
            Holder.__name__ = "ActionType_Holder"
            self.pyclass = Holder

    class ActionPropertyType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:ZSI"
        type = (schema, "ActionPropertyType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ActionPropertyType_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"actionPropertyType"), aname="_actionPropertyType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"actionPropertyValue"), aname="_actionPropertyValue", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._actionPropertyType = None
                    self._actionPropertyValue = None
                    return
            Holder.__name__ = "ActionPropertyType_Holder"
            self.pyclass = Holder

    class ErrorType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:ZSI"
        type = (schema, "ErrorType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ErrorType_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"type"), aname="_type", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"remoteId"), aname="_remoteId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"description"), aname="_description", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._type = None
                    self._remoteId = None
                    self._description = None
                    return
            Holder.__name__ = "ErrorType_Holder"
            self.pyclass = Holder

    class iemc_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "iemc"
        schema = "urn:ZSI"
        def __init__(self, **kw):
            ns = ns0.iemc_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"Org"), aname="_Org", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:ZSI","ClientListType",lazy=False)(pname=(ns,"Clients"), aname="_Clients", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("urn:ZSI","iemc")
            kw["aname"] = "_iemc"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Org = None
                    self._Clients = None
                    return
            Holder.__name__ = "iemc_Holder"
            self.pyclass = Holder

    class Errors_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "Errors"
        schema = "urn:ZSI"
        def __init__(self, **kw):
            ns = ns0.Errors_Dec.schema
            TClist = [GTD("urn:ZSI","ErrorType",lazy=False)(pname=(ns,"Error"), aname="_Error", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("urn:ZSI","Errors")
            kw["aname"] = "_Errors"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Error = []
                    return
            Holder.__name__ = "Errors_Holder"
            self.pyclass = Holder

# end class ns0 (tns: urn:ZSI)
