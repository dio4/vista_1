##################################################
# file: IConvertservice_server.py
#
# skeleton generated by "ZSI.generate.wsdl2dispatch.ServiceModuleWriter"
#      /usr/bin/wsdl2py -b IConvert.wsdl
#
##################################################

from ZSI.TCcompound import Struct
from IConvertservice_types import *
from ZSI.ServiceContainer import ServiceSOAPBinding

# Messages  
_GiveNewOrders0RequestTypecode = Struct(pname=("urn:unAcrossIntf-IConvert","GiveNewOrders"), ofwhat=[ZSI.TC.String(pname="Value", aname="_Value", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=None, encoded="urn:unAcrossIntf-IConvert")
class GiveNewOrders0Request:
    typecode = _GiveNewOrders0RequestTypecode
    __metaclass__ = pyclass_type
    def __init__(self, **kw):
        """Keyword parameters:
        Value -- part Value
        """
        self._Value =  kw.get("Value")
GiveNewOrders0Request.typecode.pyclass = GiveNewOrders0Request

_GiveNewOrders0ResponseTypecode = Struct(pname=("urn:unAcrossIntf-IConvert","GiveNewOrdersResponse"), ofwhat=[ZSI.TCnumbers.Iint(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=None, encoded="urn:unAcrossIntf-IConvert")
class GiveNewOrders0Response:
    typecode = _GiveNewOrders0ResponseTypecode
    __metaclass__ = pyclass_type
    def __init__(self, **kw):
        """Keyword parameters:
        return -- part return
        """
        self._return =  kw.get("return")
GiveNewOrders0Response.typecode.pyclass = GiveNewOrders0Response

_SendTableTest1RequestTypecode = Struct(pname=("urn:unAcrossIntf-IConvert","SendTableTest"), ofwhat=[], pyclass=None, encoded="urn:unAcrossIntf-IConvert")
class SendTableTest1Request:
    typecode = _SendTableTest1RequestTypecode
    __metaclass__ = pyclass_type
    def __init__(self, **kw):
        """Keyword parameters:
        """
SendTableTest1Request.typecode.pyclass = SendTableTest1Request

_SendTableTest1ResponseTypecode = Struct(pname=("urn:unAcrossIntf-IConvert","SendTableTestResponse"), ofwhat=[ZSI.TC.String(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=None, encoded="urn:unAcrossIntf-IConvert")
class SendTableTest1Response:
    typecode = _SendTableTest1ResponseTypecode
    __metaclass__ = pyclass_type
    def __init__(self, **kw):
        """Keyword parameters:
        return -- part return
        """
        self._return =  kw.get("return")
SendTableTest1Response.typecode.pyclass = SendTableTest1Response

_SendTableSpecimen2RequestTypecode = Struct(pname=("urn:unAcrossIntf-IConvert","SendTableSpecimen"), ofwhat=[], pyclass=None, encoded="urn:unAcrossIntf-IConvert")
class SendTableSpecimen2Request:
    typecode = _SendTableSpecimen2RequestTypecode
    __metaclass__ = pyclass_type
    def __init__(self, **kw):
        """Keyword parameters:
        """
SendTableSpecimen2Request.typecode.pyclass = SendTableSpecimen2Request

_SendTableSpecimen2ResponseTypecode = Struct(pname=("urn:unAcrossIntf-IConvert","SendTableSpecimenResponse"), ofwhat=[ZSI.TC.String(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=None, encoded="urn:unAcrossIntf-IConvert")
class SendTableSpecimen2Response:
    typecode = _SendTableSpecimen2ResponseTypecode
    __metaclass__ = pyclass_type
    def __init__(self, **kw):
        """Keyword parameters:
        return -- part return
        """
        self._return =  kw.get("return")
SendTableSpecimen2Response.typecode.pyclass = SendTableSpecimen2Response

_UpdateDoctors3RequestTypecode = Struct(pname=("urn:unAcrossIntf-IConvert","UpdateDoctors"), ofwhat=[ZSI.TC.String(pname="Value", aname="_Value", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=None, encoded="urn:unAcrossIntf-IConvert")
class UpdateDoctors3Request:
    typecode = _UpdateDoctors3RequestTypecode
    __metaclass__ = pyclass_type
    def __init__(self, **kw):
        """Keyword parameters:
        Value -- part Value
        """
        self._Value =  kw.get("Value")
UpdateDoctors3Request.typecode.pyclass = UpdateDoctors3Request

_UpdateDoctors3ResponseTypecode = Struct(pname=("urn:unAcrossIntf-IConvert","UpdateDoctorsResponse"), ofwhat=[ZSI.TCnumbers.Iint(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=None, encoded="urn:unAcrossIntf-IConvert")
class UpdateDoctors3Response:
    typecode = _UpdateDoctors3ResponseTypecode
    __metaclass__ = pyclass_type
    def __init__(self, **kw):
        """Keyword parameters:
        return -- part return
        """
        self._return =  kw.get("return")
UpdateDoctors3Response.typecode.pyclass = UpdateDoctors3Response


# Service Skeletons
class IConvertservice(ServiceSOAPBinding):
    soapAction = {}
    root = {}

    def __init__(self, post='/cgi-bin/serviceserv.exe/soap/IConvert', **kw):
        ServiceSOAPBinding.__init__(self, post)

    def soap_GiveNewOrders(self, ps, **kw):
        request = ps.Parse(GiveNewOrders0Request.typecode)
        return request,GiveNewOrders0Response()

    soapAction['urn:unAcrossIntf-IConvert#GiveNewOrders'] = 'soap_GiveNewOrders'
    root[(GiveNewOrders0Request.typecode.nspname,GiveNewOrders0Request.typecode.pname)] = 'soap_GiveNewOrders'

    def soap_SendTableTest(self, ps, **kw):
        request = ps.Parse(SendTableTest1Request.typecode)
        return request,SendTableTest1Response()

    soapAction['urn:unAcrossIntf-IConvert#SendTableTest'] = 'soap_SendTableTest'
    root[(SendTableTest1Request.typecode.nspname,SendTableTest1Request.typecode.pname)] = 'soap_SendTableTest'

    def soap_SendTableSpecimen(self, ps, **kw):
        request = ps.Parse(SendTableSpecimen2Request.typecode)
        return request,SendTableSpecimen2Response()

    soapAction['urn:unAcrossIntf-IConvert#SendTableSpecimen'] = 'soap_SendTableSpecimen'
    root[(SendTableSpecimen2Request.typecode.nspname,SendTableSpecimen2Request.typecode.pname)] = 'soap_SendTableSpecimen'

    def soap_UpdateDoctors(self, ps, **kw):
        request = ps.Parse(UpdateDoctors3Request.typecode)
        return request,UpdateDoctors3Response()

    soapAction['urn:unAcrossIntf-IConvert#UpdateDoctors'] = 'soap_UpdateDoctors'
    root[(UpdateDoctors3Request.typecode.nspname,UpdateDoctors3Request.typecode.pname)] = 'soap_UpdateDoctors'

