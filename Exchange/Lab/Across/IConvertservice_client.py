##################################################
# file: IConvertservice_client.py
# 
# client stubs generated by "ZSI.generate.wsdl2python.WriteServiceModule"
#     /usr/bin/wsdl2py -b IConvert.wsdl
# 
##################################################


from ZSI.TCcompound import ComplexType, Struct
from ZSI import client
import ZSI
from ZSI.generate.pyclass import pyclass_type

# Locator
class IConvertserviceLocator:
    IConvertPort_address = "http://localhost/cgi-bin/serviceserv.exe/soap/IConvert"
    def getIConvertPortAddress(self):
        return IConvertserviceLocator.IConvertPort_address
    def getIConvertPort(self, url=None, **kw):
        return IConvertbindingSOAP(url or IConvertserviceLocator.IConvertPort_address, **kw)

# Methods
class IConvertbindingSOAP:
    def __init__(self, url, **kw):
        kw.setdefault("readerclass", None)
        kw.setdefault("writerclass", None)
        # no resource properties
        self.binding = client.Binding(url=url, **kw)
        # no ws-addressing

    # op: GiveNewOrders
    def GiveNewOrders(self, request, **kw):
        if isinstance(request, GiveNewOrders0Request) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:unAcrossIntf-IConvert#GiveNewOrders", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=GiveNewOrders0Response.typecode.ofwhat, pyclass=GiveNewOrders0Response.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: SendTableTest
    def SendTableTest(self, request, **kw):
        if isinstance(request, SendTableTest1Request) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:unAcrossIntf-IConvert#SendTableTest", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=SendTableTest1Response.typecode.ofwhat, pyclass=SendTableTest1Response.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: SendTableSpecimen
    def SendTableSpecimen(self, request, **kw):
        if isinstance(request, SendTableSpecimen2Request) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:unAcrossIntf-IConvert#SendTableSpecimen", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=SendTableSpecimen2Response.typecode.ofwhat, pyclass=SendTableSpecimen2Response.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: UpdateDoctors
    def UpdateDoctors(self, request, **kw):
        if isinstance(request, UpdateDoctors3Request) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:unAcrossIntf-IConvert#UpdateDoctors", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=UpdateDoctors3Response.typecode.ofwhat, pyclass=UpdateDoctors3Response.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

_GiveNewOrders0RequestTypecode = Struct(pname=("urn:unAcrossIntf-IConvert","GiveNewOrders"), ofwhat=[ZSI.TC.String(pname="Value", aname="_Value", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=None, encoded="urn:unAcrossIntf-IConvert")
class GiveNewOrders0Request:
    typecode = _GiveNewOrders0RequestTypecode
    __metaclass__ = pyclass_type
    def __init__(self, **kw):
        """Keyword parameters:
        Value -- part Value
        """
        self._Value =  kw.get("Value")
GiveNewOrders0Request.typecode.pyclass = GiveNewOrders0Request

_GiveNewOrders0ResponseTypecode = Struct(pname=("urn:unAcrossIntf-IConvert","GiveNewOrdersResponse"), ofwhat=[ZSI.TCnumbers.Iint(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=None, encoded="urn:unAcrossIntf-IConvert")
class GiveNewOrders0Response:
    typecode = _GiveNewOrders0ResponseTypecode
    __metaclass__ = pyclass_type
    def __init__(self, **kw):
        """Keyword parameters:
        return -- part return
        """
        self._return =  kw.get("return")
GiveNewOrders0Response.typecode.pyclass = GiveNewOrders0Response

_SendTableTest1RequestTypecode = Struct(pname=("urn:unAcrossIntf-IConvert","SendTableTest"), ofwhat=[], pyclass=None, encoded="urn:unAcrossIntf-IConvert")
class SendTableTest1Request:
    typecode = _SendTableTest1RequestTypecode
    __metaclass__ = pyclass_type
    def __init__(self, **kw):
        """Keyword parameters:
        """
SendTableTest1Request.typecode.pyclass = SendTableTest1Request

_SendTableTest1ResponseTypecode = Struct(pname=("urn:unAcrossIntf-IConvert","SendTableTestResponse"), ofwhat=[ZSI.TC.String(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=None, encoded="urn:unAcrossIntf-IConvert")
class SendTableTest1Response:
    typecode = _SendTableTest1ResponseTypecode
    __metaclass__ = pyclass_type
    def __init__(self, **kw):
        """Keyword parameters:
        return -- part return
        """
        self._return =  kw.get("return")
SendTableTest1Response.typecode.pyclass = SendTableTest1Response

_SendTableSpecimen2RequestTypecode = Struct(pname=("urn:unAcrossIntf-IConvert","SendTableSpecimen"), ofwhat=[], pyclass=None, encoded="urn:unAcrossIntf-IConvert")
class SendTableSpecimen2Request:
    typecode = _SendTableSpecimen2RequestTypecode
    __metaclass__ = pyclass_type
    def __init__(self, **kw):
        """Keyword parameters:
        """
SendTableSpecimen2Request.typecode.pyclass = SendTableSpecimen2Request

_SendTableSpecimen2ResponseTypecode = Struct(pname=("urn:unAcrossIntf-IConvert","SendTableSpecimenResponse"), ofwhat=[ZSI.TC.String(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=None, encoded="urn:unAcrossIntf-IConvert")
class SendTableSpecimen2Response:
    typecode = _SendTableSpecimen2ResponseTypecode
    __metaclass__ = pyclass_type
    def __init__(self, **kw):
        """Keyword parameters:
        return -- part return
        """
        self._return =  kw.get("return")
SendTableSpecimen2Response.typecode.pyclass = SendTableSpecimen2Response

_UpdateDoctors3RequestTypecode = Struct(pname=("urn:unAcrossIntf-IConvert","UpdateDoctors"), ofwhat=[ZSI.TC.String(pname="Value", aname="_Value", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=None, encoded="urn:unAcrossIntf-IConvert")
class UpdateDoctors3Request:
    typecode = _UpdateDoctors3RequestTypecode
    __metaclass__ = pyclass_type
    def __init__(self, **kw):
        """Keyword parameters:
        Value -- part Value
        """
        self._Value =  kw.get("Value")
UpdateDoctors3Request.typecode.pyclass = UpdateDoctors3Request

_UpdateDoctors3ResponseTypecode = Struct(pname=("urn:unAcrossIntf-IConvert","UpdateDoctorsResponse"), ofwhat=[ZSI.TCnumbers.Iint(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=None, encoded="urn:unAcrossIntf-IConvert")
class UpdateDoctors3Response:
    typecode = _UpdateDoctors3ResponseTypecode
    __metaclass__ = pyclass_type
    def __init__(self, **kw):
        """Keyword parameters:
        return -- part return
        """
        self._return =  kw.get("return")
UpdateDoctors3Response.typecode.pyclass = UpdateDoctors3Response
